<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huzai9527&#39;s personal blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-19T08:43:20.787Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++指针问题</title>
    <link href="http://yoursite.com/2018/11/19/c-%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/19/c-指针问题/</id>
    <published>2018-11-19T08:27:20.000Z</published>
    <updated>2018-11-19T08:43:20.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针究竟是什么"><a href="#指针究竟是什么" class="headerlink" title="指针究竟是什么"></a>指针究竟是什么</h2><ul><li>指针是一类特殊的变量，他保存的不是一般数据的值，而是程序中另一对象在内存中的地址<br>我们先通过一个小程序看一看指针如何工作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int n = 123,m = 456;</span><br><span class="line">int *p = &amp;n;</span><br><span class="line">cout&lt;&lt;<span class="string">"&amp;n:"</span>&lt;&lt;&amp;n&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">"&amp;p:"</span>&lt;&lt;&amp;p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">" p:"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">"*p:"</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2018/11/19/c-指针问题/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;指针究竟是什么&quot;&gt;&lt;a href=&quot;#指针究竟是什么&quot; class=&quot;headerlink&quot; title=&quot;指针究竟是什么&quot;&gt;&lt;/a&gt;指针究竟是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;指针是一类特殊的变量，他保存的不是一般数据的值，而是程序中另一对象在内存中的地址&lt;br&gt;
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>scrapy构建自己的ip代理池</title>
    <link href="http://yoursite.com/2018/11/18/scrapy%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ip%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
    <id>http://yoursite.com/2018/11/18/scrapy构建自己的ip代理池/</id>
    <published>2018-11-18T09:33:13.000Z</published>
    <updated>2018-11-19T08:15:02.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用scrapy爬取可用的代理"><a href="#用scrapy爬取可用的代理" class="headerlink" title="用scrapy爬取可用的代理"></a>用scrapy爬取可用的代理</h1><h2 id="分析免费代理网站的结构"><a href="#分析免费代理网站的结构" class="headerlink" title="分析免费代理网站的结构"></a>分析免费代理网站的结构</h2><ul><li>我爬取了三个字段：<strong>IP</strong>、<strong>port</strong>、<strong>type</strong><br><img src="https://i.loli.net/2018/11/18/5bf12dc61a906.jpg" alt="TIM图片20181118171534.jpg"><h2 id="分析要爬取的数据，编写items-py"><a href="#分析要爬取的数据，编写items-py" class="headerlink" title="分析要爬取的数据，编写items.py"></a>分析要爬取的数据，编写items.py</h2></li><li>因此在items.py中，建立相应的字段<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">class IproxyItem(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    ip = scrapy.Field()</span><br><span class="line">    <span class="built_in">type</span> = scrapy.Field()</span><br><span class="line">    port = scrapy.Field()</span><br></pre></td></tr></table></figure></li></ul><h2 id="爬取所有的免费ip"><a href="#爬取所有的免费ip" class="headerlink" title="爬取所有的免费ip"></a>爬取所有的免费ip</h2><ul><li>在spider目录下，创建IpSpider.py<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">import Iproxy.items</span><br><span class="line">class IpSpider(scrapy.Spider):</span><br><span class="line">    name = <span class="string">'IpSpider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'xicidaili.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.xicidaili.com/'</span>]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        item = Iproxy.items.IproxyItem()</span><br><span class="line">        item[<span class="string">'ip'</span>] = response.css(<span class="string">'tr td:nth-child(2)::text'</span>).extract()</span><br><span class="line">        item[<span class="string">'port'</span>] = response.css(<span class="string">'tr td:nth-child(3)::text'</span>).extract()</span><br><span class="line">        item[<span class="string">'type'</span>] = response.css(<span class="string">'tr td:nth-child(6) ::text'</span>).extract()</span><br><span class="line">        yield item</span><br></pre></td></tr></table></figure></li></ul><h2 id="检测是否可用，如果可用则存入数据库"><a href="#检测是否可用，如果可用则存入数据库" class="headerlink" title="检测是否可用，如果可用则存入数据库"></a>检测是否可用，如果可用则存入数据库</h2><ul><li>因为是免费的ip，所以我们有必要检测一下他是否可用，对于可用的就存入数据库，反之则丢弃</li><li>检测处理数据在pipeline.py中编写</li><li>检测原理，通过代理访问百度，如果能够访问，则说明可用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">class IproxyPipeline(object):</span><br><span class="line">    def process_item(self, item, spider):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'</span>)</span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"168168"</span>, <span class="string">"spider"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(1, len(item[<span class="string">'ip'</span>])):</span><br><span class="line">            ip = item[<span class="string">'ip'</span>][i] + <span class="string">':'</span> + item[<span class="string">'port'</span>][i]</span><br><span class="line">            try:</span><br><span class="line">                <span class="keyword">if</span> self.proxyIpCheck(ip) is False:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'此ip：'</span>+ip+<span class="string">"不能用"</span>)</span><br><span class="line">                    <span class="built_in">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'此ip：'</span>+ip+<span class="string">'可用，存入数据库！'</span>)</span><br><span class="line">                    sql = <span class="string">'insert into proxyIp value ("%s")'</span> % (ip)</span><br><span class="line">                    cursor.execute(sql)</span><br><span class="line">                    db.commit()</span><br><span class="line">            except:</span><br><span class="line">                db.rollback()</span><br><span class="line">        db.close()</span><br><span class="line">        <span class="built_in">return</span> item</span><br><span class="line"></span><br><span class="line">    def proxyIpCheck(self, ip):</span><br><span class="line">        proxies = &#123;<span class="string">'http'</span>: <span class="string">'http://'</span> + ip, <span class="string">'https'</span>: <span class="string">'https://'</span> + ip&#125;</span><br><span class="line">        try:</span><br><span class="line">            r = requests.get(<span class="string">'https://www.baidu.com/'</span>, proxies=proxies, timeout=1)</span><br><span class="line">            <span class="keyword">if</span> (r.status_code == 200):</span><br><span class="line">                <span class="built_in">return</span> True</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">return</span> False</span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">return</span> False</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行情况"><a href="#运行情况" class="headerlink" title="运行情况"></a>运行情况</h2><ul><li>可以看出还是有好多ip不能用的<br><img src="https://i.loli.net/2018/11/18/5bf1308222b42.png" alt="TIM图片20181118172712.png"></li><li>可用的存在数据库<br><img src="https://i.loli.net/2018/11/18/5bf130d8031b3.jpg" alt="TIM图片20181118172841.jpg"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用scrapy爬取可用的代理&quot;&gt;&lt;a href=&quot;#用scrapy爬取可用的代理&quot; class=&quot;headerlink&quot; title=&quot;用scrapy爬取可用的代理&quot;&gt;&lt;/a&gt;用scrapy爬取可用的代理&lt;/h1&gt;&lt;h2 id=&quot;分析免费代理网站的结构&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="python scrapy 爬虫" scheme="http://yoursite.com/tags/python-scrapy-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python爬取最新更新的小说并发送到你的邮箱</title>
    <link href="http://yoursite.com/2018/11/17/python%E7%88%AC%E5%8F%96%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0%E7%9A%84%E5%B0%8F%E8%AF%B4%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E4%BD%A0%E7%9A%84%E9%82%AE%E7%AE%B1/"/>
    <id>http://yoursite.com/2018/11/17/python爬取最新更新的小说并发送到你的邮箱/</id>
    <published>2018-11-17T07:07:29.000Z</published>
    <updated>2018-11-17T08:30:03.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据获取—Spider"><a href="#数据获取—Spider" class="headerlink" title="数据获取—Spider()"></a>数据获取—Spider()</h2><h3 id="找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取"><a href="#找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取" class="headerlink" title="找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取"></a>找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取</h3><p>  <img src="https://i.loli.net/2018/11/17/5befc2f9dd2a9.png" alt="1.png"><br>  这里我获取最新章节的时间、标题以及标题的连接<br>  <img src="https://i.loli.net/2018/11/17/5befc38daf280.png" alt="2.png"><br>  这里获取内容</p><h3 id="编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容"><a href="#编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容" class="headerlink" title="编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容"></a>编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容</h3><ul><li>方法中需要导入的包 <strong>requests</strong> <strong>bs4</strong> <strong>re</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def spider():</span><br><span class="line">    list = []</span><br><span class="line">    response = requests.get(<span class="string">'https://www.xbiquge6.com/13_13134/'</span>)</span><br><span class="line">    response.encoding = (<span class="string">'utf-8'</span>)</span><br><span class="line">    html = response.text</span><br><span class="line">    html = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    time = html.select(<span class="string">'div#info p:nth-of-type(3)'</span>).__getitem__(0).text[5:]</span><br><span class="line">    title = html.select(<span class="string">'div#info p:nth-of-type(4) a[href]'</span>).__getitem__(0).text</span><br><span class="line">    href = html.select(<span class="string">'div#info p:nth-of-type(4) a[href]'</span>).__getitem__(0)</span><br><span class="line">    <span class="comment"># print(title)</span></span><br><span class="line">    pattern = re.compile(r<span class="string">'href="(.+?)"'</span>)</span><br><span class="line">    href = re.findall(pattern, href.__str__()).__getitem__(0)</span><br><span class="line">    href = <span class="string">"https://www.xbiquge6.com"</span> + href</span><br><span class="line">    response = requests.get(href)</span><br><span class="line">    response.encoding = (<span class="string">'utf-8'</span>)</span><br><span class="line">    html = BeautifulSoup(response.text, <span class="string">'html.parser'</span>)</span><br><span class="line">    content = html.select(<span class="string">'div#content'</span>)</span><br><span class="line">    <span class="comment"># print(content)</span></span><br><span class="line">    list.append(title)</span><br><span class="line">    list.append(content)</span><br><span class="line">    list.append(time)</span><br><span class="line">    <span class="built_in">return</span> list</span><br></pre></td></tr></table></figure></li></ul><h2 id="邮件发送—smtp"><a href="#邮件发送—smtp" class="headerlink" title="邮件发送—smtp()"></a>邮件发送—smtp()</h2><h3 id="首先先在你的邮箱中设置打开smtp服务"><a href="#首先先在你的邮箱中设置打开smtp服务" class="headerlink" title="首先先在你的邮箱中设置打开smtp服务"></a>首先先在你的邮箱中设置打开smtp服务</h3><p>比如我的QQ邮箱，先进入邮箱-&gt;点击设置-&gt;点击账户-&gt;下滑找到smtp服务-&gt;点击开启服务-&gt;生成授权码（就是你在smtp方法中用到的password）<br>![PCO_6AO93%@2W$B}<a href="https://i.loli.net/2018/11/17/5befc49990bec.png" target="_blank" rel="noopener">GFGHI0 (1).png</a></p><h3 id="编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False"><a href="#编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False" class="headerlink" title="编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False"></a>编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def mail():</span><br><span class="line">    list = spider();</span><br><span class="line">    ret = True</span><br><span class="line">    try:</span><br><span class="line">        mail_msg = list.__getitem__(1).__str__()</span><br><span class="line">        msg = MIMEText(mail_msg, <span class="string">'html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        msg[<span class="string">'From'</span>] = formataddr([<span class="string">'huzai'</span>, my_sender])</span><br><span class="line">        msg[<span class="string">'To'</span>] = formataddr([<span class="string">'huzai'</span>, receiver])</span><br><span class="line">        msg[<span class="string">'Subject'</span>] = list.__getitem__(0)</span><br><span class="line">        server = smtplib.SMTP_SSL(<span class="string">'smtp.qq.com'</span>, 465)</span><br><span class="line">        server.login(my_sender, my_pwd)</span><br><span class="line">        server.sendmail(my_sender, [receiver], msg.as_string())</span><br><span class="line">        server.quit()</span><br><span class="line">    except Exception:</span><br><span class="line">        ret = False</span><br><span class="line">    <span class="built_in">return</span> ret</span><br></pre></td></tr></table></figure><h2 id="上传脚本到服务器"><a href="#上传脚本到服务器" class="headerlink" title="上传脚本到服务器"></a>上传脚本到服务器</h2><h3 id="使用xftp将写好的smtp-py上传到你的云服务器上"><a href="#使用xftp将写好的smtp-py上传到你的云服务器上" class="headerlink" title="使用xftp将写好的smtp.py上传到你的云服务器上"></a>使用xftp将写好的smtp.py上传到你的云服务器上</h3><p><img src="https://i.loli.net/2018/11/17/5befc6acf033d.png" alt="3.png"><br>直接拖进去就行</p><h3 id="这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装"><a href="#这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装" class="headerlink" title="这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装"></a>这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装</h3><ul><li>如果你的服务器上的版本是2.*的可以运行下面代码安装python3<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove python</span><br><span class="line">sudo apt-get install python3</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure></li></ul><h3 id="用xshell进入服务器试着运行"><a href="#用xshell进入服务器试着运行" class="headerlink" title="用xshell进入服务器试着运行"></a>用xshell进入服务器试着运行</h3><p><img src="https://i.loli.net/2018/11/17/5befc966d6b17.png" alt="TIM图片20181117155505.png"></p><h2 id="在服务器端设置定时执行"><a href="#在服务器端设置定时执行" class="headerlink" title="在服务器端设置定时执行"></a>在服务器端设置定时执行</h2><h3 id="确保你安装了crontab（ubuntu默认安装）"><a href="#确保你安装了crontab（ubuntu默认安装）" class="headerlink" title="确保你安装了crontab（ubuntu默认安装）"></a>确保你安装了crontab（ubuntu默认安装）</h3><p>cron命名解析：执行的时间 + 执行的用户 + 执行的命令<br><img src="https://i.loli.net/2018/11/17/5befc8af89fb3.png" alt="4.png"></p><h3 id="查看原有的cron"><a href="#查看原有的cron" class="headerlink" title="查看原有的cron"></a>查看原有的cron</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/crontab</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/17/5befc9f6040d2.png" alt="TIM图片20181117155728.png"></p><h3 id="编辑你的程序"><a href="#编辑你的程序" class="headerlink" title="编辑你的程序"></a>编辑你的程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/crontab</span><br></pre></td></tr></table></figure><p>编写你的命令，每天14:58给我发送邮件，这里根据你看的小说的更新时间设置，一天几更在大约什么时间等等<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">58 14 * * * root python3 smtp.py</span><br></pre></td></tr></table></figure></p><p>编辑好了再次查看cron是否已经写入，我这里已经写入<br><img src="https://i.loli.net/2018/11/17/5befcb198cbae.png" alt="TIM图片20181117160221.png"><br>重启crontab服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cron restart</span><br></pre></td></tr></table></figure></p><h2 id="静静的等待14-58的到来，查看邮箱"><a href="#静静的等待14-58的到来，查看邮箱" class="headerlink" title="静静的等待14:58的到来，查看邮箱"></a>静静的等待14:58的到来，查看邮箱</h2><ul><li>邮件收到了最新更新的哦<br><img src="https://i.loli.net/2018/11/17/5befcbd7281ec.png" alt="TIM图片20181117160515.png"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据获取—Spider&quot;&gt;&lt;a href=&quot;#数据获取—Spider&quot; class=&quot;headerlink&quot; title=&quot;数据获取—Spider()&quot;&gt;&lt;/a&gt;数据获取—Spider()&lt;/h2&gt;&lt;h3 id=&quot;找目标网站，该网站是你看小说的网站，分析该网站的结
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo搭建个人博客</title>
    <link href="http://yoursite.com/2018/11/11/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/11/11/github-hexo搭建个人博客/</id>
    <published>2018-11-11T09:46:19.000Z</published>
    <updated>2018-11-13T12:08:27.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明"><a href="#1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明" class="headerlink" title="1.创建的项目名默认为  用户名.github.io,创建时点击生成readme文件，方便后面添加说明"></a>1.创建的项目名默认为  <strong>用户名.github.io</strong>,创建时点击生成readme文件，方便后面添加说明</h3><p><img aligen="center" src="https://i.loli.net/2018/11/13/5beaa5e07e5a7.png"></p><h3 id="2-在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer"><a href="#2-在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer" class="headerlink" title="2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer"></a>2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer</h3><p><img src="https://i.loli.net/2018/11/13/5beaacf147c83.png" alt="使用vscode打开文件夹"></p><h3 id="3-使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来"><a href="#3-使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来" class="headerlink" title="3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来"></a>3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来</h3><p><img src="https://i.loli.net/2018/11/13/5beaae3c7ee9d.png" alt="hexo初始化文件夹"></p><h3 id="4-运行hexo-server打开服务，看看本地能不能显示"><a href="#4-运行hexo-server打开服务，看看本地能不能显示" class="headerlink" title="4.运行hexo server打开服务，看看本地能不能显示"></a>4.运行hexo server打开服务，看看本地能不能显示</h3><p><img src="https://i.loli.net/2018/11/13/5beab03a63524.png" alt="hexo server"><br>运行后访问url，如果看到如图就成功了<br><img src="https://i.loli.net/2018/11/13/5beab09f5e2ab.jpg" alt="运行效果"></p><h3 id="5-配置文件中填写git的配置信息，按照如下格式填写"><a href="#5-配置文件中填写git的配置信息，按照如下格式填写" class="headerlink" title="5.配置文件中填写git的配置信息，按照如下格式填写"></a>5.配置文件中填写git的配置信息，按照如下格式填写</h3><p><img src="https://i.loli.net/2018/11/13/5beab1fb7f83a.png" alt="配置信息"></p><h3 id="6-打开文件夹，右键git-bash-here"><a href="#6-打开文件夹，右键git-bash-here" class="headerlink" title="6.打开文件夹，右键git bash here"></a>6.打开文件夹，右键git bash here</h3><p><img src="https://i.loli.net/2018/11/13/5beab3362770b.png" alt="git bash here"></p><h3 id="7-输入cd-ssh，进入ssh文件夹"><a href="#7-输入cd-ssh，进入ssh文件夹" class="headerlink" title="7.输入cd ~/.ssh，进入ssh文件夹"></a>7.输入cd ~/.ssh，进入ssh文件夹</h3><p><img src="https://i.loli.net/2018/11/13/5beab3e76e0c4.png" alt="ssh"></p><h3 id="8-配置git中的用户名和邮箱"><a href="#8-配置git中的用户名和邮箱" class="headerlink" title="8.配置git中的用户名和邮箱"></a>8.配置git中的用户名和邮箱</h3><p><img src="https://i.loli.net/2018/11/13/5beab93273357.png" alt="配置用户名"></p><h3 id="9-生成ssh密钥"><a href="#9-生成ssh密钥" class="headerlink" title="9.生成ssh密钥"></a>9.生成ssh密钥</h3><p><img src="https://i.loli.net/2018/11/13/5beab95f2f069.png" alt="生成密钥"></p><h3 id="10-在github的项目中加入密钥"><a href="#10-在github的项目中加入密钥" class="headerlink" title="10.在github的项目中加入密钥"></a>10.在github的项目中加入密钥</h3><p><img src="https://i.loli.net/2018/11/13/5beab988e1bda.png" alt="添加密钥"></p><h3 id="11-测试密钥链接是否成功"><a href="#11-测试密钥链接是否成功" class="headerlink" title="11.测试密钥链接是否成功"></a>11.测试密钥链接是否成功</h3><p><img src="https://i.loli.net/2018/11/13/5beab9fc045d7.png" alt="测试"></p><h3 id="12-测试成功后再再编辑器中运行"><a href="#12-测试成功后再再编辑器中运行" class="headerlink" title="12.测试成功后再再编辑器中运行"></a>12.测试成功后再再编辑器中运行</h3><pre><code>hexo cleanhexo ghexo d</code></pre><p><img src="https://i.loli.net/2018/11/13/5beaba9fb29d7.png" alt="4.png">这样就算上传成功</p><h3 id="13-访问你的博客，看到之前再本地运行的界面，就行了"><a href="#13-访问你的博客，看到之前再本地运行的界面，就行了" class="headerlink" title="13.访问你的博客，看到之前再本地运行的界面，就行了"></a>13.访问你的博客，看到之前再本地运行的界面，就行了</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明&quot;&gt;&lt;a href=&quot;#1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/10/hello-world/"/>
    <id>http://yoursite.com/2018/11/10/hello-world/</id>
    <published>2018-11-10T13:00:35.376Z</published>
    <updated>2018-11-10T13:00:35.376Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
