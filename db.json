{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/timg.jpg","path":"img/timg.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-material-x/source/style.less","path":"style.less","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/js/volantis.js","path":"js/volantis.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-material-x/.gitignore","hash":"f875b6524d4c61e5de0a1d9efdec1fe451d7bc07","modified":1593531055767},{"_id":"themes/hexo-theme-material-x/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1593531055768},{"_id":"themes/hexo-theme-material-x/README.md","hash":"b497d2c298d6ca35c5ccf9793baa0ceab77b64bf","modified":1593531055768},{"_id":"themes/hexo-theme-material-x/_config.yml","hash":"f576eafdd2f86443c4e4f025f5da3025fc5147a7","modified":1593578971228},{"_id":"source/_posts/docker常用命令.md","hash":"7bde317b0ebe8b77cdd1d22e37e359446ef04eed","modified":1593751777734},{"_id":"source/_posts/c-指针问题.md","hash":"3370762a0b1596744ea602f3811c0ab1ba5505ac","modified":1593520157395},{"_id":"source/_posts/git简单指令.md","hash":"83d6141e36820ca07d4a374839ab35de4a912928","modified":1593520157396},{"_id":"source/_posts/python网络编程.md","hash":"76ec6ce62865723ec7baa44a5240eddaf5f27186","modified":1594185328938},{"_id":"source/_posts/scrapy构建自己的ip代理池.md","hash":"618aa2a9b4cc66e16067c7f7a69f7668e0bda057","modified":1593520157397},{"_id":"source/_posts/ubuntu自动换源.md","hash":"eb67651009ef41b22fbed877744f35d6aecdad8b","modified":1594270841196},{"_id":"source/_posts/github-hexo搭建个人博客.md","hash":"4059800c93bd90bc65c177a3c03eb88ef4d55c52","modified":1593520157396},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1593520157397},{"_id":"source/_posts/python爬取最新更新的小说并发送到你的邮箱.md","hash":"34fc73b85a7dc6bb53bbc0a0d7c0c53fb74a873f","modified":1593520157397},{"_id":"source/_posts/小说更新后发送邮箱的问题解决.md","hash":"d869bc608f638face607d86a850fb9c071fcbca5","modified":1593520157397},{"_id":"source/_posts/测试异地管理.md","hash":"bdb4f65d17e8599c3f7e1012073709074b5cc897","modified":1593581735561},{"_id":"source/_posts/数据分析-numpy.md","hash":"8022d267fdb5c11216541484496138defbe068fc","modified":1593520157399},{"_id":"source/_posts/数据分析-数据清洗.md","hash":"69bb43a8d73007d0dd140284f523bc26dc00741e","modified":1593520157403},{"_id":"source/_posts/数据分析-pandas.md","hash":"60899a320ba6f5dacb0f9adc8d81e0b3b2822821","modified":1593520157399},{"_id":"themes/hexo-theme-material-x/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1593531055761},{"_id":"themes/hexo-theme-material-x/.git/config","hash":"54a325b5555fda9058bc4c122b19482cd9f05634","modified":1593531055763},{"_id":"source/_posts/爬取网易云热评并生成词云.md","hash":"ca444480bf780828f5e810764e13a13dbd9926b3","modified":1593520157403},{"_id":"source/img/timg.jpg","hash":"07ecaf6f0d81bd86a43156fba992d88d51312ebb","modified":1593520157407},{"_id":"source/tags/index.md","hash":"77b914be60deb959b592786410ff3b6aed1b1ca5","modified":1593520157407},{"_id":"themes/hexo-theme-material-x/.git/index","hash":"14448a33ec26e3e1fc76fefb5cedcc876f0f50f1","modified":1594268705774},{"_id":"themes/hexo-theme-material-x/.git/packed-refs","hash":"a7c4ec7d0cf656b95ddb5da514ec005f94788a9f","modified":1593531055759},{"_id":"themes/hexo-theme-material-x/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1593530997072},{"_id":"themes/hexo-theme-material-x/languages/en.yml","hash":"3e0c3b617f282ca66d7cff444c9671ea7bb1a503","modified":1593531055768},{"_id":"themes/hexo-theme-material-x/languages/zh-CN.yml","hash":"c3a9d3831f1cef9edd2429b4766c359e21673dde","modified":1593531055768},{"_id":"themes/hexo-theme-material-x/languages/zh-HK.yml","hash":"fb5510c20171654d2ebc1ac780a1d6cc596fbd37","modified":1593531055768},{"_id":"themes/hexo-theme-material-x/languages/zh-TW.yml","hash":"b8bc7643f790c9da2ec6741af5eeca3dc2e0417a","modified":1593531055769},{"_id":"themes/hexo-theme-material-x/layout/archive.ejs","hash":"6b36ef79379f65952df9f27475f73d191d22657e","modified":1593531055776},{"_id":"themes/hexo-theme-material-x/layout/category.ejs","hash":"ff5b299f7b0f3668174314c57ffe0389891399a6","modified":1593531055777},{"_id":"themes/hexo-theme-material-x/layout/index.ejs","hash":"03ba528ba647d8ad184a2dd08e1c2c3ac4dd7baa","modified":1593531055777},{"_id":"themes/hexo-theme-material-x/layout/layout.ejs","hash":"9c262bfa12dd43d434d86deea6adf8dfdf46d5b4","modified":1593531055777},{"_id":"themes/hexo-theme-material-x/layout/links.ejs","hash":"65fa60924151666fbb814b958ec9b5b231ab0ab9","modified":1593531055777},{"_id":"themes/hexo-theme-material-x/layout/list.ejs","hash":"3466d6dede7aab729b2986c145d95154af0856f2","modified":1593531055778},{"_id":"themes/hexo-theme-material-x/layout/page.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1593531055778},{"_id":"themes/hexo-theme-material-x/layout/post.ejs","hash":"3dd6f14881ac16a8ceb48a1d9f9f5d0377cd082c","modified":1593531055778},{"_id":"themes/hexo-theme-material-x/layout/tag.ejs","hash":"ddbfca0cb18d9ceb47611fa3c7e8a8b5ecf31085","modified":1593531055778},{"_id":"themes/hexo-theme-material-x/source/style.less","hash":"bd90f674eca5279de970627ce19f20fd784c293a","modified":1593531055795},{"_id":"source/_posts/c-指针问题/1.png","hash":"0e9e81e43fe3fc170ef66309ad6b6881842aea58","modified":1593520157395},{"_id":"source/_posts/c-指针问题/2.png","hash":"f9c8d8b5dc7eb1c14c4cf5bd94c7c354a9682325","modified":1593520157396},{"_id":"source/_posts/c-指针问题/3.png","hash":"1c86832e79d1e0a34ea58c84edcb3ddbe2be1629","modified":1593520157396},{"_id":"source/_posts/c-指针问题/4.png","hash":"59428f2955a08d7a84cd83c8d1585d791d4e025f","modified":1593520157396},{"_id":"source/_posts/c-指针问题/5.png","hash":"388448b477614594a2d3b7fc2a600575e2a1c57f","modified":1593520157396},{"_id":"source/_posts/docker常用命令/2.jpg","hash":"2405689c294059e7c249e09370ed1bdadf68cf2b","modified":1593580180865},{"_id":"source/_posts/docker常用命令/9.jpg","hash":"ce7bc0fdb0a713e960077866e11b48e94b14f5bb","modified":1593747990435},{"_id":"source/_posts/爬取网易云热评并生成词云/1.png","hash":"a83e54672b6d3cfa36681eee398cd9a4b9d9aab2","modified":1593520157403},{"_id":"source/_posts/爬取网易云热评并生成词云/10.png","hash":"b319b8c6ffb05907e2da66164e55a64c509ea0d2","modified":1593520157403},{"_id":"source/_posts/爬取网易云热评并生成词云/11.png","hash":"73358e34e9933da7f742091439102ad0ce01bf4c","modified":1593520157404},{"_id":"source/_posts/爬取网易云热评并生成词云/2.png","hash":"6472f9e41f07259ee600f1c5349435fbf537338a","modified":1593520157404},{"_id":"source/_posts/爬取网易云热评并生成词云/3.png","hash":"b3d9e8dd7d2cef900cd4bf034a9c0fbd8baa495d","modified":1593520157405},{"_id":"source/_posts/爬取网易云热评并生成词云/4.png","hash":"fe27476a8ddf5febc4c282b13559f13faa2ff922","modified":1593520157405},{"_id":"source/_posts/爬取网易云热评并生成词云/6.png","hash":"a06244c01602de32c5f8c7cc670c221d5ea314b4","modified":1593520157405},{"_id":"source/_posts/爬取网易云热评并生成词云/7.png","hash":"a9b5a18e806abf9313f1f2f76a60a66f990a5d40","modified":1593520157405},{"_id":"themes/hexo-theme-material-x/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1593530997072},{"_id":"themes/hexo-theme-material-x/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1593530997073},{"_id":"themes/hexo-theme-material-x/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1593530997073},{"_id":"themes/hexo-theme-material-x/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1593530997074},{"_id":"themes/hexo-theme-material-x/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1593530997073},{"_id":"themes/hexo-theme-material-x/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1593530997072},{"_id":"themes/hexo-theme-material-x/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1593530997073},{"_id":"themes/hexo-theme-material-x/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1593530997073},{"_id":"themes/hexo-theme-material-x/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1593530997072},{"_id":"themes/hexo-theme-material-x/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1593530997072},{"_id":"themes/hexo-theme-material-x/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1593530997074},{"_id":"themes/hexo-theme-material-x/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1593530997073},{"_id":"themes/hexo-theme-material-x/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1593530997074},{"_id":"themes/hexo-theme-material-x/.git/logs/HEAD","hash":"f12456d68b48db4e4bd8ab6ad1d21b5a336c54de","modified":1593531055762},{"_id":"themes/hexo-theme-material-x/.github/ISSUE_TEMPLATE/------.md","hash":"cc03dbf4326b9cd0f5a8a024bf6bb622334eca3f","modified":1593531055767},{"_id":"themes/hexo-theme-material-x/layout/_cover/search.ejs","hash":"c5c79e41c43efadf41ffc2393152b89213351d00","modified":1593531055769},{"_id":"themes/hexo-theme-material-x/layout/_meta/author.ejs","hash":"cebe5d05c7588fb206c64b414b0bad2fca39a7cb","modified":1593531055769},{"_id":"themes/hexo-theme-material-x/layout/_meta/categories.ejs","hash":"4b5a6cd4a55742b5963dcd63c3bd9fb8534ba178","modified":1593531055769},{"_id":"themes/hexo-theme-material-x/layout/_meta/counter.ejs","hash":"7a22e5cec94673edcb084680df445aa7d800ca2e","modified":1593531055769},{"_id":"themes/hexo-theme-material-x/layout/_meta/date.ejs","hash":"0ef066dc7247464359a85d9c39010c1e7e9ffb1d","modified":1593531055770},{"_id":"themes/hexo-theme-material-x/layout/_meta/music.ejs","hash":"1ac33225b2dfc4d5498a86266f97082a8bf135ec","modified":1593531055770},{"_id":"themes/hexo-theme-material-x/layout/_meta/share.ejs","hash":"96cac09c9906283f454039a9f5c0302104338e64","modified":1593531055770},{"_id":"themes/hexo-theme-material-x/layout/_meta/thumbnail.ejs","hash":"99f3e0438be97f9462d9a9189117260d811da2e1","modified":1593531055770},{"_id":"themes/hexo-theme-material-x/layout/_meta/tags.ejs","hash":"ca10c85f988b96f332d09d20016c78974cbc925d","modified":1593531055770},{"_id":"themes/hexo-theme-material-x/layout/_meta/title.ejs","hash":"58f30ee662f22f55ef9191e06390229beda20694","modified":1593531055771},{"_id":"themes/hexo-theme-material-x/layout/_meta/top.ejs","hash":"e4e8bf49173f757ed19ed49d07e0db03f146e989","modified":1593531055771},{"_id":"themes/hexo-theme-material-x/layout/_meta/updated.ejs","hash":"2d6e1e234721b930308caf61d2d086213f2389e4","modified":1593531055771},{"_id":"themes/hexo-theme-material-x/layout/_partial/archive.ejs","hash":"ca70dd02c7efb4067c453e8a9414bd3f203db926","modified":1593531055771},{"_id":"themes/hexo-theme-material-x/layout/_partial/article.ejs","hash":"f7e366529355d06cfd4070ed9fae994be09abd25","modified":1593531055771},{"_id":"themes/hexo-theme-material-x/layout/_partial/categories.ejs","hash":"12b2fca703fa56da7a85045bf17499845c3fe5bb","modified":1593531055771},{"_id":"themes/hexo-theme-material-x/layout/_partial/cover.ejs","hash":"61430899b26806df450ab75e021534b482ad7746","modified":1593531055772},{"_id":"themes/hexo-theme-material-x/layout/_partial/footer.ejs","hash":"ea1e86c615aa8cc6a3f6d073223e9c229a135a26","modified":1593531055772},{"_id":"themes/hexo-theme-material-x/layout/_partial/head.ejs","hash":"d4fefdaf1b311daa5a9df2e34fd78320272c505f","modified":1593531055772},{"_id":"themes/hexo-theme-material-x/layout/_partial/header.ejs","hash":"846d5496b7a26120ca92e038860707fa70bcaa30","modified":1593531055772},{"_id":"themes/hexo-theme-material-x/layout/_partial/mathjax.ejs","hash":"a51a072654643ecf850f813a31dd40d746f8ab96","modified":1593531055772},{"_id":"themes/hexo-theme-material-x/layout/_partial/meta.ejs","hash":"9d6a39dd84cc14c31a3fc36e9e0e5ee1f168e53f","modified":1593531055772},{"_id":"themes/hexo-theme-material-x/layout/_partial/post.ejs","hash":"6e7a5e3c2894778d8476d01603ab1790f7ccfe00","modified":1593531055773},{"_id":"themes/hexo-theme-material-x/layout/_partial/scripts.ejs","hash":"03026fb8f6d18b70f6af6dae2f434ddca98d9813","modified":1593531055773},{"_id":"themes/hexo-theme-material-x/layout/_partial/side.ejs","hash":"da987d6feed88023241ea3ee33f390fc47b5c179","modified":1593531055773},{"_id":"themes/hexo-theme-material-x/layout/_third-party/aplayer.ejs","hash":"9260682432e0a80261435b4bd27ccf16b8d96fed","modified":1593531055774},{"_id":"themes/hexo-theme-material-x/layout/_third-party/clipboard.ejs","hash":"628a0ff18fecc3c866070517aad19366c00f417c","modified":1593531055774},{"_id":"themes/hexo-theme-material-x/layout/_third-party/comments.ejs","hash":"e0805f203c7527a852a414ddd21425af4fed0218","modified":1593531055774},{"_id":"themes/hexo-theme-material-x/layout/_third-party/fancybox.ejs","hash":"a840db5c132ded3be61e748ef1feadae1435465d","modified":1593531055774},{"_id":"themes/hexo-theme-material-x/layout/_third-party/share.ejs","hash":"5b2a57aac6df2be654e45104177a9382641d7584","modified":1593531055774},{"_id":"themes/hexo-theme-material-x/layout/_widget/author.ejs","hash":"630967f53c7f8df561022a6230f4791b2c1fde95","modified":1593531055774},{"_id":"themes/hexo-theme-material-x/layout/_widget/category.ejs","hash":"a4b3059bb77841a0569243b2ef474ba1fd67ca3a","modified":1593531055775},{"_id":"themes/hexo-theme-material-x/layout/_widget/grid.ejs","hash":"33372405602c2bd6dcff42011d14998e5a2b2b70","modified":1593531055775},{"_id":"themes/hexo-theme-material-x/layout/_widget/header.ejs","hash":"d542654385da91d26c0647aae0155a7c3fe14d1d","modified":1593531055775},{"_id":"themes/hexo-theme-material-x/layout/_widget/list.ejs","hash":"2ce0d61c140852c84d6f0e52b063b0403836be37","modified":1593531055775},{"_id":"themes/hexo-theme-material-x/layout/_widget/music.ejs","hash":"a02103653676ab8016b2c4e93c7cd402d4a889bc","modified":1593531055776},{"_id":"themes/hexo-theme-material-x/layout/_widget/plain.ejs","hash":"27737e8f046ee3e8907a3ebb86e9800d405a7f4a","modified":1593531055776},{"_id":"themes/hexo-theme-material-x/layout/_widget/related_posts.ejs","hash":"aaf497403902a6bd2066c3a7de9b99170914daa4","modified":1593531055776},{"_id":"themes/hexo-theme-material-x/layout/_widget/tagcloud.ejs","hash":"b81b89ee0f62768e0cc97cfb2442cdb903ca559a","modified":1593531055776},{"_id":"themes/hexo-theme-material-x/layout/_widget/toc.ejs","hash":"dd5f82c8965da414d96d935645fc27f9f3f05566","modified":1593531055776},{"_id":"themes/hexo-theme-material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1593531055779},{"_id":"themes/hexo-theme-material-x/source/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1593531055786},{"_id":"themes/hexo-theme-material-x/source/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1593531055787},{"_id":"themes/hexo-theme-material-x/source/less/_archive.less","hash":"13503b9ef5d45782ad44af3b7509191da5824284","modified":1593531055789},{"_id":"themes/hexo-theme-material-x/source/less/_article.less","hash":"98b835a7bb513a88ec4e5f163923b262eacb640d","modified":1593531055789},{"_id":"themes/hexo-theme-material-x/source/less/_base.less","hash":"f56fe042567bc149eed3b29fe09618c60b0d6733","modified":1593531055789},{"_id":"themes/hexo-theme-material-x/source/less/_color.less","hash":"998da197559fa6b50b69ac07676a783374a152ce","modified":1593531055790},{"_id":"themes/hexo-theme-material-x/source/less/_defines.less","hash":"59912db57e6051debd70487848501e6ad0a016ed","modified":1593531055790},{"_id":"themes/hexo-theme-material-x/source/less/_fonts.less","hash":"0d98499e28ecce54c3e2a2f4f09011c24c4307e9","modified":1593531055790},{"_id":"themes/hexo-theme-material-x/source/less/_footer.less","hash":"f53de1b635591582ec9b1ec74249a622fc2cb8fa","modified":1593531055790},{"_id":"themes/hexo-theme-material-x/source/less/_header.less","hash":"9bb49870c459318e1dbb1302ad35645befbf9896","modified":1593531055791},{"_id":"themes/hexo-theme-material-x/source/less/_links.less","hash":"13d1ba7fa0a43b00dee925160c108f01eb212285","modified":1593531055792},{"_id":"themes/hexo-theme-material-x/source/less/_layout.less","hash":"d44abc94ffe5e4f70ecc8e5861ae05fb49f1da88","modified":1593531055791},{"_id":"themes/hexo-theme-material-x/source/less/_main.less","hash":"a4898d344e60c08249750b5eca3c6dbd11e2a4e3","modified":1593531055793},{"_id":"themes/hexo-theme-material-x/source/less/_normalize.less","hash":"f092813604db20a84c62ef889411598e78d14599","modified":1593531055793},{"_id":"themes/hexo-theme-material-x/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1593531055793},{"_id":"themes/hexo-theme-material-x/source/less/_search.less","hash":"7d8470699ed21c63ad6281d5934cadead109d97c","modified":1593531055793},{"_id":"themes/hexo-theme-material-x/source/less/_side.less","hash":"85b5a080defb327d4739356ec872b4e6346c12d2","modified":1593531055794},{"_id":"themes/hexo-theme-material-x/source/less/_toc.less","hash":"6d8c644aebe6fd6d9b657bd2b037ab4296fe80b1","modified":1593531055794},{"_id":"themes/hexo-theme-material-x/source/less/_tog.less","hash":"73e72c4efd04a8721a87002de1a8a0201e1f5564","modified":1593531055794},{"_id":"themes/hexo-theme-material-x/source/less/_typo.less","hash":"6a93f9fab3e1dfac4dc80dd77bf6b1223b5fb058","modified":1593531055794},{"_id":"source/_posts/docker常用命令/1.jpg","hash":"d0ff639f1291c1f2ffdbecca05b18ca0e90c1eae","modified":1593579916220},{"_id":"source/_posts/docker常用命令/3.jpg","hash":"338150788f69f77ee480141106cd0f0007d62f50","modified":1593580398839},{"_id":"source/_posts/docker常用命令/4.jpg","hash":"f4df1e3747821daf62b86e8625e79189a9cfff3c","modified":1593580772269},{"_id":"source/_posts/docker常用命令/7.jpg","hash":"0e54fea475ac2b567a35ca910540e49ed9a78f62","modified":1593646208750},{"_id":"source/_posts/git简单指令/Git.png","hash":"67050de6ad5524717981db57468daf8217161d54","modified":1593520157397},{"_id":"source/_posts/爬取网易云热评并生成词云/12.png","hash":"934be2c3d417d6232d91168e35aac48dfb029ac9","modified":1593520157404},{"_id":"source/_posts/爬取网易云热评并生成词云/5.png","hash":"d44fdddeea3609c1cc8d43135654fa058d693e48","modified":1593520157405},{"_id":"source/_posts/爬取网易云热评并生成词云/8.png","hash":"31c51a3996c61e0deed4a57a361697c5c4a64dd2","modified":1593520157406},{"_id":"source/_posts/爬取网易云热评并生成词云/9.png","hash":"d44fdddeea3609c1cc8d43135654fa058d693e48","modified":1593520157406},{"_id":"source/_posts/docker常用命令/6.jpg","hash":"338c911019229a88c6794d6f06d7c0fed2a64af9","modified":1593581047980},{"_id":"source/_posts/docker常用命令/8.jpg","hash":"929fed19e0f7030fd47c8a43b94861d7a55f9ee1","modified":1593747719905},{"_id":"source/_posts/小说更新后发送邮箱的问题解决/3.png","hash":"9f4d9798cae9e47ce264aca9183ab860acff3b49","modified":1593520157399},{"_id":"themes/hexo-theme-material-x/.git/refs/heads/master","hash":"3ddf1d42793693b3ed3482ea692ebb3fa1929c82","modified":1593531055762},{"_id":"themes/hexo-theme-material-x/source/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1593531055788},{"_id":"source/_posts/小说更新后发送邮箱的问题解决/1.png","hash":"446a344d3434581babebe92f972a4eccd531aecb","modified":1593520157398},{"_id":"source/_posts/小说更新后发送邮箱的问题解决/2.png","hash":"fe72a3106b7ce1ceada26e0aa0a88b5c02367a7e","modified":1593520157399},{"_id":"themes/hexo-theme-material-x/.git/objects/pack/pack-bf0a6726453c74d748a2c0d1ffc78d34108a4fd3.idx","hash":"5358726cb2163a0ba69023c3e4df5ab2b83f6ace","modified":1593531055751},{"_id":"themes/hexo-theme-material-x/.git/logs/refs/heads/master","hash":"f12456d68b48db4e4bd8ab6ad1d21b5a336c54de","modified":1593531055762},{"_id":"themes/hexo-theme-material-x/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1593531055761},{"_id":"themes/hexo-theme-material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1593531055782},{"_id":"themes/hexo-theme-material-x/.git/logs/refs/remotes/origin/HEAD","hash":"f12456d68b48db4e4bd8ab6ad1d21b5a336c54de","modified":1593531055761},{"_id":"source/_posts/docker常用命令/5.jpg","hash":"819f9bce79d7556b849f74f29869600d8470b8e5","modified":1593580945456},{"_id":"themes/hexo-theme-material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1593531055786},{"_id":"source/_posts/数据分析-pandas/1.jpg","hash":"91cc9fa9667a250498a25672750a7e22e93d2c1e","modified":1593520157403},{"_id":"themes/hexo-theme-material-x/.git/objects/pack/pack-bf0a6726453c74d748a2c0d1ffc78d34108a4fd3.pack","hash":"5ea36435cacd00b3ad94aa38d148f07cee806706","modified":1593531055749},{"_id":"public/atom.xml","hash":"5ca008335350a9a93ebd5b62f81cede758611b45","modified":1594270856012},{"_id":"public/content.json","hash":"a57b9ee4f8d40e443b33b99b98c3448e4283d9ac","modified":1594270856013},{"_id":"public/search.xml","hash":"1cac456f4a80d1370cde72001598f017ae5716ba","modified":1594270856304},{"_id":"public/tags/index.html","hash":"69d0749e90a9b2be49af58a6c512241fca75561d","modified":1594270856321},{"_id":"public/2020/07/09/ubuntu自动换源/index.html","hash":"9097a922d07aa02f8edab35cda480e24c73d23f5","modified":1594270856321},{"_id":"public/2020/07/01/docker常用命令/index.html","hash":"c1bb549f6334c14cd351bdb7562e317fbdeb081b","modified":1594270856321},{"_id":"public/2020/07/08/python网络编程/index.html","hash":"9c2c52ec1ea9323a86eeade7f62ebc28a732fdaf","modified":1594270856321},{"_id":"public/2020/06/30/测试异地管理/index.html","hash":"f7835b3700995efa0139703153cd94b3b47fc41c","modified":1594270856321},{"_id":"public/2020/06/30/hello-world/index.html","hash":"3edfbbbe23ac98a389a9d9a121194223986ff63d","modified":1594270856321},{"_id":"public/2019/01/20/数据分析-数据清洗/index.html","hash":"fbe4b3e1b1816e4e2ca7f93474ceb32f32dd2ce7","modified":1594270856321},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/index.html","hash":"a5d4c215d080f8c319ffb28b32ab5afac885ca1c","modified":1594270856321},{"_id":"public/2018/12/25/git简单指令/index.html","hash":"780cc93065d082c4c70f5d16ec363cfc91801848","modified":1594270856321},{"_id":"public/2018/12/25/数据分析-pandas/index.html","hash":"b015bfec530094de553650030c33f1b418d6019a","modified":1594270856321},{"_id":"public/2018/12/23/数据分析-numpy/index.html","hash":"1dadd18f2275dee2ddd6cdab2cfa9ba953ea65c7","modified":1594270856321},{"_id":"public/2018/11/23/小说更新后发送邮箱的问题解决/index.html","hash":"5a55434814a3969fa3d62366dbafa103fac72064","modified":1594270856321},{"_id":"public/2018/11/19/c-指针问题/index.html","hash":"e1b39b9d06e832ad401f903a8ddcd0be79325a71","modified":1594270856321},{"_id":"public/2018/11/18/scrapy构建自己的ip代理池/index.html","hash":"a3f5697168eb019d8b3b04bf45e3497822f93177","modified":1594270856321},{"_id":"public/2018/11/17/python爬取最新更新的小说并发送到你的邮箱/index.html","hash":"82498eddbf8f8873377e1481f22b7581a0305389","modified":1594270856321},{"_id":"public/2018/11/11/github-hexo搭建个人博客/index.html","hash":"6e9c9f78fe64dd90b621bbf458c2e20d275f517c","modified":1594270856321},{"_id":"public/archives/index.html","hash":"77df8e4792e26861f739e4c253003d1d59263e80","modified":1594270856321},{"_id":"public/archives/page/2/index.html","hash":"77df8e4792e26861f739e4c253003d1d59263e80","modified":1594270856321},{"_id":"public/archives/2018/index.html","hash":"2478dde1384bbe2d7e1bd61e06c6ff30964606fb","modified":1594270856322},{"_id":"public/archives/2018/11/index.html","hash":"cadbaece96c78cc86e7d69deb193e09c37c59581","modified":1594270856322},{"_id":"public/archives/2018/12/index.html","hash":"3114adb0993df60c70c586683bb91ba4117780fd","modified":1594270856322},{"_id":"public/archives/2019/index.html","hash":"e8cb4aa5cd98ba9944f11fc8d1fd17bdb75d3ef5","modified":1594270856322},{"_id":"public/archives/2019/01/index.html","hash":"1d79dda0d143768e8eb8755649044f059da2d9b5","modified":1594270856322},{"_id":"public/archives/2020/index.html","hash":"e081ca87cdc2c3a153f7447e51a8405361bae4a9","modified":1594270856322},{"_id":"public/archives/2020/06/index.html","hash":"19f7ecca3b5163dc3066d7bf9d7b9b7cc5058d61","modified":1594270856322},{"_id":"public/archives/2020/07/index.html","hash":"6fd60eda91f243d6e344dc763e704dc20a5cda49","modified":1594270856322},{"_id":"public/index.html","hash":"43960217beae72fd0e8cd7a4289b1aaf25b25d54","modified":1594270856322},{"_id":"public/page/2/index.html","hash":"d14d99e1343bb463a127a5d24e17b6f4af8c40fe","modified":1594270856322},{"_id":"public/tags/docker/index.html","hash":"4449811c666da94dd58c0f2aff23e567c7438f9c","modified":1594270856322},{"_id":"public/tags/c/index.html","hash":"316863b696ae599d99c3c7bb6d09366152f834fc","modified":1594270856322},{"_id":"public/tags/git/index.html","hash":"31e832c200efea18c02b0df0ea93d556a5147c86","modified":1594270856322},{"_id":"public/tags/网络编程-python/index.html","hash":"fb0816757f31c839562e44bcd598bcdbc2b2f12e","modified":1594270856322},{"_id":"public/tags/ubuntu/index.html","hash":"1aff88323e165a9d48314cc1c59622f0f61a898e","modified":1594270856322},{"_id":"public/tags/python-scrapy-爬虫/index.html","hash":"d23e66c79e8aaf3365ae62269caf336028d1b6c6","modified":1594270856322},{"_id":"public/tags/github/index.html","hash":"a5e9a83ceb5037ecdf4be6a374471b0a24697b74","modified":1594270856322},{"_id":"public/tags/python/index.html","hash":"9ea266210633212b2f49c891b1d6648588b45304","modified":1594270856323},{"_id":"public/tags/数据分析/index.html","hash":"5f60faad0777c666d8c60a558a37033b7dc85dbb","modified":1594270856323},{"_id":"public/img/timg.jpg","hash":"07ecaf6f0d81bd86a43156fba992d88d51312ebb","modified":1594270856327},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1594270856327},{"_id":"public/2018/11/19/c-指针问题/1.png","hash":"0e9e81e43fe3fc170ef66309ad6b6881842aea58","modified":1594270856327},{"_id":"public/2018/11/19/c-指针问题/3.png","hash":"1c86832e79d1e0a34ea58c84edcb3ddbe2be1629","modified":1594270856327},{"_id":"public/2018/11/19/c-指针问题/2.png","hash":"f9c8d8b5dc7eb1c14c4cf5bd94c7c354a9682325","modified":1594270856327},{"_id":"public/2018/11/19/c-指针问题/4.png","hash":"59428f2955a08d7a84cd83c8d1585d791d4e025f","modified":1594270856327},{"_id":"public/2018/11/19/c-指针问题/5.png","hash":"388448b477614594a2d3b7fc2a600575e2a1c57f","modified":1594270856327},{"_id":"public/2020/07/01/docker常用命令/2.jpg","hash":"2405689c294059e7c249e09370ed1bdadf68cf2b","modified":1594270856327},{"_id":"public/2020/07/01/docker常用命令/9.jpg","hash":"ce7bc0fdb0a713e960077866e11b48e94b14f5bb","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/1.png","hash":"a83e54672b6d3cfa36681eee398cd9a4b9d9aab2","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/10.png","hash":"b319b8c6ffb05907e2da66164e55a64c509ea0d2","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/11.png","hash":"73358e34e9933da7f742091439102ad0ce01bf4c","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/2.png","hash":"6472f9e41f07259ee600f1c5349435fbf537338a","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/3.png","hash":"b3d9e8dd7d2cef900cd4bf034a9c0fbd8baa495d","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/4.png","hash":"fe27476a8ddf5febc4c282b13559f13faa2ff922","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/6.png","hash":"a06244c01602de32c5f8c7cc670c221d5ea314b4","modified":1594270856327},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/7.png","hash":"a9b5a18e806abf9313f1f2f76a60a66f990a5d40","modified":1594270856327},{"_id":"public/2018/12/25/git简单指令/Git.png","hash":"67050de6ad5524717981db57468daf8217161d54","modified":1594270856337},{"_id":"public/2020/07/01/docker常用命令/3.jpg","hash":"338150788f69f77ee480141106cd0f0007d62f50","modified":1594270856337},{"_id":"public/2020/07/01/docker常用命令/4.jpg","hash":"f4df1e3747821daf62b86e8625e79189a9cfff3c","modified":1594270856338},{"_id":"public/2020/07/01/docker常用命令/1.jpg","hash":"d0ff639f1291c1f2ffdbecca05b18ca0e90c1eae","modified":1594270856338},{"_id":"public/2020/07/01/docker常用命令/7.jpg","hash":"0e54fea475ac2b567a35ca910540e49ed9a78f62","modified":1594270856338},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/12.png","hash":"934be2c3d417d6232d91168e35aac48dfb029ac9","modified":1594270856338},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/5.png","hash":"d44fdddeea3609c1cc8d43135654fa058d693e48","modified":1594270856338},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/8.png","hash":"31c51a3996c61e0deed4a57a361697c5c4a64dd2","modified":1594270856338},{"_id":"public/2019/01/12/爬取网易云热评并生成词云/9.png","hash":"d44fdddeea3609c1cc8d43135654fa058d693e48","modified":1594270856338},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1594270856341},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1594270856341},{"_id":"public/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1594270856341},{"_id":"public/2020/07/01/docker常用命令/6.jpg","hash":"338c911019229a88c6794d6f06d7c0fed2a64af9","modified":1594270856341},{"_id":"public/2020/07/01/docker常用命令/8.jpg","hash":"929fed19e0f7030fd47c8a43b94861d7a55f9ee1","modified":1594270856341},{"_id":"public/2018/11/23/小说更新后发送邮箱的问题解决/2.png","hash":"fe72a3106b7ce1ceada26e0aa0a88b5c02367a7e","modified":1594270856341},{"_id":"public/2018/11/23/小说更新后发送邮箱的问题解决/3.png","hash":"9f4d9798cae9e47ce264aca9183ab860acff3b49","modified":1594270856341},{"_id":"public/2018/11/23/小说更新后发送邮箱的问题解决/1.png","hash":"446a344d3434581babebe92f972a4eccd531aecb","modified":1594270856344},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1594270856346},{"_id":"public/2020/07/01/docker常用命令/5.jpg","hash":"819f9bce79d7556b849f74f29869600d8470b8e5","modified":1594270856643},{"_id":"public/style.css","hash":"262cd2ae9a74a89da098a1de752a0b0df5455ffc","modified":1594270856646},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1594270856647},{"_id":"public/2018/12/25/数据分析-pandas/1.jpg","hash":"91cc9fa9667a250498a25672750a7e22e93d2c1e","modified":1594270856653}],"Category":[],"Data":[],"Page":[{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---","date":"2020-06-30T12:29:17.407Z","updated":"2020-06-30T12:29:17.407Z","path":"tags/index.html","comments":1,"_id":"ckcebpcio0001kztz391nkclf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker常用命令","date":"2020-07-01T04:53:24.000Z","_content":"\n## docker command help\n```bash\ndocker command --help\n```\n![1](1.jpg)\n## use images\n### list images\n```bash\ndocker images\n```\n![2](2.jpg)\n### start container by image\n```bash \ndocker run -t -i ubuntu:16.04 /bin/bash\n```\n![3](3.jpg)\n### search images\n```bash \ndocker search mysql\n```\n![5](5.jpg)\n### get new images\n```bash\ndocker pull ubuntu:18.04\n```\n![4](4.jpg)\n### delete image\n```bash\ndocker rmi ubuntu:18.04\n```\n![6](6.jpg)\n### **[more operations][https://www.runoob.com/docker/docker-image-usage.html] **\n\n## use container\n### start container\n```bash\ndocker run -t -i ubuntu:16.04 /bin/bash ## -d background\n```\n### show containers\n```bash\ndocker ps -a \n```\n![7](7.jpg)\n\n### stop & start & restart container\n```bash\ndocker start container_id ## RUN IN THE BACKGROUND\ndocker stop container_id\ndocker restart container_id\n```\n### enter container\n```bash\ndocker attach container_id ## use exit will stop container\n```\n\n```bash\ndocker exec -it container_id /bin/bash  ## use exit will not stop container\n```\n\n### export container\n\n```bash\ndocker export container_id > container.tar\n```\n### import container_snap to image\n```bash\ncat docker/mysql.tar | docker import - mysql:v1\n```\n![8](9.jpg)\n\n### delete container \n```bash \ndocker rm -f container_id\n```\n\n### show container's port mapping\n```bash\ndocker port container_id\n```\n![9](9.jpg)\n\n### connect container by port mapping\n```bash\ndocker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD = 123456 mysql \n```\n## connect containers\n### create a docker network\n```bash\ndocker network create -d bridge hadoop-net\n```\n### show networks\n```bash\ndocker network ls\n```\n### run a container and connect to the network\n```bash\ndocker run -itd --name hadoop1 --network hadoop-net ubuntu /bin/bash\n```","source":"_posts/docker常用命令.md","raw":"---\ntitle: docker常用命令\ndate: 2020-07-01 12:53:24\ntags: docker\n---\n\n## docker command help\n```bash\ndocker command --help\n```\n![1](1.jpg)\n## use images\n### list images\n```bash\ndocker images\n```\n![2](2.jpg)\n### start container by image\n```bash \ndocker run -t -i ubuntu:16.04 /bin/bash\n```\n![3](3.jpg)\n### search images\n```bash \ndocker search mysql\n```\n![5](5.jpg)\n### get new images\n```bash\ndocker pull ubuntu:18.04\n```\n![4](4.jpg)\n### delete image\n```bash\ndocker rmi ubuntu:18.04\n```\n![6](6.jpg)\n### **[more operations][https://www.runoob.com/docker/docker-image-usage.html] **\n\n## use container\n### start container\n```bash\ndocker run -t -i ubuntu:16.04 /bin/bash ## -d background\n```\n### show containers\n```bash\ndocker ps -a \n```\n![7](7.jpg)\n\n### stop & start & restart container\n```bash\ndocker start container_id ## RUN IN THE BACKGROUND\ndocker stop container_id\ndocker restart container_id\n```\n### enter container\n```bash\ndocker attach container_id ## use exit will stop container\n```\n\n```bash\ndocker exec -it container_id /bin/bash  ## use exit will not stop container\n```\n\n### export container\n\n```bash\ndocker export container_id > container.tar\n```\n### import container_snap to image\n```bash\ncat docker/mysql.tar | docker import - mysql:v1\n```\n![8](9.jpg)\n\n### delete container \n```bash \ndocker rm -f container_id\n```\n\n### show container's port mapping\n```bash\ndocker port container_id\n```\n![9](9.jpg)\n\n### connect container by port mapping\n```bash\ndocker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD = 123456 mysql \n```\n## connect containers\n### create a docker network\n```bash\ndocker network create -d bridge hadoop-net\n```\n### show networks\n```bash\ndocker network ls\n```\n### run a container and connect to the network\n```bash\ndocker run -itd --name hadoop1 --network hadoop-net ubuntu /bin/bash\n```","slug":"docker常用命令","published":1,"updated":"2020-07-03T04:49:37.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcil0000kztzn0rpdwmd","content":"<h2 id=\"docker-command-help\"><a href=\"#docker-command-help\" class=\"headerlink\" title=\"docker command help\"></a>docker command help</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">command</span> --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/1.jpg\" alt=\"1\"></p>\n<h2 id=\"use-images\"><a href=\"#use-images\" class=\"headerlink\" title=\"use images\"></a>use images</h2><h3 id=\"list-images\"><a href=\"#list-images\" class=\"headerlink\" title=\"list images\"></a>list images</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/2.jpg\" alt=\"2\"></p>\n<h3 id=\"start-container-by-image\"><a href=\"#start-container-by-image\" class=\"headerlink\" title=\"start container by image\"></a>start container by image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:16.04 /bin/bash</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/3.jpg\" alt=\"3\"></p>\n<h3 id=\"search-images\"><a href=\"#search-images\" class=\"headerlink\" title=\"search images\"></a>search images</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/5.jpg\" alt=\"5\"></p>\n<h3 id=\"get-new-images\"><a href=\"#get-new-images\" class=\"headerlink\" title=\"get new images\"></a>get new images</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/4.jpg\" alt=\"4\"></p>\n<h3 id=\"delete-image\"><a href=\"#delete-image\" class=\"headerlink\" title=\"delete image\"></a>delete image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/6.jpg\" alt=\"6\"></p>\n<h3 id=\"more-operations-https-www-runoob-com-docker-docker-image-usage-html\"><a href=\"#more-operations-https-www-runoob-com-docker-docker-image-usage-html\" class=\"headerlink\" title=\"[more operations][https://www.runoob.com/docker/docker-image-usage.html] \"></a><strong>[more operations][<a href=\"https://www.runoob.com/docker/docker-image-usage.html]\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/docker/docker-image-usage.html]</a> </strong></h3><h2 id=\"use-container\"><a href=\"#use-container\" class=\"headerlink\" title=\"use container\"></a>use container</h2><h3 id=\"start-container\"><a href=\"#start-container\" class=\"headerlink\" title=\"start container\"></a>start container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:16.04 /bin/bash <span class=\"comment\">## -d background</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"show-containers\"><a href=\"#show-containers\" class=\"headerlink\" title=\"show containers\"></a>show containers</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/7.jpg\" alt=\"7\"></p>\n<h3 id=\"stop-amp-start-amp-restart-container\"><a href=\"#stop-amp-start-amp-restart-container\" class=\"headerlink\" title=\"stop &amp; start &amp; restart container\"></a>stop &amp; start &amp; restart container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start container_id <span class=\"comment\">## RUN IN THE BACKGROUND</span></span><br><span class=\"line\">docker stop container_id</span><br><span class=\"line\">docker restart container_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"enter-container\"><a href=\"#enter-container\" class=\"headerlink\" title=\"enter container\"></a>enter container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach container_id <span class=\"comment\">## use exit will stop container</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it container_id /bin/bash  <span class=\"comment\">## use exit will not stop container</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"export-container\"><a href=\"#export-container\" class=\"headerlink\" title=\"export container\"></a>export container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">export</span> container_id &gt; container.tar</span><br></pre></td></tr></table></figure>\n<h3 id=\"import-container-snap-to-image\"><a href=\"#import-container-snap-to-image\" class=\"headerlink\" title=\"import container_snap to image\"></a>import container_snap to image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat docker/mysql.tar | docker import - mysql:v1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/9.jpg\" alt=\"8\"></p>\n<h3 id=\"delete-container\"><a href=\"#delete-container\" class=\"headerlink\" title=\"delete container\"></a>delete container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f container_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"show-container’s-port-mapping\"><a href=\"#show-container’s-port-mapping\" class=\"headerlink\" title=\"show container’s port mapping\"></a>show container’s port mapping</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker port container_id</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/9.jpg\" alt=\"9\"></p>\n<h3 id=\"connect-container-by-port-mapping\"><a href=\"#connect-container-by-port-mapping\" class=\"headerlink\" title=\"connect container by port mapping\"></a>connect container by port mapping</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD = 123456 mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"connect-containers\"><a href=\"#connect-containers\" class=\"headerlink\" title=\"connect containers\"></a>connect containers</h2><h3 id=\"create-a-docker-network\"><a href=\"#create-a-docker-network\" class=\"headerlink\" title=\"create a docker network\"></a>create a docker network</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d bridge hadoop-net</span><br></pre></td></tr></table></figure>\n<h3 id=\"show-networks\"><a href=\"#show-networks\" class=\"headerlink\" title=\"show networks\"></a>show networks</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span><br></pre></td></tr></table></figure>\n<h3 id=\"run-a-container-and-connect-to-the-network\"><a href=\"#run-a-container-and-connect-to-the-network\" class=\"headerlink\" title=\"run a container and connect to the network\"></a>run a container and connect to the network</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name hadoop1 --network hadoop-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker-command-help\"><a href=\"#docker-command-help\" class=\"headerlink\" title=\"docker command help\"></a>docker command help</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">command</span> --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/1.jpg\" alt=\"1\"></p>\n<h2 id=\"use-images\"><a href=\"#use-images\" class=\"headerlink\" title=\"use images\"></a>use images</h2><h3 id=\"list-images\"><a href=\"#list-images\" class=\"headerlink\" title=\"list images\"></a>list images</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/2.jpg\" alt=\"2\"></p>\n<h3 id=\"start-container-by-image\"><a href=\"#start-container-by-image\" class=\"headerlink\" title=\"start container by image\"></a>start container by image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:16.04 /bin/bash</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/3.jpg\" alt=\"3\"></p>\n<h3 id=\"search-images\"><a href=\"#search-images\" class=\"headerlink\" title=\"search images\"></a>search images</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/5.jpg\" alt=\"5\"></p>\n<h3 id=\"get-new-images\"><a href=\"#get-new-images\" class=\"headerlink\" title=\"get new images\"></a>get new images</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/4.jpg\" alt=\"4\"></p>\n<h3 id=\"delete-image\"><a href=\"#delete-image\" class=\"headerlink\" title=\"delete image\"></a>delete image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/6.jpg\" alt=\"6\"></p>\n<h3 id=\"more-operations-https-www-runoob-com-docker-docker-image-usage-html\"><a href=\"#more-operations-https-www-runoob-com-docker-docker-image-usage-html\" class=\"headerlink\" title=\"[more operations][https://www.runoob.com/docker/docker-image-usage.html] \"></a><strong>[more operations][<a href=\"https://www.runoob.com/docker/docker-image-usage.html]\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/docker/docker-image-usage.html]</a> </strong></h3><h2 id=\"use-container\"><a href=\"#use-container\" class=\"headerlink\" title=\"use container\"></a>use container</h2><h3 id=\"start-container\"><a href=\"#start-container\" class=\"headerlink\" title=\"start container\"></a>start container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:16.04 /bin/bash <span class=\"comment\">## -d background</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"show-containers\"><a href=\"#show-containers\" class=\"headerlink\" title=\"show containers\"></a>show containers</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/7.jpg\" alt=\"7\"></p>\n<h3 id=\"stop-amp-start-amp-restart-container\"><a href=\"#stop-amp-start-amp-restart-container\" class=\"headerlink\" title=\"stop &amp; start &amp; restart container\"></a>stop &amp; start &amp; restart container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start container_id <span class=\"comment\">## RUN IN THE BACKGROUND</span></span><br><span class=\"line\">docker stop container_id</span><br><span class=\"line\">docker restart container_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"enter-container\"><a href=\"#enter-container\" class=\"headerlink\" title=\"enter container\"></a>enter container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach container_id <span class=\"comment\">## use exit will stop container</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it container_id /bin/bash  <span class=\"comment\">## use exit will not stop container</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"export-container\"><a href=\"#export-container\" class=\"headerlink\" title=\"export container\"></a>export container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">export</span> container_id &gt; container.tar</span><br></pre></td></tr></table></figure>\n<h3 id=\"import-container-snap-to-image\"><a href=\"#import-container-snap-to-image\" class=\"headerlink\" title=\"import container_snap to image\"></a>import container_snap to image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat docker/mysql.tar | docker import - mysql:v1</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/9.jpg\" alt=\"8\"></p>\n<h3 id=\"delete-container\"><a href=\"#delete-container\" class=\"headerlink\" title=\"delete container\"></a>delete container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f container_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"show-container’s-port-mapping\"><a href=\"#show-container’s-port-mapping\" class=\"headerlink\" title=\"show container’s port mapping\"></a>show container’s port mapping</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker port container_id</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/07/01/docker常用命令/9.jpg\" alt=\"9\"></p>\n<h3 id=\"connect-container-by-port-mapping\"><a href=\"#connect-container-by-port-mapping\" class=\"headerlink\" title=\"connect container by port mapping\"></a>connect container by port mapping</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD = 123456 mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"connect-containers\"><a href=\"#connect-containers\" class=\"headerlink\" title=\"connect containers\"></a>connect containers</h2><h3 id=\"create-a-docker-network\"><a href=\"#create-a-docker-network\" class=\"headerlink\" title=\"create a docker network\"></a>create a docker network</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d bridge hadoop-net</span><br></pre></td></tr></table></figure>\n<h3 id=\"show-networks\"><a href=\"#show-networks\" class=\"headerlink\" title=\"show networks\"></a>show networks</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network ls</span><br></pre></td></tr></table></figure>\n<h3 id=\"run-a-container-and-connect-to-the-network\"><a href=\"#run-a-container-and-connect-to-the-network\" class=\"headerlink\" title=\"run a container and connect to the network\"></a>run a container and connect to the network</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name hadoop1 --network hadoop-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>"},{"title":"c++指针问题","date":"2018-11-19T08:27:20.000Z","_content":"## 指针究竟是什么\n- 指针是一类特殊的变量，他保存的不是一般数据的值，而是程序中另一对象在内存中的地址\n我们先通过一个小程序看一看指针如何工作\n```bash\n#include <iostream>\nusing namespace std;\nint main(){\n\tint n = 123,m = 456;\n\tint *p = &n;\n\tcout<<\"&n:\"<<&n<<endl;\n\tcout<<\"&p:\"<<&p<<endl;\n\tcout<<\" p:\"<<p<<endl;\n\tcout<<\"*p:\"<<*p<<endl;\n\treturn 0;\n} \n```\n![1](1.png)\n从运行结果可以看出下面几点：\n- p本身是有一个地址的且地址为 __&p__\n- p的值是另一个变量n的地址 __&n__\n- *p所表示的意思是地址为 __p__ 的内存中所存的值 __n__\n- 即本段程序中共涉及到2个地址，一个是 __n__ 的地址，一个是 __p__ 的地址,我们用一张图来表示他们的关系\n![2](2.png)\n## 指针的初始化\n- 被具有相同类型的对象初始化\n```bash\nint i = 10;\nint *p = &i; \n```\n- 由另一个同一类型的指针初始化,这时两个指针指向同一地址空间\n```bash\nint *p1 = p;\n```\n- 通过直接分配内存地址得到初值\n```bash\nint *p2 = new int;\n```\n- 指针也可以没有类型，通用指针的定义,这样的指针可以指向任一对象\n```bash\nvoid *p3\n```\n## 指针的运算符\n定义指针的目的事通过指针变量间接的访问变量\n- __*__:取指针值运算符。通过指针所指内存单元的地址间接的访问对应的存储单元。若指针变量p指向变量a，则 *p的运算结果为变量a的值\n- __&__:取地址运算符。返回变量对应的存储单元地址，若a为int变量，p为int型指针变量，则 p = &a表示将a的存储单元地址赋给p。\n用一个程序验证一下：\n```bash\n#include <iostream>\nusing namespace std;\nint main(){\n int a = 100;\n int *p,*p1,*q;\n p = &a;\n p1 = p;\n q = NULL;\n cout<<\"a=\"<<a<<\",\"<<\"*p=\"<<*p<<\",\"<<\"p=\"<<p<<endl;\n *p1 = 200;\n cout<<\"a=\"<<a<<\",\"<<\"*p=\"<<*p<<\",\"<<\"p=\"<<p<<endl;\n cout<<\"*p1=\"<<*p1<<\",\"<<\"p1=\"<<p1<<endl;\n} \n```\n- 运行结果\n![3.png](3.png)\n## 指针与数组的关系\n- 数组名和指针在引用数组元素和取他们的地址方面可以相互转换，但两者有一个重要的不同点\n- 数组是在定义时就分配好内存空间的，因此数组名是一个地址常量，在程序中不能将数组名作为变量为其赋值，而指针是一个变量，可以多次赋值\n我们通过一个程序看一下他们的关系\n```bash\n#include <iostream>\nusing namespace std;\nint main(){\nint a[10]={1,2,3,4,5,6,7,8,9,10};\nint *pa = a;\nint i = 3;\ncout<<\"a[i]   :\"<<a[i]<<endl;\ncout<<\"*(pa+i):\"<<*(pa+i)<<endl;\ncout<<\"*(a+i) :\"<<*(a+i)<<endl;\ncout<<\"&a[i]  :\"<<&a[i]<<endl;\ncout<<\"a+i    :\"<<a+i<<endl;\ncout<<\"pa+i   :\"<<pa+i<<endl;\n \n} \n```\n- 运行结果\n![4](4.png)\n## 易重要的和易混淆的概念\n- 为什么要对指针初始化？\n定义了指针变量后，系统会为其分配一个内存空间，若没有赋值则此内存区域的内容是随机的，也就是指针随机指向一个内存单元。你想想如果你对一个随机的内存空间进行写操作，会怎样！\n- 指针的运算\n指针 + 整数 = 指针\n指针 - 指针 = 整数 //同类行的指针相减表示两个基类型变量的个数\n指针 + 指针 = ？？？？ //不可以\n- new、 new[]、 delete、 delete[]有什么区别\n```bash\nint *p = new int(3) // 为p分配了一个整形变量的存储区域并初始化为3\nint *p1 = new int[20] // 分配20个整形变量的区域给p1\ndelete p //释放有new申请的空间\ndelete[] p1 //释放由new[]申请的空间\n```\n- c++程序中动态分配的内存不会被自动释放\n- 指针函数和函数指针含义相同吗？\n完全不同！\n指针函数：若一个函数返回的是一个地址，则称该函数为指针函数。格式是 数据类型* 函数名（参数列表）\n函数指针：指针变量指向一个函数的入口地址，格式为 数据类型 （*函数指针变量）（参数列表）\n函数指针的用法：\n```bash\n#include <iostream>\nusing namespace std;\nint cul(int (*pf)(int,int), int x, int y){\n\treturn pf(x,y);\n}\nint add(int x,int y){\n\treturn x+y;\n}\nint sub(int x,int y){\n\treturn x-y;\n}\nint main(){\n\tint a=10,b=20;\n\tcout<<a<<\"+\"<<b<<\"=\"<<cul(add,a,b)<<endl;\n\tcout<<a<<\"-\"<<b<<\"=\"<<cul(sub,a,b);\n} \n```\n![5](5.png)\n- 常量指针、指针常量、指向常量的指针常量有什么区别\n常量指针：表示指针指向的是一个常量，格式：const 类型* 指针变量 或 类型 const * 指针变量\n```bash\nint i;\nconst int *p = &i;\n*p = 10; //错误\ni = 10; //正确\n```\n指针常量：表示所定义的指针是一个常量，只能在定义的时候初始化\n```bash\nint i,j;\nint * const p = &i;\np = &j;//错误\n```\n指向常量的指针常量：格式为 const 类型 * const 指针常量\n```bash\nint i,j;\nconst int * const p = &i;\n*p = 10;//错误\np = &j;//错误\ni = 10;//正确\n```\n","source":"_posts/c-指针问题.md","raw":"---\ntitle: c++指针问题\ndate: 2018-11-19 16:27:20\ntags: c++\n---\n## 指针究竟是什么\n- 指针是一类特殊的变量，他保存的不是一般数据的值，而是程序中另一对象在内存中的地址\n我们先通过一个小程序看一看指针如何工作\n```bash\n#include <iostream>\nusing namespace std;\nint main(){\n\tint n = 123,m = 456;\n\tint *p = &n;\n\tcout<<\"&n:\"<<&n<<endl;\n\tcout<<\"&p:\"<<&p<<endl;\n\tcout<<\" p:\"<<p<<endl;\n\tcout<<\"*p:\"<<*p<<endl;\n\treturn 0;\n} \n```\n![1](1.png)\n从运行结果可以看出下面几点：\n- p本身是有一个地址的且地址为 __&p__\n- p的值是另一个变量n的地址 __&n__\n- *p所表示的意思是地址为 __p__ 的内存中所存的值 __n__\n- 即本段程序中共涉及到2个地址，一个是 __n__ 的地址，一个是 __p__ 的地址,我们用一张图来表示他们的关系\n![2](2.png)\n## 指针的初始化\n- 被具有相同类型的对象初始化\n```bash\nint i = 10;\nint *p = &i; \n```\n- 由另一个同一类型的指针初始化,这时两个指针指向同一地址空间\n```bash\nint *p1 = p;\n```\n- 通过直接分配内存地址得到初值\n```bash\nint *p2 = new int;\n```\n- 指针也可以没有类型，通用指针的定义,这样的指针可以指向任一对象\n```bash\nvoid *p3\n```\n## 指针的运算符\n定义指针的目的事通过指针变量间接的访问变量\n- __*__:取指针值运算符。通过指针所指内存单元的地址间接的访问对应的存储单元。若指针变量p指向变量a，则 *p的运算结果为变量a的值\n- __&__:取地址运算符。返回变量对应的存储单元地址，若a为int变量，p为int型指针变量，则 p = &a表示将a的存储单元地址赋给p。\n用一个程序验证一下：\n```bash\n#include <iostream>\nusing namespace std;\nint main(){\n int a = 100;\n int *p,*p1,*q;\n p = &a;\n p1 = p;\n q = NULL;\n cout<<\"a=\"<<a<<\",\"<<\"*p=\"<<*p<<\",\"<<\"p=\"<<p<<endl;\n *p1 = 200;\n cout<<\"a=\"<<a<<\",\"<<\"*p=\"<<*p<<\",\"<<\"p=\"<<p<<endl;\n cout<<\"*p1=\"<<*p1<<\",\"<<\"p1=\"<<p1<<endl;\n} \n```\n- 运行结果\n![3.png](3.png)\n## 指针与数组的关系\n- 数组名和指针在引用数组元素和取他们的地址方面可以相互转换，但两者有一个重要的不同点\n- 数组是在定义时就分配好内存空间的，因此数组名是一个地址常量，在程序中不能将数组名作为变量为其赋值，而指针是一个变量，可以多次赋值\n我们通过一个程序看一下他们的关系\n```bash\n#include <iostream>\nusing namespace std;\nint main(){\nint a[10]={1,2,3,4,5,6,7,8,9,10};\nint *pa = a;\nint i = 3;\ncout<<\"a[i]   :\"<<a[i]<<endl;\ncout<<\"*(pa+i):\"<<*(pa+i)<<endl;\ncout<<\"*(a+i) :\"<<*(a+i)<<endl;\ncout<<\"&a[i]  :\"<<&a[i]<<endl;\ncout<<\"a+i    :\"<<a+i<<endl;\ncout<<\"pa+i   :\"<<pa+i<<endl;\n \n} \n```\n- 运行结果\n![4](4.png)\n## 易重要的和易混淆的概念\n- 为什么要对指针初始化？\n定义了指针变量后，系统会为其分配一个内存空间，若没有赋值则此内存区域的内容是随机的，也就是指针随机指向一个内存单元。你想想如果你对一个随机的内存空间进行写操作，会怎样！\n- 指针的运算\n指针 + 整数 = 指针\n指针 - 指针 = 整数 //同类行的指针相减表示两个基类型变量的个数\n指针 + 指针 = ？？？？ //不可以\n- new、 new[]、 delete、 delete[]有什么区别\n```bash\nint *p = new int(3) // 为p分配了一个整形变量的存储区域并初始化为3\nint *p1 = new int[20] // 分配20个整形变量的区域给p1\ndelete p //释放有new申请的空间\ndelete[] p1 //释放由new[]申请的空间\n```\n- c++程序中动态分配的内存不会被自动释放\n- 指针函数和函数指针含义相同吗？\n完全不同！\n指针函数：若一个函数返回的是一个地址，则称该函数为指针函数。格式是 数据类型* 函数名（参数列表）\n函数指针：指针变量指向一个函数的入口地址，格式为 数据类型 （*函数指针变量）（参数列表）\n函数指针的用法：\n```bash\n#include <iostream>\nusing namespace std;\nint cul(int (*pf)(int,int), int x, int y){\n\treturn pf(x,y);\n}\nint add(int x,int y){\n\treturn x+y;\n}\nint sub(int x,int y){\n\treturn x-y;\n}\nint main(){\n\tint a=10,b=20;\n\tcout<<a<<\"+\"<<b<<\"=\"<<cul(add,a,b)<<endl;\n\tcout<<a<<\"-\"<<b<<\"=\"<<cul(sub,a,b);\n} \n```\n![5](5.png)\n- 常量指针、指针常量、指向常量的指针常量有什么区别\n常量指针：表示指针指向的是一个常量，格式：const 类型* 指针变量 或 类型 const * 指针变量\n```bash\nint i;\nconst int *p = &i;\n*p = 10; //错误\ni = 10; //正确\n```\n指针常量：表示所定义的指针是一个常量，只能在定义的时候初始化\n```bash\nint i,j;\nint * const p = &i;\np = &j;//错误\n```\n指向常量的指针常量：格式为 const 类型 * const 指针常量\n```bash\nint i,j;\nconst int * const p = &i;\n*p = 10;//错误\np = &j;//错误\ni = 10;//正确\n```\n","slug":"c-指针问题","published":1,"updated":"2020-06-30T12:29:17.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcip0002kztz832e2fg2","content":"<h2 id=\"指针究竟是什么\"><a href=\"#指针究竟是什么\" class=\"headerlink\" title=\"指针究竟是什么\"></a>指针究竟是什么</h2><ul>\n<li>指针是一类特殊的变量，他保存的不是一般数据的值，而是程序中另一对象在内存中的地址<br>我们先通过一个小程序看一看指针如何工作<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">\tint n = 123,m = 456;</span><br><span class=\"line\">\tint *p = &amp;n;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\"&amp;n:\"</span>&lt;&lt;&amp;n&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\"&amp;p:\"</span>&lt;&lt;&amp;p&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\" p:\"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\"*p:\"</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2018/11/19/c-指针问题/1.png\" alt=\"1\"><br>从运行结果可以看出下面几点：</p>\n<ul>\n<li>p本身是有一个地址的且地址为 <strong>&amp;p</strong></li>\n<li>p的值是另一个变量n的地址 <strong>&amp;n</strong></li>\n<li>*p所表示的意思是地址为 <strong>p</strong> 的内存中所存的值 <strong>n</strong></li>\n<li>即本段程序中共涉及到2个地址，一个是 <strong>n</strong> 的地址，一个是 <strong>p</strong> 的地址,我们用一张图来表示他们的关系<br><img src=\"/2018/11/19/c-指针问题/2.png\" alt=\"2\"><h2 id=\"指针的初始化\"><a href=\"#指针的初始化\" class=\"headerlink\" title=\"指针的初始化\"></a>指针的初始化</h2></li>\n<li><p>被具有相同类型的对象初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 10;</span><br><span class=\"line\">int *p = &amp;i;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由另一个同一类型的指针初始化,这时两个指针指向同一地址空间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p1 = p;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过直接分配内存地址得到初值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p2 = new int;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指针也可以没有类型，通用指针的定义,这样的指针可以指向任一对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void *p3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"指针的运算符\"><a href=\"#指针的运算符\" class=\"headerlink\" title=\"指针的运算符\"></a>指针的运算符</h2><p>定义指针的目的事通过指针变量间接的访问变量</p>\n<ul>\n<li><strong>*</strong>:取指针值运算符。通过指针所指内存单元的地址间接的访问对应的存储单元。若指针变量p指向变量a，则 *p的运算结果为变量a的值</li>\n<li><p><strong>&amp;</strong>:取地址运算符。返回变量对应的存储单元地址，若a为int变量，p为int型指针变量，则 p = &amp;a表示将a的存储单元地址赋给p。<br>用一个程序验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\"> int a = 100;</span><br><span class=\"line\"> int *p,*p1,*q;</span><br><span class=\"line\"> p = &amp;a;</span><br><span class=\"line\"> p1 = p;</span><br><span class=\"line\"> q = NULL;</span><br><span class=\"line\"> cout&lt;&lt;<span class=\"string\">\"a=\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"*p=\"</span>&lt;&lt;*p&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"p=\"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\"> *p1 = 200;</span><br><span class=\"line\"> cout&lt;&lt;<span class=\"string\">\"a=\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"*p=\"</span>&lt;&lt;*p&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"p=\"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\"> cout&lt;&lt;<span class=\"string\">\"*p1=\"</span>&lt;&lt;*p1&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"p1=\"</span>&lt;&lt;p1&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果<br><img src=\"/2018/11/19/c-指针问题/3.png\" alt=\"3.png\"></p>\n<h2 id=\"指针与数组的关系\"><a href=\"#指针与数组的关系\" class=\"headerlink\" title=\"指针与数组的关系\"></a>指针与数组的关系</h2></li>\n<li>数组名和指针在引用数组元素和取他们的地址方面可以相互转换，但两者有一个重要的不同点</li>\n<li><p>数组是在定义时就分配好内存空间的，因此数组名是一个地址常量，在程序中不能将数组名作为变量为其赋值，而指针是一个变量，可以多次赋值<br>我们通过一个程序看一下他们的关系</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">int a[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class=\"line\">int *pa = a;</span><br><span class=\"line\">int i = 3;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"a[i]   :\"</span>&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"*(pa+i):\"</span>&lt;&lt;*(pa+i)&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"*(a+i) :\"</span>&lt;&lt;*(a+i)&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"&amp;a[i]  :\"</span>&lt;&lt;&amp;a[i]&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"a+i    :\"</span>&lt;&lt;a+i&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"pa+i   :\"</span>&lt;&lt;pa+i&lt;&lt;endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果<br><img src=\"/2018/11/19/c-指针问题/4.png\" alt=\"4\"></p>\n<h2 id=\"易重要的和易混淆的概念\"><a href=\"#易重要的和易混淆的概念\" class=\"headerlink\" title=\"易重要的和易混淆的概念\"></a>易重要的和易混淆的概念</h2></li>\n<li>为什么要对指针初始化？<br>定义了指针变量后，系统会为其分配一个内存空间，若没有赋值则此内存区域的内容是随机的，也就是指针随机指向一个内存单元。你想想如果你对一个随机的内存空间进行写操作，会怎样！</li>\n<li>指针的运算<br>指针 + 整数 = 指针<br>指针 - 指针 = 整数 //同类行的指针相减表示两个基类型变量的个数<br>指针 + 指针 = ？？？？ //不可以</li>\n<li><p>new、 new[]、 delete、 delete[]有什么区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p = new int(3) // 为p分配了一个整形变量的存储区域并初始化为3</span><br><span class=\"line\">int *p1 = new int[20] // 分配20个整形变量的区域给p1</span><br><span class=\"line\">delete p //释放有new申请的空间</span><br><span class=\"line\">delete[] p1 //释放由new[]申请的空间</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>c++程序中动态分配的内存不会被自动释放</p>\n</li>\n<li>指针函数和函数指针含义相同吗？<br>完全不同！<br>指针函数：若一个函数返回的是一个地址，则称该函数为指针函数。格式是 数据类型<em> 函数名（参数列表）<br>函数指针：指针变量指向一个函数的入口地址，格式为 数据类型 （</em>函数指针变量）（参数列表）<br>函数指针的用法：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int cul(int (*pf)(int,int), int x, int y)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> pf(x,y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int add(int x,int y)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int sub(int x,int y)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> x-y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">\tint a=10,b=20;</span><br><span class=\"line\">\tcout&lt;&lt;a&lt;&lt;<span class=\"string\">\"+\"</span>&lt;&lt;b&lt;&lt;<span class=\"string\">\"=\"</span>&lt;&lt;cul(add,a,b)&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;a&lt;&lt;<span class=\"string\">\"-\"</span>&lt;&lt;b&lt;&lt;<span class=\"string\">\"=\"</span>&lt;&lt;cul(sub,a,b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2018/11/19/c-指针问题/5.png\" alt=\"5\"></p>\n<ul>\n<li>常量指针、指针常量、指向常量的指针常量有什么区别<br>常量指针：表示指针指向的是一个常量，格式：const 类型<em> 指针变量 或 类型 const </em> 指针变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">const int *p = &amp;i;</span><br><span class=\"line\">*p = 10; //错误</span><br><span class=\"line\">i = 10; //正确</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>指针常量：表示所定义的指针是一个常量，只能在定义的时候初始化<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i,j;</span><br><span class=\"line\">int * const p = &amp;i;</span><br><span class=\"line\">p = &amp;j;//错误</span><br></pre></td></tr></table></figure></p>\n<p>指向常量的指针常量：格式为 const 类型 * const 指针常量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i,j;</span><br><span class=\"line\">const int * const p = &amp;i;</span><br><span class=\"line\">*p = 10;//错误</span><br><span class=\"line\">p = &amp;j;//错误</span><br><span class=\"line\">i = 10;//正确</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"指针究竟是什么\"><a href=\"#指针究竟是什么\" class=\"headerlink\" title=\"指针究竟是什么\"></a>指针究竟是什么</h2><ul>\n<li>指针是一类特殊的变量，他保存的不是一般数据的值，而是程序中另一对象在内存中的地址<br>我们先通过一个小程序看一看指针如何工作<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">\tint n = 123,m = 456;</span><br><span class=\"line\">\tint *p = &amp;n;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\"&amp;n:\"</span>&lt;&lt;&amp;n&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\"&amp;p:\"</span>&lt;&lt;&amp;p&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\" p:\"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">\"*p:\"</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2018/11/19/c-指针问题/1.png\" alt=\"1\"><br>从运行结果可以看出下面几点：</p>\n<ul>\n<li>p本身是有一个地址的且地址为 <strong>&amp;p</strong></li>\n<li>p的值是另一个变量n的地址 <strong>&amp;n</strong></li>\n<li>*p所表示的意思是地址为 <strong>p</strong> 的内存中所存的值 <strong>n</strong></li>\n<li>即本段程序中共涉及到2个地址，一个是 <strong>n</strong> 的地址，一个是 <strong>p</strong> 的地址,我们用一张图来表示他们的关系<br><img src=\"/2018/11/19/c-指针问题/2.png\" alt=\"2\"><h2 id=\"指针的初始化\"><a href=\"#指针的初始化\" class=\"headerlink\" title=\"指针的初始化\"></a>指针的初始化</h2></li>\n<li><p>被具有相同类型的对象初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 10;</span><br><span class=\"line\">int *p = &amp;i;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由另一个同一类型的指针初始化,这时两个指针指向同一地址空间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p1 = p;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过直接分配内存地址得到初值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p2 = new int;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指针也可以没有类型，通用指针的定义,这样的指针可以指向任一对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void *p3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"指针的运算符\"><a href=\"#指针的运算符\" class=\"headerlink\" title=\"指针的运算符\"></a>指针的运算符</h2><p>定义指针的目的事通过指针变量间接的访问变量</p>\n<ul>\n<li><strong>*</strong>:取指针值运算符。通过指针所指内存单元的地址间接的访问对应的存储单元。若指针变量p指向变量a，则 *p的运算结果为变量a的值</li>\n<li><p><strong>&amp;</strong>:取地址运算符。返回变量对应的存储单元地址，若a为int变量，p为int型指针变量，则 p = &amp;a表示将a的存储单元地址赋给p。<br>用一个程序验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\"> int a = 100;</span><br><span class=\"line\"> int *p,*p1,*q;</span><br><span class=\"line\"> p = &amp;a;</span><br><span class=\"line\"> p1 = p;</span><br><span class=\"line\"> q = NULL;</span><br><span class=\"line\"> cout&lt;&lt;<span class=\"string\">\"a=\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"*p=\"</span>&lt;&lt;*p&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"p=\"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\"> *p1 = 200;</span><br><span class=\"line\"> cout&lt;&lt;<span class=\"string\">\"a=\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"*p=\"</span>&lt;&lt;*p&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"p=\"</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\"> cout&lt;&lt;<span class=\"string\">\"*p1=\"</span>&lt;&lt;*p1&lt;&lt;<span class=\"string\">\",\"</span>&lt;&lt;<span class=\"string\">\"p1=\"</span>&lt;&lt;p1&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果<br><img src=\"/2018/11/19/c-指针问题/3.png\" alt=\"3.png\"></p>\n<h2 id=\"指针与数组的关系\"><a href=\"#指针与数组的关系\" class=\"headerlink\" title=\"指针与数组的关系\"></a>指针与数组的关系</h2></li>\n<li>数组名和指针在引用数组元素和取他们的地址方面可以相互转换，但两者有一个重要的不同点</li>\n<li><p>数组是在定义时就分配好内存空间的，因此数组名是一个地址常量，在程序中不能将数组名作为变量为其赋值，而指针是一个变量，可以多次赋值<br>我们通过一个程序看一下他们的关系</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">int a[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class=\"line\">int *pa = a;</span><br><span class=\"line\">int i = 3;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"a[i]   :\"</span>&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"*(pa+i):\"</span>&lt;&lt;*(pa+i)&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"*(a+i) :\"</span>&lt;&lt;*(a+i)&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"&amp;a[i]  :\"</span>&lt;&lt;&amp;a[i]&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"a+i    :\"</span>&lt;&lt;a+i&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">\"pa+i   :\"</span>&lt;&lt;pa+i&lt;&lt;endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果<br><img src=\"/2018/11/19/c-指针问题/4.png\" alt=\"4\"></p>\n<h2 id=\"易重要的和易混淆的概念\"><a href=\"#易重要的和易混淆的概念\" class=\"headerlink\" title=\"易重要的和易混淆的概念\"></a>易重要的和易混淆的概念</h2></li>\n<li>为什么要对指针初始化？<br>定义了指针变量后，系统会为其分配一个内存空间，若没有赋值则此内存区域的内容是随机的，也就是指针随机指向一个内存单元。你想想如果你对一个随机的内存空间进行写操作，会怎样！</li>\n<li>指针的运算<br>指针 + 整数 = 指针<br>指针 - 指针 = 整数 //同类行的指针相减表示两个基类型变量的个数<br>指针 + 指针 = ？？？？ //不可以</li>\n<li><p>new、 new[]、 delete、 delete[]有什么区别</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *p = new int(3) // 为p分配了一个整形变量的存储区域并初始化为3</span><br><span class=\"line\">int *p1 = new int[20] // 分配20个整形变量的区域给p1</span><br><span class=\"line\">delete p //释放有new申请的空间</span><br><span class=\"line\">delete[] p1 //释放由new[]申请的空间</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>c++程序中动态分配的内存不会被自动释放</p>\n</li>\n<li>指针函数和函数指针含义相同吗？<br>完全不同！<br>指针函数：若一个函数返回的是一个地址，则称该函数为指针函数。格式是 数据类型<em> 函数名（参数列表）<br>函数指针：指针变量指向一个函数的入口地址，格式为 数据类型 （</em>函数指针变量）（参数列表）<br>函数指针的用法：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;</span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int cul(int (*pf)(int,int), int x, int y)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> pf(x,y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int add(int x,int y)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int sub(int x,int y)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> x-y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">\tint a=10,b=20;</span><br><span class=\"line\">\tcout&lt;&lt;a&lt;&lt;<span class=\"string\">\"+\"</span>&lt;&lt;b&lt;&lt;<span class=\"string\">\"=\"</span>&lt;&lt;cul(add,a,b)&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;a&lt;&lt;<span class=\"string\">\"-\"</span>&lt;&lt;b&lt;&lt;<span class=\"string\">\"=\"</span>&lt;&lt;cul(sub,a,b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2018/11/19/c-指针问题/5.png\" alt=\"5\"></p>\n<ul>\n<li>常量指针、指针常量、指向常量的指针常量有什么区别<br>常量指针：表示指针指向的是一个常量，格式：const 类型<em> 指针变量 或 类型 const </em> 指针变量<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">const int *p = &amp;i;</span><br><span class=\"line\">*p = 10; //错误</span><br><span class=\"line\">i = 10; //正确</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>指针常量：表示所定义的指针是一个常量，只能在定义的时候初始化<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i,j;</span><br><span class=\"line\">int * const p = &amp;i;</span><br><span class=\"line\">p = &amp;j;//错误</span><br></pre></td></tr></table></figure></p>\n<p>指向常量的指针常量：格式为 const 类型 * const 指针常量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i,j;</span><br><span class=\"line\">const int * const p = &amp;i;</span><br><span class=\"line\">*p = 10;//错误</span><br><span class=\"line\">p = &amp;j;//错误</span><br><span class=\"line\">i = 10;//正确</span><br></pre></td></tr></table></figure></p>\n"},{"title":"git简单指令","date":"2018-12-25T01:02:58.000Z","_content":"# git简单指令\n## 首先放一张学习路线\n![git学习路线](Git.png)\n## 1、创建版本库\n```bash\nmkdir huzai //创建一个空目录\ncd huzai  //进入此目录\ngit init  //初始化git仓库\n```\n## 2、添加文件到版本库\n```bash\ngit add file  //将文件添加到缓存区\ngit commit -m \"post message\" //提交并附带提交信息\n```\n## 3、版本回退\n```bash\ngit reset --hard HEAD^ //HEAD是一个指针，指向当前的版本,^代表上一代版本，HEAD^^代表上两代\ngit reflog //查询每次提交的commit_id\ngit reset --hard commit_id //根据id进行回退\n```\n## 4、管理修改\n```bash\ngit diff HEAD -- file //查看工作区（file）与最新版本（HEAD）的区别\n```\n## 5、撤销修改\n```bash\ngit checkout -- file //直接丢弃工作区的修改（可用于恢复误删的文件）\n//对于已经添加到缓存的修改\ngit reset HEAD file //撤销缓存区的修改\ngit checkout -- file \n```\n## 6、删除文件\n```bash\nrm file //删除本地文件\ngit rm file //删除版本库中的文件\ngit commit -m \"post delete\" //提交删除事务\n```\n## 7、连接远程仓库\n```bash\n//先生成连接密钥\nssh-kengen -t rsa -C username\n//将id_rsa.pub中的内容复制到github的密钥管理中\n//再根据github的提示将本地仓库与远程仓库进行关联\ngit remote add origin git@github.com:username/repository\n//再推送master分支的所有内容到远程仓库\ngit push -u origin master\n```\n## 8、从远程仓库进行下载\n```bash\ngit clone git@github.com:username/repository\n```\n## 9、创建新的分支并切换到该分支下\n```bash\ngit checkout -b branchname //创建并切换\ngit branch branch_name //创建\ngit checkout branch_name //切换\n```\n## 10、合并指定分支到当前分支\n```bash\ngit merge branch_name\n```\n## 11、删除分支\n```bash\ngit branch -d branch_name\n```\n## 12、如果合并时出现冲突\n```bash \ncat conflic_filename\n//git 会用<<<<< ===== >>>>>>显示不同分支的内容，你则需要手动解决冲突\n```\n## 13、分支管理策略\nmaster分支应该是非常稳定的，也就是用于发布最新版本的，平时不应该在上面干活，干活都应该在dev分支上\n也就是说dev分支是不稳定的，到了某个时候将dev分支合并到master分支上，你和你的小伙伴应该在各自的分支上干活，然后推送到dev分支上\n## 14、bug分支\n```bash\ngit add now_file\ngit stash //保护现场\n//这里修改bug\ngit stash pop //提取现场，继续工作\n```\n## 15、丢弃一个没有被合并的分支\n```bash\ngit branch -D branch_name \n```\n## 16、多人协作\n 1、尝试git push origin branch_name\n 2、如果推送失败，说明远程分支比你的版本新，则你git pull 拉取远程文件\n 3、合并你两的分支，如果有冲突则手动解决问题\n 4、重复1\n - 注：如果git pull 提示 no tracking information 则说明远程分支和本地分支没有关联用下面的命令进行关联\n```bash\ngit branch --set-uostream-to branch_name origin/branch_name\n```\n或者你不知道有什么分支\n```bash\ngit remote -v //查看远程仓库的信息\ngit checkout -b branch_name origin/branch_name //创建本地分支以及远程分支\ngit branch --set-upstream-to branch_name origin/branch_name //进行关联\n```\n","source":"_posts/git简单指令.md","raw":"---\ntitle: git简单指令\ndate: 2018-12-25 09:02:58\ntags: git\n---\n# git简单指令\n## 首先放一张学习路线\n![git学习路线](Git.png)\n## 1、创建版本库\n```bash\nmkdir huzai //创建一个空目录\ncd huzai  //进入此目录\ngit init  //初始化git仓库\n```\n## 2、添加文件到版本库\n```bash\ngit add file  //将文件添加到缓存区\ngit commit -m \"post message\" //提交并附带提交信息\n```\n## 3、版本回退\n```bash\ngit reset --hard HEAD^ //HEAD是一个指针，指向当前的版本,^代表上一代版本，HEAD^^代表上两代\ngit reflog //查询每次提交的commit_id\ngit reset --hard commit_id //根据id进行回退\n```\n## 4、管理修改\n```bash\ngit diff HEAD -- file //查看工作区（file）与最新版本（HEAD）的区别\n```\n## 5、撤销修改\n```bash\ngit checkout -- file //直接丢弃工作区的修改（可用于恢复误删的文件）\n//对于已经添加到缓存的修改\ngit reset HEAD file //撤销缓存区的修改\ngit checkout -- file \n```\n## 6、删除文件\n```bash\nrm file //删除本地文件\ngit rm file //删除版本库中的文件\ngit commit -m \"post delete\" //提交删除事务\n```\n## 7、连接远程仓库\n```bash\n//先生成连接密钥\nssh-kengen -t rsa -C username\n//将id_rsa.pub中的内容复制到github的密钥管理中\n//再根据github的提示将本地仓库与远程仓库进行关联\ngit remote add origin git@github.com:username/repository\n//再推送master分支的所有内容到远程仓库\ngit push -u origin master\n```\n## 8、从远程仓库进行下载\n```bash\ngit clone git@github.com:username/repository\n```\n## 9、创建新的分支并切换到该分支下\n```bash\ngit checkout -b branchname //创建并切换\ngit branch branch_name //创建\ngit checkout branch_name //切换\n```\n## 10、合并指定分支到当前分支\n```bash\ngit merge branch_name\n```\n## 11、删除分支\n```bash\ngit branch -d branch_name\n```\n## 12、如果合并时出现冲突\n```bash \ncat conflic_filename\n//git 会用<<<<< ===== >>>>>>显示不同分支的内容，你则需要手动解决冲突\n```\n## 13、分支管理策略\nmaster分支应该是非常稳定的，也就是用于发布最新版本的，平时不应该在上面干活，干活都应该在dev分支上\n也就是说dev分支是不稳定的，到了某个时候将dev分支合并到master分支上，你和你的小伙伴应该在各自的分支上干活，然后推送到dev分支上\n## 14、bug分支\n```bash\ngit add now_file\ngit stash //保护现场\n//这里修改bug\ngit stash pop //提取现场，继续工作\n```\n## 15、丢弃一个没有被合并的分支\n```bash\ngit branch -D branch_name \n```\n## 16、多人协作\n 1、尝试git push origin branch_name\n 2、如果推送失败，说明远程分支比你的版本新，则你git pull 拉取远程文件\n 3、合并你两的分支，如果有冲突则手动解决问题\n 4、重复1\n - 注：如果git pull 提示 no tracking information 则说明远程分支和本地分支没有关联用下面的命令进行关联\n```bash\ngit branch --set-uostream-to branch_name origin/branch_name\n```\n或者你不知道有什么分支\n```bash\ngit remote -v //查看远程仓库的信息\ngit checkout -b branch_name origin/branch_name //创建本地分支以及远程分支\ngit branch --set-upstream-to branch_name origin/branch_name //进行关联\n```\n","slug":"git简单指令","published":1,"updated":"2020-06-30T12:29:17.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcis0004kztzrjhhfp9o","content":"<h1 id=\"git简单指令\"><a href=\"#git简单指令\" class=\"headerlink\" title=\"git简单指令\"></a>git简单指令</h1><h2 id=\"首先放一张学习路线\"><a href=\"#首先放一张学习路线\" class=\"headerlink\" title=\"首先放一张学习路线\"></a>首先放一张学习路线</h2><p><img src=\"/2018/12/25/git简单指令/Git.png\" alt=\"git学习路线\"></p>\n<h2 id=\"1、创建版本库\"><a href=\"#1、创建版本库\" class=\"headerlink\" title=\"1、创建版本库\"></a>1、创建版本库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir huzai //创建一个空目录</span><br><span class=\"line\"><span class=\"built_in\">cd</span> huzai  //进入此目录</span><br><span class=\"line\">git init  //初始化git仓库</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、添加文件到版本库\"><a href=\"#2、添加文件到版本库\" class=\"headerlink\" title=\"2、添加文件到版本库\"></a>2、添加文件到版本库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file  //将文件添加到缓存区</span><br><span class=\"line\">git commit -m <span class=\"string\">\"post message\"</span> //提交并附带提交信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、版本回退\"><a href=\"#3、版本回退\" class=\"headerlink\" title=\"3、版本回退\"></a>3、版本回退</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^ //HEAD是一个指针，指向当前的版本,^代表上一代版本，HEAD^^代表上两代</span><br><span class=\"line\">git reflog //查询每次提交的commit_id</span><br><span class=\"line\">git reset --hard commit_id //根据id进行回退</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、管理修改\"><a href=\"#4、管理修改\" class=\"headerlink\" title=\"4、管理修改\"></a>4、管理修改</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD -- file //查看工作区（file）与最新版本（HEAD）的区别</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、撤销修改\"><a href=\"#5、撤销修改\" class=\"headerlink\" title=\"5、撤销修改\"></a>5、撤销修改</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- file //直接丢弃工作区的修改（可用于恢复误删的文件）</span><br><span class=\"line\">//对于已经添加到缓存的修改</span><br><span class=\"line\">git reset HEAD file //撤销缓存区的修改</span><br><span class=\"line\">git checkout -- file</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、删除文件\"><a href=\"#6、删除文件\" class=\"headerlink\" title=\"6、删除文件\"></a>6、删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm file //删除本地文件</span><br><span class=\"line\">git rm file //删除版本库中的文件</span><br><span class=\"line\">git commit -m <span class=\"string\">\"post delete\"</span> //提交删除事务</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、连接远程仓库\"><a href=\"#7、连接远程仓库\" class=\"headerlink\" title=\"7、连接远程仓库\"></a>7、连接远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先生成连接密钥</span><br><span class=\"line\">ssh-kengen -t rsa -C username</span><br><span class=\"line\">//将id_rsa.pub中的内容复制到github的密钥管理中</span><br><span class=\"line\">//再根据github的提示将本地仓库与远程仓库进行关联</span><br><span class=\"line\">git remote add origin git@github.com:username/repository</span><br><span class=\"line\">//再推送master分支的所有内容到远程仓库</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、从远程仓库进行下载\"><a href=\"#8、从远程仓库进行下载\" class=\"headerlink\" title=\"8、从远程仓库进行下载\"></a>8、从远程仓库进行下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:username/repository</span><br></pre></td></tr></table></figure>\n<h2 id=\"9、创建新的分支并切换到该分支下\"><a href=\"#9、创建新的分支并切换到该分支下\" class=\"headerlink\" title=\"9、创建新的分支并切换到该分支下\"></a>9、创建新的分支并切换到该分支下</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branchname //创建并切换</span><br><span class=\"line\">git branch branch_name //创建</span><br><span class=\"line\">git checkout branch_name //切换</span><br></pre></td></tr></table></figure>\n<h2 id=\"10、合并指定分支到当前分支\"><a href=\"#10、合并指定分支到当前分支\" class=\"headerlink\" title=\"10、合并指定分支到当前分支\"></a>10、合并指定分支到当前分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge branch_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"11、删除分支\"><a href=\"#11、删除分支\" class=\"headerlink\" title=\"11、删除分支\"></a>11、删除分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"12、如果合并时出现冲突\"><a href=\"#12、如果合并时出现冲突\" class=\"headerlink\" title=\"12、如果合并时出现冲突\"></a>12、如果合并时出现冲突</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat conflic_filename</span><br><span class=\"line\">//git 会用&lt;&lt;&lt;&lt;&lt; ===== &gt;&gt;&gt;&gt;&gt;&gt;显示不同分支的内容，你则需要手动解决冲突</span><br></pre></td></tr></table></figure>\n<h2 id=\"13、分支管理策略\"><a href=\"#13、分支管理策略\" class=\"headerlink\" title=\"13、分支管理策略\"></a>13、分支管理策略</h2><p>master分支应该是非常稳定的，也就是用于发布最新版本的，平时不应该在上面干活，干活都应该在dev分支上<br>也就是说dev分支是不稳定的，到了某个时候将dev分支合并到master分支上，你和你的小伙伴应该在各自的分支上干活，然后推送到dev分支上</p>\n<h2 id=\"14、bug分支\"><a href=\"#14、bug分支\" class=\"headerlink\" title=\"14、bug分支\"></a>14、bug分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add now_file</span><br><span class=\"line\">git stash //保护现场</span><br><span class=\"line\">//这里修改bug</span><br><span class=\"line\">git stash pop //提取现场，继续工作</span><br></pre></td></tr></table></figure>\n<h2 id=\"15、丢弃一个没有被合并的分支\"><a href=\"#15、丢弃一个没有被合并的分支\" class=\"headerlink\" title=\"15、丢弃一个没有被合并的分支\"></a>15、丢弃一个没有被合并的分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D branch_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"16、多人协作\"><a href=\"#16、多人协作\" class=\"headerlink\" title=\"16、多人协作\"></a>16、多人协作</h2><p> 1、尝试git push origin branch_name<br> 2、如果推送失败，说明远程分支比你的版本新，则你git pull 拉取远程文件<br> 3、合并你两的分支，如果有冲突则手动解决问题<br> 4、重复1</p>\n<ul>\n<li>注：如果git pull 提示 no tracking information 则说明远程分支和本地分支没有关联用下面的命令进行关联<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-uostream-to branch_name origin/branch_name</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者你不知道有什么分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v //查看远程仓库的信息</span><br><span class=\"line\">git checkout -b branch_name origin/branch_name //创建本地分支以及远程分支</span><br><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to branch_name origin/branch_name //进行关联</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git简单指令\"><a href=\"#git简单指令\" class=\"headerlink\" title=\"git简单指令\"></a>git简单指令</h1><h2 id=\"首先放一张学习路线\"><a href=\"#首先放一张学习路线\" class=\"headerlink\" title=\"首先放一张学习路线\"></a>首先放一张学习路线</h2><p><img src=\"/2018/12/25/git简单指令/Git.png\" alt=\"git学习路线\"></p>\n<h2 id=\"1、创建版本库\"><a href=\"#1、创建版本库\" class=\"headerlink\" title=\"1、创建版本库\"></a>1、创建版本库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir huzai //创建一个空目录</span><br><span class=\"line\"><span class=\"built_in\">cd</span> huzai  //进入此目录</span><br><span class=\"line\">git init  //初始化git仓库</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、添加文件到版本库\"><a href=\"#2、添加文件到版本库\" class=\"headerlink\" title=\"2、添加文件到版本库\"></a>2、添加文件到版本库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file  //将文件添加到缓存区</span><br><span class=\"line\">git commit -m <span class=\"string\">\"post message\"</span> //提交并附带提交信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、版本回退\"><a href=\"#3、版本回退\" class=\"headerlink\" title=\"3、版本回退\"></a>3、版本回退</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^ //HEAD是一个指针，指向当前的版本,^代表上一代版本，HEAD^^代表上两代</span><br><span class=\"line\">git reflog //查询每次提交的commit_id</span><br><span class=\"line\">git reset --hard commit_id //根据id进行回退</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、管理修改\"><a href=\"#4、管理修改\" class=\"headerlink\" title=\"4、管理修改\"></a>4、管理修改</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD -- file //查看工作区（file）与最新版本（HEAD）的区别</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、撤销修改\"><a href=\"#5、撤销修改\" class=\"headerlink\" title=\"5、撤销修改\"></a>5、撤销修改</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- file //直接丢弃工作区的修改（可用于恢复误删的文件）</span><br><span class=\"line\">//对于已经添加到缓存的修改</span><br><span class=\"line\">git reset HEAD file //撤销缓存区的修改</span><br><span class=\"line\">git checkout -- file</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、删除文件\"><a href=\"#6、删除文件\" class=\"headerlink\" title=\"6、删除文件\"></a>6、删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm file //删除本地文件</span><br><span class=\"line\">git rm file //删除版本库中的文件</span><br><span class=\"line\">git commit -m <span class=\"string\">\"post delete\"</span> //提交删除事务</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、连接远程仓库\"><a href=\"#7、连接远程仓库\" class=\"headerlink\" title=\"7、连接远程仓库\"></a>7、连接远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先生成连接密钥</span><br><span class=\"line\">ssh-kengen -t rsa -C username</span><br><span class=\"line\">//将id_rsa.pub中的内容复制到github的密钥管理中</span><br><span class=\"line\">//再根据github的提示将本地仓库与远程仓库进行关联</span><br><span class=\"line\">git remote add origin git@github.com:username/repository</span><br><span class=\"line\">//再推送master分支的所有内容到远程仓库</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、从远程仓库进行下载\"><a href=\"#8、从远程仓库进行下载\" class=\"headerlink\" title=\"8、从远程仓库进行下载\"></a>8、从远程仓库进行下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:username/repository</span><br></pre></td></tr></table></figure>\n<h2 id=\"9、创建新的分支并切换到该分支下\"><a href=\"#9、创建新的分支并切换到该分支下\" class=\"headerlink\" title=\"9、创建新的分支并切换到该分支下\"></a>9、创建新的分支并切换到该分支下</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branchname //创建并切换</span><br><span class=\"line\">git branch branch_name //创建</span><br><span class=\"line\">git checkout branch_name //切换</span><br></pre></td></tr></table></figure>\n<h2 id=\"10、合并指定分支到当前分支\"><a href=\"#10、合并指定分支到当前分支\" class=\"headerlink\" title=\"10、合并指定分支到当前分支\"></a>10、合并指定分支到当前分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge branch_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"11、删除分支\"><a href=\"#11、删除分支\" class=\"headerlink\" title=\"11、删除分支\"></a>11、删除分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"12、如果合并时出现冲突\"><a href=\"#12、如果合并时出现冲突\" class=\"headerlink\" title=\"12、如果合并时出现冲突\"></a>12、如果合并时出现冲突</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat conflic_filename</span><br><span class=\"line\">//git 会用&lt;&lt;&lt;&lt;&lt; ===== &gt;&gt;&gt;&gt;&gt;&gt;显示不同分支的内容，你则需要手动解决冲突</span><br></pre></td></tr></table></figure>\n<h2 id=\"13、分支管理策略\"><a href=\"#13、分支管理策略\" class=\"headerlink\" title=\"13、分支管理策略\"></a>13、分支管理策略</h2><p>master分支应该是非常稳定的，也就是用于发布最新版本的，平时不应该在上面干活，干活都应该在dev分支上<br>也就是说dev分支是不稳定的，到了某个时候将dev分支合并到master分支上，你和你的小伙伴应该在各自的分支上干活，然后推送到dev分支上</p>\n<h2 id=\"14、bug分支\"><a href=\"#14、bug分支\" class=\"headerlink\" title=\"14、bug分支\"></a>14、bug分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add now_file</span><br><span class=\"line\">git stash //保护现场</span><br><span class=\"line\">//这里修改bug</span><br><span class=\"line\">git stash pop //提取现场，继续工作</span><br></pre></td></tr></table></figure>\n<h2 id=\"15、丢弃一个没有被合并的分支\"><a href=\"#15、丢弃一个没有被合并的分支\" class=\"headerlink\" title=\"15、丢弃一个没有被合并的分支\"></a>15、丢弃一个没有被合并的分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D branch_name</span><br></pre></td></tr></table></figure>\n<h2 id=\"16、多人协作\"><a href=\"#16、多人协作\" class=\"headerlink\" title=\"16、多人协作\"></a>16、多人协作</h2><p> 1、尝试git push origin branch_name<br> 2、如果推送失败，说明远程分支比你的版本新，则你git pull 拉取远程文件<br> 3、合并你两的分支，如果有冲突则手动解决问题<br> 4、重复1</p>\n<ul>\n<li>注：如果git pull 提示 no tracking information 则说明远程分支和本地分支没有关联用下面的命令进行关联<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-uostream-to branch_name origin/branch_name</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者你不知道有什么分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v //查看远程仓库的信息</span><br><span class=\"line\">git checkout -b branch_name origin/branch_name //创建本地分支以及远程分支</span><br><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to branch_name origin/branch_name //进行关联</span><br></pre></td></tr></table></figure></p>\n"},{"title":"python网络编程","date":"2020-07-08T03:46:04.000Z","_content":"## 套接字类型\n### 面向连接的套接字\n    - 基于TCP/IP，使用SOCKET_STREAM作为套接字类型\n### 无连接的套接字\n    - 基于UDP/IP，使用SOCKET_DGRAM作为套接字类型\n\n## pyhton中的网络编程\n### socket模块\n```python\nsocket(socket_family, socket_type, protocol = 0)\n```\n - 其中socket_family 是选择网络类型,本地网（AF_UNIX）还是因特网(AF_INET)\n - socket_type 是选择套接字的类型, protocaol默认为0\n\n ### 套接字对象常用的方法\n- 服务器套接字\n```python \ns.bind() #将主机号端口号绑定到套接字上\ns.listen() #设置并启动TCP监听器\ns.accept() #被动接受客户端连接\n```\n- 客户端套接字\n```python\ns.connect() #主动发起TCP服务连接\ns.connect_ex() #此时会以错误码的形式抛出问题而不是一大串异常\n```\n### 创建一个时间戳服务器\n    ","source":"_posts/python网络编程.md","raw":"---\ntitle: python网络编程\ndate: 2020-07-08 11:46:04\ntags: 网络编程 python\n---\n## 套接字类型\n### 面向连接的套接字\n    - 基于TCP/IP，使用SOCKET_STREAM作为套接字类型\n### 无连接的套接字\n    - 基于UDP/IP，使用SOCKET_DGRAM作为套接字类型\n\n## pyhton中的网络编程\n### socket模块\n```python\nsocket(socket_family, socket_type, protocol = 0)\n```\n - 其中socket_family 是选择网络类型,本地网（AF_UNIX）还是因特网(AF_INET)\n - socket_type 是选择套接字的类型, protocaol默认为0\n\n ### 套接字对象常用的方法\n- 服务器套接字\n```python \ns.bind() #将主机号端口号绑定到套接字上\ns.listen() #设置并启动TCP监听器\ns.accept() #被动接受客户端连接\n```\n- 客户端套接字\n```python\ns.connect() #主动发起TCP服务连接\ns.connect_ex() #此时会以错误码的形式抛出问题而不是一大串异常\n```\n### 创建一个时间戳服务器\n    ","slug":"python网络编程","published":1,"updated":"2020-07-08T05:15:28.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpciu0005kztzc14dftvo","content":"<h2 id=\"套接字类型\"><a href=\"#套接字类型\" class=\"headerlink\" title=\"套接字类型\"></a>套接字类型</h2><h3 id=\"面向连接的套接字\"><a href=\"#面向连接的套接字\" class=\"headerlink\" title=\"面向连接的套接字\"></a>面向连接的套接字</h3><pre><code>- 基于TCP/IP，使用SOCKET_STREAM作为套接字类型\n</code></pre><h3 id=\"无连接的套接字\"><a href=\"#无连接的套接字\" class=\"headerlink\" title=\"无连接的套接字\"></a>无连接的套接字</h3><pre><code>- 基于UDP/IP，使用SOCKET_DGRAM作为套接字类型\n</code></pre><h2 id=\"pyhton中的网络编程\"><a href=\"#pyhton中的网络编程\" class=\"headerlink\" title=\"pyhton中的网络编程\"></a>pyhton中的网络编程</h2><h3 id=\"socket模块\"><a href=\"#socket模块\" class=\"headerlink\" title=\"socket模块\"></a>socket模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket(socket_family, socket_type, protocol = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中socket_family 是选择网络类型,本地网（AF_UNIX）还是因特网(AF_INET)</li>\n<li><p>socket_type 是选择套接字的类型, protocaol默认为0</p>\n<h3 id=\"套接字对象常用的方法\"><a href=\"#套接字对象常用的方法\" class=\"headerlink\" title=\"套接字对象常用的方法\"></a>套接字对象常用的方法</h3><ul>\n<li>服务器套接字<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.bind() <span class=\"comment\">#将主机号端口号绑定到套接字上</span></span><br><span class=\"line\">s.listen() <span class=\"comment\">#设置并启动TCP监听器</span></span><br><span class=\"line\">s.accept() <span class=\"comment\">#被动接受客户端连接</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>客户端套接字<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.connect() <span class=\"comment\">#主动发起TCP服务连接</span></span><br><span class=\"line\">s.connect_ex() <span class=\"comment\">#此时会以错误码的形式抛出问题而不是一大串异常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"创建一个时间戳服务器\"><a href=\"#创建一个时间戳服务器\" class=\"headerlink\" title=\"创建一个时间戳服务器\"></a>创建一个时间戳服务器</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"套接字类型\"><a href=\"#套接字类型\" class=\"headerlink\" title=\"套接字类型\"></a>套接字类型</h2><h3 id=\"面向连接的套接字\"><a href=\"#面向连接的套接字\" class=\"headerlink\" title=\"面向连接的套接字\"></a>面向连接的套接字</h3><pre><code>- 基于TCP/IP，使用SOCKET_STREAM作为套接字类型\n</code></pre><h3 id=\"无连接的套接字\"><a href=\"#无连接的套接字\" class=\"headerlink\" title=\"无连接的套接字\"></a>无连接的套接字</h3><pre><code>- 基于UDP/IP，使用SOCKET_DGRAM作为套接字类型\n</code></pre><h2 id=\"pyhton中的网络编程\"><a href=\"#pyhton中的网络编程\" class=\"headerlink\" title=\"pyhton中的网络编程\"></a>pyhton中的网络编程</h2><h3 id=\"socket模块\"><a href=\"#socket模块\" class=\"headerlink\" title=\"socket模块\"></a>socket模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket(socket_family, socket_type, protocol = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中socket_family 是选择网络类型,本地网（AF_UNIX）还是因特网(AF_INET)</li>\n<li><p>socket_type 是选择套接字的类型, protocaol默认为0</p>\n<h3 id=\"套接字对象常用的方法\"><a href=\"#套接字对象常用的方法\" class=\"headerlink\" title=\"套接字对象常用的方法\"></a>套接字对象常用的方法</h3><ul>\n<li>服务器套接字<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.bind() <span class=\"comment\">#将主机号端口号绑定到套接字上</span></span><br><span class=\"line\">s.listen() <span class=\"comment\">#设置并启动TCP监听器</span></span><br><span class=\"line\">s.accept() <span class=\"comment\">#被动接受客户端连接</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>客户端套接字<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.connect() <span class=\"comment\">#主动发起TCP服务连接</span></span><br><span class=\"line\">s.connect_ex() <span class=\"comment\">#此时会以错误码的形式抛出问题而不是一大串异常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"创建一个时间戳服务器\"><a href=\"#创建一个时间戳服务器\" class=\"headerlink\" title=\"创建一个时间戳服务器\"></a>创建一个时间戳服务器</h3>"},{"title":"ubuntu自动换源","date":"2020-07-09T04:59:50.000Z","_content":"## 下载huanyuan.sh\n```bash\ngit clone  git@github.com:huzai9527/ubuntu_huanyuan.git\n```\n## 进入文件夹\n```bash\nsudo bash huanyuan.sh\n```\n## 期间需要你输入管理员密码","source":"_posts/ubuntu自动换源.md","raw":"---\ntitle: ubuntu自动换源\ndate: 2020-07-09 12:59:50\ntags: ubuntu\n---\n## 下载huanyuan.sh\n```bash\ngit clone  git@github.com:huzai9527/ubuntu_huanyuan.git\n```\n## 进入文件夹\n```bash\nsudo bash huanyuan.sh\n```\n## 期间需要你输入管理员密码","slug":"ubuntu自动换源","published":1,"updated":"2020-07-09T05:00:41.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcix0006kztznawhibqk","content":"<h2 id=\"下载huanyuan-sh\"><a href=\"#下载huanyuan-sh\" class=\"headerlink\" title=\"下载huanyuan.sh\"></a>下载huanyuan.sh</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span>  git@github.com:huzai9527/ubuntu_huanyuan.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"进入文件夹\"><a href=\"#进入文件夹\" class=\"headerlink\" title=\"进入文件夹\"></a>进入文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bash huanyuan.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"期间需要你输入管理员密码\"><a href=\"#期间需要你输入管理员密码\" class=\"headerlink\" title=\"期间需要你输入管理员密码\"></a>期间需要你输入管理员密码</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载huanyuan-sh\"><a href=\"#下载huanyuan-sh\" class=\"headerlink\" title=\"下载huanyuan.sh\"></a>下载huanyuan.sh</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span>  git@github.com:huzai9527/ubuntu_huanyuan.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"进入文件夹\"><a href=\"#进入文件夹\" class=\"headerlink\" title=\"进入文件夹\"></a>进入文件夹</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bash huanyuan.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"期间需要你输入管理员密码\"><a href=\"#期间需要你输入管理员密码\" class=\"headerlink\" title=\"期间需要你输入管理员密码\"></a>期间需要你输入管理员密码</h2>"},{"title":"scrapy构建自己的ip代理池","date":"2018-11-18T09:33:13.000Z","_content":"# 用scrapy爬取可用的代理\n## 分析免费代理网站的结构\n- 我爬取了三个字段：**IP**、**port**、**type**\n![TIM图片20181118171534.jpg](https://i.loli.net/2018/11/18/5bf12dc61a906.jpg)\n## 分析要爬取的数据，编写items.py\n- 因此在items.py中，建立相应的字段\n```bash\nimport scrapy\nclass IproxyItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    ip = scrapy.Field()\n    type = scrapy.Field()\n    port = scrapy.Field()\n```\n## 爬取所有的免费ip\n- 在spider目录下，创建IpSpider.py\n```bash\nimport scrapy\nimport Iproxy.items\nclass IpSpider(scrapy.Spider):\n    name = 'IpSpider'\n    allowed_domains = ['xicidaili.com']\n    start_urls = ['http://www.xicidaili.com/']\n\n    def parse(self, response):\n        item = Iproxy.items.IproxyItem()\n        item['ip'] = response.css('tr td:nth-child(2)::text').extract()\n        item['port'] = response.css('tr td:nth-child(3)::text').extract()\n        item['type'] = response.css('tr td:nth-child(6) ::text').extract()\n        yield item\n```\n## 检测是否可用，如果可用则存入数据库\n- 因为是免费的ip，所以我们有必要检测一下他是否可用，对于可用的就存入数据库，反之则丢弃\n- 检测处理数据在pipeline.py中编写\n- 检测原理，通过代理访问百度，如果能够访问，则说明可用\n```bash\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport pymysql\nimport requests\n\nclass IproxyPipeline(object):\n    def process_item(self, item, spider):\n        print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')\n        db = pymysql.connect(\"localhost\", \"root\", \"168168\", \"spider\")\n        cursor = db.cursor()\n        for i in range(1, len(item['ip'])):\n            ip = item['ip'][i] + ':' + item['port'][i]\n            try:\n                if self.proxyIpCheck(ip) is False:\n                    print('此ip：'+ip+\"不能用\")\n                    continue\n                else:\n                    print('此ip：'+ip+'可用，存入数据库！')\n                    sql = 'insert into proxyIp value (\"%s\")' % (ip)\n                    cursor.execute(sql)\n                    db.commit()\n            except:\n                db.rollback()\n        db.close()\n        return item\n\n    def proxyIpCheck(self, ip):\n        proxies = {'http': 'http://' + ip, 'https': 'https://' + ip}\n        try:\n            r = requests.get('https://www.baidu.com/', proxies=proxies, timeout=1)\n            if (r.status_code == 200):\n                return True\n            else:\n                return False\n        except:\n            return False\n\n\n```\n## 运行情况\n- 可以看出还是有好多ip不能用的\n![TIM图片20181118172712.png](https://i.loli.net/2018/11/18/5bf1308222b42.png)\n- 可用的存在数据库\n![TIM图片20181118172841.jpg](https://i.loli.net/2018/11/18/5bf130d8031b3.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/scrapy构建自己的ip代理池.md","raw":"---\ntitle: scrapy构建自己的ip代理池\ndate: 2018-11-18 17:33:13\ntags: python scrapy 爬虫\n---\n# 用scrapy爬取可用的代理\n## 分析免费代理网站的结构\n- 我爬取了三个字段：**IP**、**port**、**type**\n![TIM图片20181118171534.jpg](https://i.loli.net/2018/11/18/5bf12dc61a906.jpg)\n## 分析要爬取的数据，编写items.py\n- 因此在items.py中，建立相应的字段\n```bash\nimport scrapy\nclass IproxyItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    ip = scrapy.Field()\n    type = scrapy.Field()\n    port = scrapy.Field()\n```\n## 爬取所有的免费ip\n- 在spider目录下，创建IpSpider.py\n```bash\nimport scrapy\nimport Iproxy.items\nclass IpSpider(scrapy.Spider):\n    name = 'IpSpider'\n    allowed_domains = ['xicidaili.com']\n    start_urls = ['http://www.xicidaili.com/']\n\n    def parse(self, response):\n        item = Iproxy.items.IproxyItem()\n        item['ip'] = response.css('tr td:nth-child(2)::text').extract()\n        item['port'] = response.css('tr td:nth-child(3)::text').extract()\n        item['type'] = response.css('tr td:nth-child(6) ::text').extract()\n        yield item\n```\n## 检测是否可用，如果可用则存入数据库\n- 因为是免费的ip，所以我们有必要检测一下他是否可用，对于可用的就存入数据库，反之则丢弃\n- 检测处理数据在pipeline.py中编写\n- 检测原理，通过代理访问百度，如果能够访问，则说明可用\n```bash\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport pymysql\nimport requests\n\nclass IproxyPipeline(object):\n    def process_item(self, item, spider):\n        print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')\n        db = pymysql.connect(\"localhost\", \"root\", \"168168\", \"spider\")\n        cursor = db.cursor()\n        for i in range(1, len(item['ip'])):\n            ip = item['ip'][i] + ':' + item['port'][i]\n            try:\n                if self.proxyIpCheck(ip) is False:\n                    print('此ip：'+ip+\"不能用\")\n                    continue\n                else:\n                    print('此ip：'+ip+'可用，存入数据库！')\n                    sql = 'insert into proxyIp value (\"%s\")' % (ip)\n                    cursor.execute(sql)\n                    db.commit()\n            except:\n                db.rollback()\n        db.close()\n        return item\n\n    def proxyIpCheck(self, ip):\n        proxies = {'http': 'http://' + ip, 'https': 'https://' + ip}\n        try:\n            r = requests.get('https://www.baidu.com/', proxies=proxies, timeout=1)\n            if (r.status_code == 200):\n                return True\n            else:\n                return False\n        except:\n            return False\n\n\n```\n## 运行情况\n- 可以看出还是有好多ip不能用的\n![TIM图片20181118172712.png](https://i.loli.net/2018/11/18/5bf1308222b42.png)\n- 可用的存在数据库\n![TIM图片20181118172841.jpg](https://i.loli.net/2018/11/18/5bf130d8031b3.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"scrapy构建自己的ip代理池","published":1,"updated":"2020-06-30T12:29:17.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpciz0009kztzdq2ck2sr","content":"<h1 id=\"用scrapy爬取可用的代理\"><a href=\"#用scrapy爬取可用的代理\" class=\"headerlink\" title=\"用scrapy爬取可用的代理\"></a>用scrapy爬取可用的代理</h1><h2 id=\"分析免费代理网站的结构\"><a href=\"#分析免费代理网站的结构\" class=\"headerlink\" title=\"分析免费代理网站的结构\"></a>分析免费代理网站的结构</h2><ul>\n<li>我爬取了三个字段：<strong>IP</strong>、<strong>port</strong>、<strong>type</strong><br><img src=\"https://i.loli.net/2018/11/18/5bf12dc61a906.jpg\" alt=\"TIM图片20181118171534.jpg\"><h2 id=\"分析要爬取的数据，编写items-py\"><a href=\"#分析要爬取的数据，编写items-py\" class=\"headerlink\" title=\"分析要爬取的数据，编写items.py\"></a>分析要爬取的数据，编写items.py</h2></li>\n<li>因此在items.py中，建立相应的字段<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import scrapy</span><br><span class=\"line\">class IproxyItem(scrapy.Item):</span><br><span class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></span><br><span class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></span><br><span class=\"line\">    ip = scrapy.Field()</span><br><span class=\"line\">    <span class=\"built_in\">type</span> = scrapy.Field()</span><br><span class=\"line\">    port = scrapy.Field()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"爬取所有的免费ip\"><a href=\"#爬取所有的免费ip\" class=\"headerlink\" title=\"爬取所有的免费ip\"></a>爬取所有的免费ip</h2><ul>\n<li>在spider目录下，创建IpSpider.py<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import scrapy</span><br><span class=\"line\">import Iproxy.items</span><br><span class=\"line\">class IpSpider(scrapy.Spider):</span><br><span class=\"line\">    name = <span class=\"string\">'IpSpider'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'xicidaili.com'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'http://www.xicidaili.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse(self, response):</span><br><span class=\"line\">        item = Iproxy.items.IproxyItem()</span><br><span class=\"line\">        item[<span class=\"string\">'ip'</span>] = response.css(<span class=\"string\">'tr td:nth-child(2)::text'</span>).extract()</span><br><span class=\"line\">        item[<span class=\"string\">'port'</span>] = response.css(<span class=\"string\">'tr td:nth-child(3)::text'</span>).extract()</span><br><span class=\"line\">        item[<span class=\"string\">'type'</span>] = response.css(<span class=\"string\">'tr td:nth-child(6) ::text'</span>).extract()</span><br><span class=\"line\">        yield item</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"检测是否可用，如果可用则存入数据库\"><a href=\"#检测是否可用，如果可用则存入数据库\" class=\"headerlink\" title=\"检测是否可用，如果可用则存入数据库\"></a>检测是否可用，如果可用则存入数据库</h2><ul>\n<li>因为是免费的ip，所以我们有必要检测一下他是否可用，对于可用的就存入数据库，反之则丢弃</li>\n<li>检测处理数据在pipeline.py中编写</li>\n<li>检测原理，通过代理访问百度，如果能够访问，则说明可用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">class IproxyPipeline(object):</span><br><span class=\"line\">    def process_item(self, item, spider):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'</span>)</span><br><span class=\"line\">        db = pymysql.connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"168168\"</span>, <span class=\"string\">\"spider\"</span>)</span><br><span class=\"line\">        cursor = db.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(1, len(item[<span class=\"string\">'ip'</span>])):</span><br><span class=\"line\">            ip = item[<span class=\"string\">'ip'</span>][i] + <span class=\"string\">':'</span> + item[<span class=\"string\">'port'</span>][i]</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.proxyIpCheck(ip) is False:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">'此ip：'</span>+ip+<span class=\"string\">\"不能用\"</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">'此ip：'</span>+ip+<span class=\"string\">'可用，存入数据库！'</span>)</span><br><span class=\"line\">                    sql = <span class=\"string\">'insert into proxyIp value (\"%s\")'</span> % (ip)</span><br><span class=\"line\">                    cursor.execute(sql)</span><br><span class=\"line\">                    db.commit()</span><br><span class=\"line\">            except:</span><br><span class=\"line\">                db.rollback()</span><br><span class=\"line\">        db.close()</span><br><span class=\"line\">        <span class=\"built_in\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    def proxyIpCheck(self, ip):</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">'http'</span>: <span class=\"string\">'http://'</span> + ip, <span class=\"string\">'https'</span>: <span class=\"string\">'https://'</span> + ip&#125;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            r = requests.get(<span class=\"string\">'https://www.baidu.com/'</span>, proxies=proxies, timeout=1)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r.status_code == 200):</span><br><span class=\"line\">                <span class=\"built_in\">return</span> True</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">return</span> False</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            <span class=\"built_in\">return</span> False</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"运行情况\"><a href=\"#运行情况\" class=\"headerlink\" title=\"运行情况\"></a>运行情况</h2><ul>\n<li>可以看出还是有好多ip不能用的<br><img src=\"https://i.loli.net/2018/11/18/5bf1308222b42.png\" alt=\"TIM图片20181118172712.png\"></li>\n<li>可用的存在数据库<br><img src=\"https://i.loli.net/2018/11/18/5bf130d8031b3.jpg\" alt=\"TIM图片20181118172841.jpg\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用scrapy爬取可用的代理\"><a href=\"#用scrapy爬取可用的代理\" class=\"headerlink\" title=\"用scrapy爬取可用的代理\"></a>用scrapy爬取可用的代理</h1><h2 id=\"分析免费代理网站的结构\"><a href=\"#分析免费代理网站的结构\" class=\"headerlink\" title=\"分析免费代理网站的结构\"></a>分析免费代理网站的结构</h2><ul>\n<li>我爬取了三个字段：<strong>IP</strong>、<strong>port</strong>、<strong>type</strong><br><img src=\"https://i.loli.net/2018/11/18/5bf12dc61a906.jpg\" alt=\"TIM图片20181118171534.jpg\"><h2 id=\"分析要爬取的数据，编写items-py\"><a href=\"#分析要爬取的数据，编写items-py\" class=\"headerlink\" title=\"分析要爬取的数据，编写items.py\"></a>分析要爬取的数据，编写items.py</h2></li>\n<li>因此在items.py中，建立相应的字段<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import scrapy</span><br><span class=\"line\">class IproxyItem(scrapy.Item):</span><br><span class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></span><br><span class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></span><br><span class=\"line\">    ip = scrapy.Field()</span><br><span class=\"line\">    <span class=\"built_in\">type</span> = scrapy.Field()</span><br><span class=\"line\">    port = scrapy.Field()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"爬取所有的免费ip\"><a href=\"#爬取所有的免费ip\" class=\"headerlink\" title=\"爬取所有的免费ip\"></a>爬取所有的免费ip</h2><ul>\n<li>在spider目录下，创建IpSpider.py<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import scrapy</span><br><span class=\"line\">import Iproxy.items</span><br><span class=\"line\">class IpSpider(scrapy.Spider):</span><br><span class=\"line\">    name = <span class=\"string\">'IpSpider'</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">'xicidaili.com'</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">'http://www.xicidaili.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse(self, response):</span><br><span class=\"line\">        item = Iproxy.items.IproxyItem()</span><br><span class=\"line\">        item[<span class=\"string\">'ip'</span>] = response.css(<span class=\"string\">'tr td:nth-child(2)::text'</span>).extract()</span><br><span class=\"line\">        item[<span class=\"string\">'port'</span>] = response.css(<span class=\"string\">'tr td:nth-child(3)::text'</span>).extract()</span><br><span class=\"line\">        item[<span class=\"string\">'type'</span>] = response.css(<span class=\"string\">'tr td:nth-child(6) ::text'</span>).extract()</span><br><span class=\"line\">        yield item</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"检测是否可用，如果可用则存入数据库\"><a href=\"#检测是否可用，如果可用则存入数据库\" class=\"headerlink\" title=\"检测是否可用，如果可用则存入数据库\"></a>检测是否可用，如果可用则存入数据库</h2><ul>\n<li>因为是免费的ip，所以我们有必要检测一下他是否可用，对于可用的就存入数据库，反之则丢弃</li>\n<li>检测处理数据在pipeline.py中编写</li>\n<li>检测原理，通过代理访问百度，如果能够访问，则说明可用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">class IproxyPipeline(object):</span><br><span class=\"line\">    def process_item(self, item, spider):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'</span>)</span><br><span class=\"line\">        db = pymysql.connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"168168\"</span>, <span class=\"string\">\"spider\"</span>)</span><br><span class=\"line\">        cursor = db.cursor()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(1, len(item[<span class=\"string\">'ip'</span>])):</span><br><span class=\"line\">            ip = item[<span class=\"string\">'ip'</span>][i] + <span class=\"string\">':'</span> + item[<span class=\"string\">'port'</span>][i]</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.proxyIpCheck(ip) is False:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">'此ip：'</span>+ip+<span class=\"string\">\"不能用\"</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">'此ip：'</span>+ip+<span class=\"string\">'可用，存入数据库！'</span>)</span><br><span class=\"line\">                    sql = <span class=\"string\">'insert into proxyIp value (\"%s\")'</span> % (ip)</span><br><span class=\"line\">                    cursor.execute(sql)</span><br><span class=\"line\">                    db.commit()</span><br><span class=\"line\">            except:</span><br><span class=\"line\">                db.rollback()</span><br><span class=\"line\">        db.close()</span><br><span class=\"line\">        <span class=\"built_in\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    def proxyIpCheck(self, ip):</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">'http'</span>: <span class=\"string\">'http://'</span> + ip, <span class=\"string\">'https'</span>: <span class=\"string\">'https://'</span> + ip&#125;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            r = requests.get(<span class=\"string\">'https://www.baidu.com/'</span>, proxies=proxies, timeout=1)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r.status_code == 200):</span><br><span class=\"line\">                <span class=\"built_in\">return</span> True</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">return</span> False</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            <span class=\"built_in\">return</span> False</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"运行情况\"><a href=\"#运行情况\" class=\"headerlink\" title=\"运行情况\"></a>运行情况</h2><ul>\n<li>可以看出还是有好多ip不能用的<br><img src=\"https://i.loli.net/2018/11/18/5bf1308222b42.png\" alt=\"TIM图片20181118172712.png\"></li>\n<li>可用的存在数据库<br><img src=\"https://i.loli.net/2018/11/18/5bf130d8031b3.jpg\" alt=\"TIM图片20181118172841.jpg\"></li>\n</ul>\n"},{"title":"github+hexo搭建个人博客","date":"2018-11-11T09:46:19.000Z","_content":"### 1.创建的项目名默认为  **用户名.github.io**,创建时点击生成readme文件，方便后面添加说明\n<img aligen=\"center\" src=\"https://i.loli.net/2018/11/13/5beaa5e07e5a7.png\">\n### 2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\n![使用vscode打开文件夹](https://i.loli.net/2018/11/13/5beaacf147c83.png)\n### 3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\n![hexo初始化文件夹](https://i.loli.net/2018/11/13/5beaae3c7ee9d.png)\n### 4.运行hexo server打开服务，看看本地能不能显示\n![hexo server](https://i.loli.net/2018/11/13/5beab03a63524.png)\n运行后访问url，如果看到如图就成功了\n![运行效果](https://i.loli.net/2018/11/13/5beab09f5e2ab.jpg)\n### 5.配置文件中填写git的配置信息，按照如下格式填写\n![配置信息](https://i.loli.net/2018/11/13/5beab1fb7f83a.png)\n### 6.打开文件夹，右键git bash here\n![git bash here](https://i.loli.net/2018/11/13/5beab3362770b.png)\n### 7.输入cd ~/.ssh，进入ssh文件夹\n![ssh](https://i.loli.net/2018/11/13/5beab3e76e0c4.png)\n### 8.配置git中的用户名和邮箱\n![配置用户名](https://i.loli.net/2018/11/13/5beab93273357.png)\n### 9.生成ssh密钥\n![生成密钥](https://i.loli.net/2018/11/13/5beab95f2f069.png)\n### 10.在github的项目中加入密钥\n![添加密钥](https://i.loli.net/2018/11/13/5beab988e1bda.png)\n### 11.测试密钥链接是否成功\n![测试](https://i.loli.net/2018/11/13/5beab9fc045d7.png)\n### 12.测试成功后再再编辑器中运行\n     hexo clean\n     hexo g\n     hexo d\n![4.png](https://i.loli.net/2018/11/13/5beaba9fb29d7.png)这样就算上传成功\n### 13.访问你的博客，看到之前再本地运行的界面，就行了\n\n\n\n\n\n  \n","source":"_posts/github-hexo搭建个人博客.md","raw":"---\ntitle: github+hexo搭建个人博客\ndate: 2018-11-11 17:46:19\ntags: github\n---\n### 1.创建的项目名默认为  **用户名.github.io**,创建时点击生成readme文件，方便后面添加说明\n<img aligen=\"center\" src=\"https://i.loli.net/2018/11/13/5beaa5e07e5a7.png\">\n### 2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\n![使用vscode打开文件夹](https://i.loli.net/2018/11/13/5beaacf147c83.png)\n### 3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\n![hexo初始化文件夹](https://i.loli.net/2018/11/13/5beaae3c7ee9d.png)\n### 4.运行hexo server打开服务，看看本地能不能显示\n![hexo server](https://i.loli.net/2018/11/13/5beab03a63524.png)\n运行后访问url，如果看到如图就成功了\n![运行效果](https://i.loli.net/2018/11/13/5beab09f5e2ab.jpg)\n### 5.配置文件中填写git的配置信息，按照如下格式填写\n![配置信息](https://i.loli.net/2018/11/13/5beab1fb7f83a.png)\n### 6.打开文件夹，右键git bash here\n![git bash here](https://i.loli.net/2018/11/13/5beab3362770b.png)\n### 7.输入cd ~/.ssh，进入ssh文件夹\n![ssh](https://i.loli.net/2018/11/13/5beab3e76e0c4.png)\n### 8.配置git中的用户名和邮箱\n![配置用户名](https://i.loli.net/2018/11/13/5beab93273357.png)\n### 9.生成ssh密钥\n![生成密钥](https://i.loli.net/2018/11/13/5beab95f2f069.png)\n### 10.在github的项目中加入密钥\n![添加密钥](https://i.loli.net/2018/11/13/5beab988e1bda.png)\n### 11.测试密钥链接是否成功\n![测试](https://i.loli.net/2018/11/13/5beab9fc045d7.png)\n### 12.测试成功后再再编辑器中运行\n     hexo clean\n     hexo g\n     hexo d\n![4.png](https://i.loli.net/2018/11/13/5beaba9fb29d7.png)这样就算上传成功\n### 13.访问你的博客，看到之前再本地运行的界面，就行了\n\n\n\n\n\n  \n","slug":"github-hexo搭建个人博客","published":1,"updated":"2020-06-30T12:29:17.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj0000akztz1cy8q5un","content":"<h3 id=\"1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明\"><a href=\"#1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明\" class=\"headerlink\" title=\"1.创建的项目名默认为  用户名.github.io,创建时点击生成readme文件，方便后面添加说明\"></a>1.创建的项目名默认为  <strong>用户名.github.io</strong>,创建时点击生成readme文件，方便后面添加说明</h3><p><img aligen=\"center\" src=\"https://i.loli.net/2018/11/13/5beaa5e07e5a7.png\"></p>\n<h3 id=\"2-在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\"><a href=\"#2-在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\" class=\"headerlink\" title=\"2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\"></a>2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer</h3><p><img src=\"https://i.loli.net/2018/11/13/5beaacf147c83.png\" alt=\"使用vscode打开文件夹\"></p>\n<h3 id=\"3-使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\"><a href=\"#3-使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\" class=\"headerlink\" title=\"3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\"></a>3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来</h3><p><img src=\"https://i.loli.net/2018/11/13/5beaae3c7ee9d.png\" alt=\"hexo初始化文件夹\"></p>\n<h3 id=\"4-运行hexo-server打开服务，看看本地能不能显示\"><a href=\"#4-运行hexo-server打开服务，看看本地能不能显示\" class=\"headerlink\" title=\"4.运行hexo server打开服务，看看本地能不能显示\"></a>4.运行hexo server打开服务，看看本地能不能显示</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab03a63524.png\" alt=\"hexo server\"><br>运行后访问url，如果看到如图就成功了<br><img src=\"https://i.loli.net/2018/11/13/5beab09f5e2ab.jpg\" alt=\"运行效果\"></p>\n<h3 id=\"5-配置文件中填写git的配置信息，按照如下格式填写\"><a href=\"#5-配置文件中填写git的配置信息，按照如下格式填写\" class=\"headerlink\" title=\"5.配置文件中填写git的配置信息，按照如下格式填写\"></a>5.配置文件中填写git的配置信息，按照如下格式填写</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab1fb7f83a.png\" alt=\"配置信息\"></p>\n<h3 id=\"6-打开文件夹，右键git-bash-here\"><a href=\"#6-打开文件夹，右键git-bash-here\" class=\"headerlink\" title=\"6.打开文件夹，右键git bash here\"></a>6.打开文件夹，右键git bash here</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab3362770b.png\" alt=\"git bash here\"></p>\n<h3 id=\"7-输入cd-ssh，进入ssh文件夹\"><a href=\"#7-输入cd-ssh，进入ssh文件夹\" class=\"headerlink\" title=\"7.输入cd ~/.ssh，进入ssh文件夹\"></a>7.输入cd ~/.ssh，进入ssh文件夹</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab3e76e0c4.png\" alt=\"ssh\"></p>\n<h3 id=\"8-配置git中的用户名和邮箱\"><a href=\"#8-配置git中的用户名和邮箱\" class=\"headerlink\" title=\"8.配置git中的用户名和邮箱\"></a>8.配置git中的用户名和邮箱</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab93273357.png\" alt=\"配置用户名\"></p>\n<h3 id=\"9-生成ssh密钥\"><a href=\"#9-生成ssh密钥\" class=\"headerlink\" title=\"9.生成ssh密钥\"></a>9.生成ssh密钥</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab95f2f069.png\" alt=\"生成密钥\"></p>\n<h3 id=\"10-在github的项目中加入密钥\"><a href=\"#10-在github的项目中加入密钥\" class=\"headerlink\" title=\"10.在github的项目中加入密钥\"></a>10.在github的项目中加入密钥</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab988e1bda.png\" alt=\"添加密钥\"></p>\n<h3 id=\"11-测试密钥链接是否成功\"><a href=\"#11-测试密钥链接是否成功\" class=\"headerlink\" title=\"11.测试密钥链接是否成功\"></a>11.测试密钥链接是否成功</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab9fc045d7.png\" alt=\"测试\"></p>\n<h3 id=\"12-测试成功后再再编辑器中运行\"><a href=\"#12-测试成功后再再编辑器中运行\" class=\"headerlink\" title=\"12.测试成功后再再编辑器中运行\"></a>12.测试成功后再再编辑器中运行</h3><pre><code>hexo clean\nhexo g\nhexo d\n</code></pre><p><img src=\"https://i.loli.net/2018/11/13/5beaba9fb29d7.png\" alt=\"4.png\">这样就算上传成功</p>\n<h3 id=\"13-访问你的博客，看到之前再本地运行的界面，就行了\"><a href=\"#13-访问你的博客，看到之前再本地运行的界面，就行了\" class=\"headerlink\" title=\"13.访问你的博客，看到之前再本地运行的界面，就行了\"></a>13.访问你的博客，看到之前再本地运行的界面，就行了</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明\"><a href=\"#1-创建的项目名默认为-用户名-github-io-创建时点击生成readme文件，方便后面添加说明\" class=\"headerlink\" title=\"1.创建的项目名默认为  用户名.github.io,创建时点击生成readme文件，方便后面添加说明\"></a>1.创建的项目名默认为  <strong>用户名.github.io</strong>,创建时点击生成readme文件，方便后面添加说明</h3><p><img aligen=\"center\" src=\"https://i.loli.net/2018/11/13/5beaa5e07e5a7.png\"></p>\n<h3 id=\"2-在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\"><a href=\"#2-在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\" class=\"headerlink\" title=\"2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer\"></a>2.在本地创建一个文件夹，我是在E盘创建的blog，推荐用vscode作为编辑器，在编辑器里面打开文件夹，打开Terminer</h3><p><img src=\"https://i.loli.net/2018/11/13/5beaacf147c83.png\" alt=\"使用vscode打开文件夹\"></p>\n<h3 id=\"3-使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\"><a href=\"#3-使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\" class=\"headerlink\" title=\"3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来\"></a>3.使用hexo初始化文件夹，这一步会产生很多的hexo配置文件，我们先不管，先跑起来</h3><p><img src=\"https://i.loli.net/2018/11/13/5beaae3c7ee9d.png\" alt=\"hexo初始化文件夹\"></p>\n<h3 id=\"4-运行hexo-server打开服务，看看本地能不能显示\"><a href=\"#4-运行hexo-server打开服务，看看本地能不能显示\" class=\"headerlink\" title=\"4.运行hexo server打开服务，看看本地能不能显示\"></a>4.运行hexo server打开服务，看看本地能不能显示</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab03a63524.png\" alt=\"hexo server\"><br>运行后访问url，如果看到如图就成功了<br><img src=\"https://i.loli.net/2018/11/13/5beab09f5e2ab.jpg\" alt=\"运行效果\"></p>\n<h3 id=\"5-配置文件中填写git的配置信息，按照如下格式填写\"><a href=\"#5-配置文件中填写git的配置信息，按照如下格式填写\" class=\"headerlink\" title=\"5.配置文件中填写git的配置信息，按照如下格式填写\"></a>5.配置文件中填写git的配置信息，按照如下格式填写</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab1fb7f83a.png\" alt=\"配置信息\"></p>\n<h3 id=\"6-打开文件夹，右键git-bash-here\"><a href=\"#6-打开文件夹，右键git-bash-here\" class=\"headerlink\" title=\"6.打开文件夹，右键git bash here\"></a>6.打开文件夹，右键git bash here</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab3362770b.png\" alt=\"git bash here\"></p>\n<h3 id=\"7-输入cd-ssh，进入ssh文件夹\"><a href=\"#7-输入cd-ssh，进入ssh文件夹\" class=\"headerlink\" title=\"7.输入cd ~/.ssh，进入ssh文件夹\"></a>7.输入cd ~/.ssh，进入ssh文件夹</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab3e76e0c4.png\" alt=\"ssh\"></p>\n<h3 id=\"8-配置git中的用户名和邮箱\"><a href=\"#8-配置git中的用户名和邮箱\" class=\"headerlink\" title=\"8.配置git中的用户名和邮箱\"></a>8.配置git中的用户名和邮箱</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab93273357.png\" alt=\"配置用户名\"></p>\n<h3 id=\"9-生成ssh密钥\"><a href=\"#9-生成ssh密钥\" class=\"headerlink\" title=\"9.生成ssh密钥\"></a>9.生成ssh密钥</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab95f2f069.png\" alt=\"生成密钥\"></p>\n<h3 id=\"10-在github的项目中加入密钥\"><a href=\"#10-在github的项目中加入密钥\" class=\"headerlink\" title=\"10.在github的项目中加入密钥\"></a>10.在github的项目中加入密钥</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab988e1bda.png\" alt=\"添加密钥\"></p>\n<h3 id=\"11-测试密钥链接是否成功\"><a href=\"#11-测试密钥链接是否成功\" class=\"headerlink\" title=\"11.测试密钥链接是否成功\"></a>11.测试密钥链接是否成功</h3><p><img src=\"https://i.loli.net/2018/11/13/5beab9fc045d7.png\" alt=\"测试\"></p>\n<h3 id=\"12-测试成功后再再编辑器中运行\"><a href=\"#12-测试成功后再再编辑器中运行\" class=\"headerlink\" title=\"12.测试成功后再再编辑器中运行\"></a>12.测试成功后再再编辑器中运行</h3><pre><code>hexo clean\nhexo g\nhexo d\n</code></pre><p><img src=\"https://i.loli.net/2018/11/13/5beaba9fb29d7.png\" alt=\"4.png\">这样就算上传成功</p>\n<h3 id=\"13-访问你的博客，看到之前再本地运行的界面，就行了\"><a href=\"#13-访问你的博客，看到之前再本地运行的界面，就行了\" class=\"headerlink\" title=\"13.访问你的博客，看到之前再本地运行的界面，就行了\"></a>13.访问你的博客，看到之前再本地运行的界面，就行了</h3>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2020-06-30T12:29:17.397Z","updated":"2020-06-30T12:29:17.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj1000ckztz61xod9nf","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"python爬取最新更新的小说并发送到你的邮箱","date":"2018-11-17T07:07:29.000Z","_content":"## 数据获取---Spider()\n### 找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\n  ![1.png](https://i.loli.net/2018/11/17/5befc2f9dd2a9.png)\n  这里我获取最新章节的时间、标题以及标题的连接\n  ![2.png](https://i.loli.net/2018/11/17/5befc38daf280.png)\n  这里获取内容\n### 编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\n- 方法中需要导入的包 **requests** **bs4** **re** \n``` bash\ndef spider():\n    list = []\n    response = requests.get('https://www.xbiquge6.com/13_13134/')\n    response.encoding = ('utf-8')\n    html = response.text\n    html = BeautifulSoup(html, 'html.parser')\n    time = html.select('div#info p:nth-of-type(3)').__getitem__(0).text[5:]\n    title = html.select('div#info p:nth-of-type(4) a[href]').__getitem__(0).text\n    href = html.select('div#info p:nth-of-type(4) a[href]').__getitem__(0)\n    # print(title)\n    pattern = re.compile(r'href=\"(.+?)\"')\n    href = re.findall(pattern, href.__str__()).__getitem__(0)\n    href = \"https://www.xbiquge6.com\" + href\n    response = requests.get(href)\n    response.encoding = ('utf-8')\n    html = BeautifulSoup(response.text, 'html.parser')\n    content = html.select('div#content')\n    # print(content)\n    list.append(title)\n    list.append(content)\n    list.append(time)\n    return list\n```\n## 邮件发送---smtp()\n### 首先先在你的邮箱中设置打开smtp服务\n比如我的QQ邮箱，先进入邮箱->点击设置->点击账户->下滑找到smtp服务->点击开启服务->生成授权码（就是你在smtp方法中用到的password）\n![PCO_6AO93%@2W$B}[GFGHI0 (1).png](https://i.loli.net/2018/11/17/5befc49990bec.png)\n### 编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\n```bash\ndef mail():\n    list = spider();\n    ret = True\n    try:\n        mail_msg = list.__getitem__(1).__str__()\n        msg = MIMEText(mail_msg, 'html', 'utf-8')\n        msg['From'] = formataddr(['huzai', my_sender])\n        msg['To'] = formataddr(['huzai', receiver])\n        msg['Subject'] = list.__getitem__(0)\n        server = smtplib.SMTP_SSL('smtp.qq.com', 465)\n        server.login(my_sender, my_pwd)\n        server.sendmail(my_sender, [receiver], msg.as_string())\n        server.quit()\n    except Exception:\n        ret = False\n    return ret\n```\n\n## 上传脚本到服务器\n### 使用xftp将写好的smtp.py上传到你的云服务器上\n![3.png](https://i.loli.net/2018/11/17/5befc6acf033d.png)\n直接拖进去就行\n### 这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\n- 如果你的服务器上的版本是2.*的可以运行下面代码安装python3\n```bash\nsudo apt-get remove python\nsudo apt-get install python3\nsudo apt autoremove\n```\n### 用xshell进入服务器试着运行\n![TIM图片20181117155505.png](https://i.loli.net/2018/11/17/5befc966d6b17.png)\n## 在服务器端设置定时执行\n### 确保你安装了crontab（ubuntu默认安装）\ncron命名解析：执行的时间 + 执行的用户 + 执行的命令 \n![4.png](https://i.loli.net/2018/11/17/5befc8af89fb3.png)\n### 查看原有的cron\n```bash\ncat /etc/crontab\n```\n![TIM图片20181117155728.png](https://i.loli.net/2018/11/17/5befc9f6040d2.png)\n### 编辑你的程序\n```bash\nsudo nano /etc/crontab\n```\n编写你的命令，每天14:58给我发送邮件，这里根据你看的小说的更新时间设置，一天几更在大约什么时间等等\n```bash\n58 14 * * * root python3 smtp.py\n```\n编辑好了再次查看cron是否已经写入，我这里已经写入\n![TIM图片20181117160221.png](https://i.loli.net/2018/11/17/5befcb198cbae.png)\n重启crontab服务\n```bash\nservice cron restart\n```\n## 静静的等待14:58的到来，查看邮箱\n- 邮件收到了最新更新的哦\n![TIM图片20181117160515.png](https://i.loli.net/2018/11/17/5befcbd7281ec.png)\n","source":"_posts/python爬取最新更新的小说并发送到你的邮箱.md","raw":"---\ntitle: python爬取最新更新的小说并发送到你的邮箱\ndate: 2018-11-17 15:07:29\ntags: python\n---\n## 数据获取---Spider()\n### 找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\n  ![1.png](https://i.loli.net/2018/11/17/5befc2f9dd2a9.png)\n  这里我获取最新章节的时间、标题以及标题的连接\n  ![2.png](https://i.loli.net/2018/11/17/5befc38daf280.png)\n  这里获取内容\n### 编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\n- 方法中需要导入的包 **requests** **bs4** **re** \n``` bash\ndef spider():\n    list = []\n    response = requests.get('https://www.xbiquge6.com/13_13134/')\n    response.encoding = ('utf-8')\n    html = response.text\n    html = BeautifulSoup(html, 'html.parser')\n    time = html.select('div#info p:nth-of-type(3)').__getitem__(0).text[5:]\n    title = html.select('div#info p:nth-of-type(4) a[href]').__getitem__(0).text\n    href = html.select('div#info p:nth-of-type(4) a[href]').__getitem__(0)\n    # print(title)\n    pattern = re.compile(r'href=\"(.+?)\"')\n    href = re.findall(pattern, href.__str__()).__getitem__(0)\n    href = \"https://www.xbiquge6.com\" + href\n    response = requests.get(href)\n    response.encoding = ('utf-8')\n    html = BeautifulSoup(response.text, 'html.parser')\n    content = html.select('div#content')\n    # print(content)\n    list.append(title)\n    list.append(content)\n    list.append(time)\n    return list\n```\n## 邮件发送---smtp()\n### 首先先在你的邮箱中设置打开smtp服务\n比如我的QQ邮箱，先进入邮箱->点击设置->点击账户->下滑找到smtp服务->点击开启服务->生成授权码（就是你在smtp方法中用到的password）\n![PCO_6AO93%@2W$B}[GFGHI0 (1).png](https://i.loli.net/2018/11/17/5befc49990bec.png)\n### 编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\n```bash\ndef mail():\n    list = spider();\n    ret = True\n    try:\n        mail_msg = list.__getitem__(1).__str__()\n        msg = MIMEText(mail_msg, 'html', 'utf-8')\n        msg['From'] = formataddr(['huzai', my_sender])\n        msg['To'] = formataddr(['huzai', receiver])\n        msg['Subject'] = list.__getitem__(0)\n        server = smtplib.SMTP_SSL('smtp.qq.com', 465)\n        server.login(my_sender, my_pwd)\n        server.sendmail(my_sender, [receiver], msg.as_string())\n        server.quit()\n    except Exception:\n        ret = False\n    return ret\n```\n\n## 上传脚本到服务器\n### 使用xftp将写好的smtp.py上传到你的云服务器上\n![3.png](https://i.loli.net/2018/11/17/5befc6acf033d.png)\n直接拖进去就行\n### 这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\n- 如果你的服务器上的版本是2.*的可以运行下面代码安装python3\n```bash\nsudo apt-get remove python\nsudo apt-get install python3\nsudo apt autoremove\n```\n### 用xshell进入服务器试着运行\n![TIM图片20181117155505.png](https://i.loli.net/2018/11/17/5befc966d6b17.png)\n## 在服务器端设置定时执行\n### 确保你安装了crontab（ubuntu默认安装）\ncron命名解析：执行的时间 + 执行的用户 + 执行的命令 \n![4.png](https://i.loli.net/2018/11/17/5befc8af89fb3.png)\n### 查看原有的cron\n```bash\ncat /etc/crontab\n```\n![TIM图片20181117155728.png](https://i.loli.net/2018/11/17/5befc9f6040d2.png)\n### 编辑你的程序\n```bash\nsudo nano /etc/crontab\n```\n编写你的命令，每天14:58给我发送邮件，这里根据你看的小说的更新时间设置，一天几更在大约什么时间等等\n```bash\n58 14 * * * root python3 smtp.py\n```\n编辑好了再次查看cron是否已经写入，我这里已经写入\n![TIM图片20181117160221.png](https://i.loli.net/2018/11/17/5befcb198cbae.png)\n重启crontab服务\n```bash\nservice cron restart\n```\n## 静静的等待14:58的到来，查看邮箱\n- 邮件收到了最新更新的哦\n![TIM图片20181117160515.png](https://i.loli.net/2018/11/17/5befcbd7281ec.png)\n","slug":"python爬取最新更新的小说并发送到你的邮箱","published":1,"updated":"2020-06-30T12:29:17.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj3000ekztz579u1cot","content":"<h2 id=\"数据获取—Spider\"><a href=\"#数据获取—Spider\" class=\"headerlink\" title=\"数据获取—Spider()\"></a>数据获取—Spider()</h2><h3 id=\"找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\"><a href=\"#找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\" class=\"headerlink\" title=\"找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\"></a>找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取</h3><p>  <img src=\"https://i.loli.net/2018/11/17/5befc2f9dd2a9.png\" alt=\"1.png\"><br>  这里我获取最新章节的时间、标题以及标题的连接<br>  <img src=\"https://i.loli.net/2018/11/17/5befc38daf280.png\" alt=\"2.png\"><br>  这里获取内容</p>\n<h3 id=\"编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\"><a href=\"#编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\" class=\"headerlink\" title=\"编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\"></a>编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容</h3><ul>\n<li>方法中需要导入的包 <strong>requests</strong> <strong>bs4</strong> <strong>re</strong> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def spider():</span><br><span class=\"line\">    list = []</span><br><span class=\"line\">    response = requests.get(<span class=\"string\">'https://www.xbiquge6.com/13_13134/'</span>)</span><br><span class=\"line\">    response.encoding = (<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    html = response.text</span><br><span class=\"line\">    html = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    time = html.select(<span class=\"string\">'div#info p:nth-of-type(3)'</span>).__getitem__(0).text[5:]</span><br><span class=\"line\">    title = html.select(<span class=\"string\">'div#info p:nth-of-type(4) a[href]'</span>).__getitem__(0).text</span><br><span class=\"line\">    href = html.select(<span class=\"string\">'div#info p:nth-of-type(4) a[href]'</span>).__getitem__(0)</span><br><span class=\"line\">    <span class=\"comment\"># print(title)</span></span><br><span class=\"line\">    pattern = re.compile(r<span class=\"string\">'href=\"(.+?)\"'</span>)</span><br><span class=\"line\">    href = re.findall(pattern, href.__str__()).__getitem__(0)</span><br><span class=\"line\">    href = <span class=\"string\">\"https://www.xbiquge6.com\"</span> + href</span><br><span class=\"line\">    response = requests.get(href)</span><br><span class=\"line\">    response.encoding = (<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    html = BeautifulSoup(response.text, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    content = html.select(<span class=\"string\">'div#content'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># print(content)</span></span><br><span class=\"line\">    list.append(title)</span><br><span class=\"line\">    list.append(content)</span><br><span class=\"line\">    list.append(time)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> list</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"邮件发送—smtp\"><a href=\"#邮件发送—smtp\" class=\"headerlink\" title=\"邮件发送—smtp()\"></a>邮件发送—smtp()</h2><h3 id=\"首先先在你的邮箱中设置打开smtp服务\"><a href=\"#首先先在你的邮箱中设置打开smtp服务\" class=\"headerlink\" title=\"首先先在你的邮箱中设置打开smtp服务\"></a>首先先在你的邮箱中设置打开smtp服务</h3><p>比如我的QQ邮箱，先进入邮箱-&gt;点击设置-&gt;点击账户-&gt;下滑找到smtp服务-&gt;点击开启服务-&gt;生成授权码（就是你在smtp方法中用到的password）<br>![PCO_6AO93%@2W$B}<a href=\"https://i.loli.net/2018/11/17/5befc49990bec.png\" target=\"_blank\" rel=\"noopener\">GFGHI0 (1).png</a></p>\n<h3 id=\"编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\"><a href=\"#编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\" class=\"headerlink\" title=\"编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\"></a>编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def mail():</span><br><span class=\"line\">    list = spider();</span><br><span class=\"line\">    ret = True</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        mail_msg = list.__getitem__(1).__str__()</span><br><span class=\"line\">        msg = MIMEText(mail_msg, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        msg[<span class=\"string\">'From'</span>] = formataddr([<span class=\"string\">'huzai'</span>, my_sender])</span><br><span class=\"line\">        msg[<span class=\"string\">'To'</span>] = formataddr([<span class=\"string\">'huzai'</span>, receiver])</span><br><span class=\"line\">        msg[<span class=\"string\">'Subject'</span>] = list.__getitem__(0)</span><br><span class=\"line\">        server = smtplib.SMTP_SSL(<span class=\"string\">'smtp.qq.com'</span>, 465)</span><br><span class=\"line\">        server.login(my_sender, my_pwd)</span><br><span class=\"line\">        server.sendmail(my_sender, [receiver], msg.as_string())</span><br><span class=\"line\">        server.quit()</span><br><span class=\"line\">    except Exception:</span><br><span class=\"line\">        ret = False</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ret</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传脚本到服务器\"><a href=\"#上传脚本到服务器\" class=\"headerlink\" title=\"上传脚本到服务器\"></a>上传脚本到服务器</h2><h3 id=\"使用xftp将写好的smtp-py上传到你的云服务器上\"><a href=\"#使用xftp将写好的smtp-py上传到你的云服务器上\" class=\"headerlink\" title=\"使用xftp将写好的smtp.py上传到你的云服务器上\"></a>使用xftp将写好的smtp.py上传到你的云服务器上</h3><p><img src=\"https://i.loli.net/2018/11/17/5befc6acf033d.png\" alt=\"3.png\"><br>直接拖进去就行</p>\n<h3 id=\"这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\"><a href=\"#这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\" class=\"headerlink\" title=\"这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\"></a>这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装</h3><ul>\n<li>如果你的服务器上的版本是2.*的可以运行下面代码安装python3<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove python</span><br><span class=\"line\">sudo apt-get install python3</span><br><span class=\"line\">sudo apt autoremove</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"用xshell进入服务器试着运行\"><a href=\"#用xshell进入服务器试着运行\" class=\"headerlink\" title=\"用xshell进入服务器试着运行\"></a>用xshell进入服务器试着运行</h3><p><img src=\"https://i.loli.net/2018/11/17/5befc966d6b17.png\" alt=\"TIM图片20181117155505.png\"></p>\n<h2 id=\"在服务器端设置定时执行\"><a href=\"#在服务器端设置定时执行\" class=\"headerlink\" title=\"在服务器端设置定时执行\"></a>在服务器端设置定时执行</h2><h3 id=\"确保你安装了crontab（ubuntu默认安装）\"><a href=\"#确保你安装了crontab（ubuntu默认安装）\" class=\"headerlink\" title=\"确保你安装了crontab（ubuntu默认安装）\"></a>确保你安装了crontab（ubuntu默认安装）</h3><p>cron命名解析：执行的时间 + 执行的用户 + 执行的命令<br><img src=\"https://i.loli.net/2018/11/17/5befc8af89fb3.png\" alt=\"4.png\"></p>\n<h3 id=\"查看原有的cron\"><a href=\"#查看原有的cron\" class=\"headerlink\" title=\"查看原有的cron\"></a>查看原有的cron</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/crontab</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2018/11/17/5befc9f6040d2.png\" alt=\"TIM图片20181117155728.png\"></p>\n<h3 id=\"编辑你的程序\"><a href=\"#编辑你的程序\" class=\"headerlink\" title=\"编辑你的程序\"></a>编辑你的程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/crontab</span><br></pre></td></tr></table></figure>\n<p>编写你的命令，每天14:58给我发送邮件，这里根据你看的小说的更新时间设置，一天几更在大约什么时间等等<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">58 14 * * * root python3 smtp.py</span><br></pre></td></tr></table></figure></p>\n<p>编辑好了再次查看cron是否已经写入，我这里已经写入<br><img src=\"https://i.loli.net/2018/11/17/5befcb198cbae.png\" alt=\"TIM图片20181117160221.png\"><br>重启crontab服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service cron restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"静静的等待14-58的到来，查看邮箱\"><a href=\"#静静的等待14-58的到来，查看邮箱\" class=\"headerlink\" title=\"静静的等待14:58的到来，查看邮箱\"></a>静静的等待14:58的到来，查看邮箱</h2><ul>\n<li>邮件收到了最新更新的哦<br><img src=\"https://i.loli.net/2018/11/17/5befcbd7281ec.png\" alt=\"TIM图片20181117160515.png\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据获取—Spider\"><a href=\"#数据获取—Spider\" class=\"headerlink\" title=\"数据获取—Spider()\"></a>数据获取—Spider()</h2><h3 id=\"找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\"><a href=\"#找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\" class=\"headerlink\" title=\"找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取\"></a>找目标网站，该网站是你看小说的网站，分析该网站的结构方便你对内容的抓取</h3><p>  <img src=\"https://i.loli.net/2018/11/17/5befc2f9dd2a9.png\" alt=\"1.png\"><br>  这里我获取最新章节的时间、标题以及标题的连接<br>  <img src=\"https://i.loli.net/2018/11/17/5befc38daf280.png\" alt=\"2.png\"><br>  这里获取内容</p>\n<h3 id=\"编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\"><a href=\"#编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\" class=\"headerlink\" title=\"编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容\"></a>编写spider方法，确定他的返回值，这里我返回的是一个list，包括更新的时间、标题、内容</h3><ul>\n<li>方法中需要导入的包 <strong>requests</strong> <strong>bs4</strong> <strong>re</strong> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def spider():</span><br><span class=\"line\">    list = []</span><br><span class=\"line\">    response = requests.get(<span class=\"string\">'https://www.xbiquge6.com/13_13134/'</span>)</span><br><span class=\"line\">    response.encoding = (<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    html = response.text</span><br><span class=\"line\">    html = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    time = html.select(<span class=\"string\">'div#info p:nth-of-type(3)'</span>).__getitem__(0).text[5:]</span><br><span class=\"line\">    title = html.select(<span class=\"string\">'div#info p:nth-of-type(4) a[href]'</span>).__getitem__(0).text</span><br><span class=\"line\">    href = html.select(<span class=\"string\">'div#info p:nth-of-type(4) a[href]'</span>).__getitem__(0)</span><br><span class=\"line\">    <span class=\"comment\"># print(title)</span></span><br><span class=\"line\">    pattern = re.compile(r<span class=\"string\">'href=\"(.+?)\"'</span>)</span><br><span class=\"line\">    href = re.findall(pattern, href.__str__()).__getitem__(0)</span><br><span class=\"line\">    href = <span class=\"string\">\"https://www.xbiquge6.com\"</span> + href</span><br><span class=\"line\">    response = requests.get(href)</span><br><span class=\"line\">    response.encoding = (<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    html = BeautifulSoup(response.text, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    content = html.select(<span class=\"string\">'div#content'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># print(content)</span></span><br><span class=\"line\">    list.append(title)</span><br><span class=\"line\">    list.append(content)</span><br><span class=\"line\">    list.append(time)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> list</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"邮件发送—smtp\"><a href=\"#邮件发送—smtp\" class=\"headerlink\" title=\"邮件发送—smtp()\"></a>邮件发送—smtp()</h2><h3 id=\"首先先在你的邮箱中设置打开smtp服务\"><a href=\"#首先先在你的邮箱中设置打开smtp服务\" class=\"headerlink\" title=\"首先先在你的邮箱中设置打开smtp服务\"></a>首先先在你的邮箱中设置打开smtp服务</h3><p>比如我的QQ邮箱，先进入邮箱-&gt;点击设置-&gt;点击账户-&gt;下滑找到smtp服务-&gt;点击开启服务-&gt;生成授权码（就是你在smtp方法中用到的password）<br>![PCO_6AO93%@2W$B}<a href=\"https://i.loli.net/2018/11/17/5befc49990bec.png\" target=\"_blank\" rel=\"noopener\">GFGHI0 (1).png</a></p>\n<h3 id=\"编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\"><a href=\"#编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\" class=\"headerlink\" title=\"编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False\"></a>编写smtp方法，向我的邮箱发送小说，确定返回值是bool类型，成功为True，失败为False</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def mail():</span><br><span class=\"line\">    list = spider();</span><br><span class=\"line\">    ret = True</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        mail_msg = list.__getitem__(1).__str__()</span><br><span class=\"line\">        msg = MIMEText(mail_msg, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        msg[<span class=\"string\">'From'</span>] = formataddr([<span class=\"string\">'huzai'</span>, my_sender])</span><br><span class=\"line\">        msg[<span class=\"string\">'To'</span>] = formataddr([<span class=\"string\">'huzai'</span>, receiver])</span><br><span class=\"line\">        msg[<span class=\"string\">'Subject'</span>] = list.__getitem__(0)</span><br><span class=\"line\">        server = smtplib.SMTP_SSL(<span class=\"string\">'smtp.qq.com'</span>, 465)</span><br><span class=\"line\">        server.login(my_sender, my_pwd)</span><br><span class=\"line\">        server.sendmail(my_sender, [receiver], msg.as_string())</span><br><span class=\"line\">        server.quit()</span><br><span class=\"line\">    except Exception:</span><br><span class=\"line\">        ret = False</span><br><span class=\"line\">    <span class=\"built_in\">return</span> ret</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传脚本到服务器\"><a href=\"#上传脚本到服务器\" class=\"headerlink\" title=\"上传脚本到服务器\"></a>上传脚本到服务器</h2><h3 id=\"使用xftp将写好的smtp-py上传到你的云服务器上\"><a href=\"#使用xftp将写好的smtp-py上传到你的云服务器上\" class=\"headerlink\" title=\"使用xftp将写好的smtp.py上传到你的云服务器上\"></a>使用xftp将写好的smtp.py上传到你的云服务器上</h3><p><img src=\"https://i.loli.net/2018/11/17/5befc6acf033d.png\" alt=\"3.png\"><br>直接拖进去就行</p>\n<h3 id=\"这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\"><a href=\"#这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\" class=\"headerlink\" title=\"这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装\"></a>这里注意保证你的服务器上的python版本和你本机一致，且需要的包已经安装</h3><ul>\n<li>如果你的服务器上的版本是2.*的可以运行下面代码安装python3<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove python</span><br><span class=\"line\">sudo apt-get install python3</span><br><span class=\"line\">sudo apt autoremove</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"用xshell进入服务器试着运行\"><a href=\"#用xshell进入服务器试着运行\" class=\"headerlink\" title=\"用xshell进入服务器试着运行\"></a>用xshell进入服务器试着运行</h3><p><img src=\"https://i.loli.net/2018/11/17/5befc966d6b17.png\" alt=\"TIM图片20181117155505.png\"></p>\n<h2 id=\"在服务器端设置定时执行\"><a href=\"#在服务器端设置定时执行\" class=\"headerlink\" title=\"在服务器端设置定时执行\"></a>在服务器端设置定时执行</h2><h3 id=\"确保你安装了crontab（ubuntu默认安装）\"><a href=\"#确保你安装了crontab（ubuntu默认安装）\" class=\"headerlink\" title=\"确保你安装了crontab（ubuntu默认安装）\"></a>确保你安装了crontab（ubuntu默认安装）</h3><p>cron命名解析：执行的时间 + 执行的用户 + 执行的命令<br><img src=\"https://i.loli.net/2018/11/17/5befc8af89fb3.png\" alt=\"4.png\"></p>\n<h3 id=\"查看原有的cron\"><a href=\"#查看原有的cron\" class=\"headerlink\" title=\"查看原有的cron\"></a>查看原有的cron</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/crontab</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2018/11/17/5befc9f6040d2.png\" alt=\"TIM图片20181117155728.png\"></p>\n<h3 id=\"编辑你的程序\"><a href=\"#编辑你的程序\" class=\"headerlink\" title=\"编辑你的程序\"></a>编辑你的程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/crontab</span><br></pre></td></tr></table></figure>\n<p>编写你的命令，每天14:58给我发送邮件，这里根据你看的小说的更新时间设置，一天几更在大约什么时间等等<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">58 14 * * * root python3 smtp.py</span><br></pre></td></tr></table></figure></p>\n<p>编辑好了再次查看cron是否已经写入，我这里已经写入<br><img src=\"https://i.loli.net/2018/11/17/5befcb198cbae.png\" alt=\"TIM图片20181117160221.png\"><br>重启crontab服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service cron restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"静静的等待14-58的到来，查看邮箱\"><a href=\"#静静的等待14-58的到来，查看邮箱\" class=\"headerlink\" title=\"静静的等待14:58的到来，查看邮箱\"></a>静静的等待14:58的到来，查看邮箱</h2><ul>\n<li>邮件收到了最新更新的哦<br><img src=\"https://i.loli.net/2018/11/17/5befcbd7281ec.png\" alt=\"TIM图片20181117160515.png\"></li>\n</ul>\n"},{"title":"小说更新后发送邮箱的问题解决","date":"2018-11-23T08:54:00.000Z","_content":"## 遇到的问题\n - 先上一张图，看一下问题在哪\n ![1.png](1.png)\n\n从图上我们可以看到，虽然小说是每天发两次给我，但是有时候会漏掉一章，有时候又会重复发一章，这都是小说作者不按时更新惹的祸啊！！！既然小说作者的习惯改变不了，那就完善自我吧!\n\n## 新的思路，加一个“缓存”\n缓存是什么意思呢？\n- 本地建一个名为origin.txt的文本文件，每次爬取完成后与origin.txt里面的内容对比一下。\n- 如果一样则不发送。\n- 如果不一样就发送，并且将最新的内容保存到origin.txt文件中，作为下一次的对照。\n\n## 演示效果\n- 再origin.txt里写入test，然后启动\n![2.png](2.png)\n我们可以看到，origin文件已被重新写入，并且新的文本已经发送到邮箱\n- 再次启动，也就是还没跟新的情况\n![3](3.png)\n我们看到，提示消息，这里不会跟新origin，也不会发送邮件\n\n## 还遗留的问题\n- 如果作者一下爆发怎么办（一分钟更新十章！）\n思考一下，其实原理差不多，缓存大小不同罢了！有兴趣的可以尝试一下！\n## 项目源码已发布在github\n[https://github.com/huzai9527/fictionSend](https://github.com/huzai9527/fictionSend)\n","source":"_posts/小说更新后发送邮箱的问题解决.md","raw":"---\ntitle: 小说更新后发送邮箱的问题解决\ndate: 2018-11-23 16:54:00\ntags: python\n---\n## 遇到的问题\n - 先上一张图，看一下问题在哪\n ![1.png](1.png)\n\n从图上我们可以看到，虽然小说是每天发两次给我，但是有时候会漏掉一章，有时候又会重复发一章，这都是小说作者不按时更新惹的祸啊！！！既然小说作者的习惯改变不了，那就完善自我吧!\n\n## 新的思路，加一个“缓存”\n缓存是什么意思呢？\n- 本地建一个名为origin.txt的文本文件，每次爬取完成后与origin.txt里面的内容对比一下。\n- 如果一样则不发送。\n- 如果不一样就发送，并且将最新的内容保存到origin.txt文件中，作为下一次的对照。\n\n## 演示效果\n- 再origin.txt里写入test，然后启动\n![2.png](2.png)\n我们可以看到，origin文件已被重新写入，并且新的文本已经发送到邮箱\n- 再次启动，也就是还没跟新的情况\n![3](3.png)\n我们看到，提示消息，这里不会跟新origin，也不会发送邮件\n\n## 还遗留的问题\n- 如果作者一下爆发怎么办（一分钟更新十章！）\n思考一下，其实原理差不多，缓存大小不同罢了！有兴趣的可以尝试一下！\n## 项目源码已发布在github\n[https://github.com/huzai9527/fictionSend](https://github.com/huzai9527/fictionSend)\n","slug":"小说更新后发送邮箱的问题解决","published":1,"updated":"2020-06-30T12:29:17.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj4000gkztzjtugi513","content":"<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>先上一张图，看一下问题在哪<br><img src=\"/2018/11/23/小说更新后发送邮箱的问题解决/1.png\" alt=\"1.png\"></li>\n</ul>\n<p>从图上我们可以看到，虽然小说是每天发两次给我，但是有时候会漏掉一章，有时候又会重复发一章，这都是小说作者不按时更新惹的祸啊！！！既然小说作者的习惯改变不了，那就完善自我吧!</p>\n<h2 id=\"新的思路，加一个“缓存”\"><a href=\"#新的思路，加一个“缓存”\" class=\"headerlink\" title=\"新的思路，加一个“缓存”\"></a>新的思路，加一个“缓存”</h2><p>缓存是什么意思呢？</p>\n<ul>\n<li>本地建一个名为origin.txt的文本文件，每次爬取完成后与origin.txt里面的内容对比一下。</li>\n<li>如果一样则不发送。</li>\n<li>如果不一样就发送，并且将最新的内容保存到origin.txt文件中，作为下一次的对照。</li>\n</ul>\n<h2 id=\"演示效果\"><a href=\"#演示效果\" class=\"headerlink\" title=\"演示效果\"></a>演示效果</h2><ul>\n<li>再origin.txt里写入test，然后启动<br><img src=\"/2018/11/23/小说更新后发送邮箱的问题解决/2.png\" alt=\"2.png\"><br>我们可以看到，origin文件已被重新写入，并且新的文本已经发送到邮箱</li>\n<li>再次启动，也就是还没跟新的情况<br><img src=\"/2018/11/23/小说更新后发送邮箱的问题解决/3.png\" alt=\"3\"><br>我们看到，提示消息，这里不会跟新origin，也不会发送邮件</li>\n</ul>\n<h2 id=\"还遗留的问题\"><a href=\"#还遗留的问题\" class=\"headerlink\" title=\"还遗留的问题\"></a>还遗留的问题</h2><ul>\n<li>如果作者一下爆发怎么办（一分钟更新十章！）<br>思考一下，其实原理差不多，缓存大小不同罢了！有兴趣的可以尝试一下！<h2 id=\"项目源码已发布在github\"><a href=\"#项目源码已发布在github\" class=\"headerlink\" title=\"项目源码已发布在github\"></a>项目源码已发布在github</h2><a href=\"https://github.com/huzai9527/fictionSend\" target=\"_blank\" rel=\"noopener\">https://github.com/huzai9527/fictionSend</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>先上一张图，看一下问题在哪<br><img src=\"/2018/11/23/小说更新后发送邮箱的问题解决/1.png\" alt=\"1.png\"></li>\n</ul>\n<p>从图上我们可以看到，虽然小说是每天发两次给我，但是有时候会漏掉一章，有时候又会重复发一章，这都是小说作者不按时更新惹的祸啊！！！既然小说作者的习惯改变不了，那就完善自我吧!</p>\n<h2 id=\"新的思路，加一个“缓存”\"><a href=\"#新的思路，加一个“缓存”\" class=\"headerlink\" title=\"新的思路，加一个“缓存”\"></a>新的思路，加一个“缓存”</h2><p>缓存是什么意思呢？</p>\n<ul>\n<li>本地建一个名为origin.txt的文本文件，每次爬取完成后与origin.txt里面的内容对比一下。</li>\n<li>如果一样则不发送。</li>\n<li>如果不一样就发送，并且将最新的内容保存到origin.txt文件中，作为下一次的对照。</li>\n</ul>\n<h2 id=\"演示效果\"><a href=\"#演示效果\" class=\"headerlink\" title=\"演示效果\"></a>演示效果</h2><ul>\n<li>再origin.txt里写入test，然后启动<br><img src=\"/2018/11/23/小说更新后发送邮箱的问题解决/2.png\" alt=\"2.png\"><br>我们可以看到，origin文件已被重新写入，并且新的文本已经发送到邮箱</li>\n<li>再次启动，也就是还没跟新的情况<br><img src=\"/2018/11/23/小说更新后发送邮箱的问题解决/3.png\" alt=\"3\"><br>我们看到，提示消息，这里不会跟新origin，也不会发送邮件</li>\n</ul>\n<h2 id=\"还遗留的问题\"><a href=\"#还遗留的问题\" class=\"headerlink\" title=\"还遗留的问题\"></a>还遗留的问题</h2><ul>\n<li>如果作者一下爆发怎么办（一分钟更新十章！）<br>思考一下，其实原理差不多，缓存大小不同罢了！有兴趣的可以尝试一下！<h2 id=\"项目源码已发布在github\"><a href=\"#项目源码已发布在github\" class=\"headerlink\" title=\"项目源码已发布在github\"></a>项目源码已发布在github</h2><a href=\"https://github.com/huzai9527/fictionSend\" target=\"_blank\" rel=\"noopener\">https://github.com/huzai9527/fictionSend</a></li>\n</ul>\n"},{"title":"测试异地管理","date":"2020-06-30T12:37:13.000Z","_content":"\n\n# test","source":"_posts/测试异地管理.md","raw":"---\ntitle: 测试异地管理\ndate: 2020-06-30 20:37:13\ntags:\n---\n\n\n# test","slug":"测试异地管理","published":1,"updated":"2020-07-01T05:35:35.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj4000ikztzxsleclxl","content":"<h1 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h1>"},{"title":"数据分析----numpy ","date":"2018-12-22T23:21:29.000Z","_content":"# 数据分析---numpy\n\n```python\nimport pandas as pd\nimport numpy as np\n```\n\n##  创建普通数组\n\n\n```python\na = np.array([1,2,3])\nb = np.array([[1,2,3],[4,5,6],[7,8,9]])\n```\n\n\n```python\nb[1,1] = 10\n```\n\n\n```python\nprint(a.shape)\nprint(b.shape)\nprint(a.dtype)\nprint(b)\n```\n\n    (3,)\n    (3, 3)\n    int64\n    [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n\n\n## 创建结构数组\n\n\n```python\npersonalType = np.dtype({\n    'names':['name','age','chinese','math','english'],\n    'formats':['S25','i','i','i','f']\n})\nstudents = np.array([(\"huzai\",22,99,99,99.5),(\"huzai\",22,99,99,99.5)],dtype=personalType)\nage = students[:]['age']\nprint(np.mean(age))\n```\n\n    22.0\n\n\n\n```python\nprint(students)\n```\n\n    [(b'huzai', 22, 99, 99, 99.5) (b'huzai', 22, 99, 99, 99.5)]\n\n\n## 创建连续数组\n\n\n```python\nx1 = np.arange(1,11,2) #步长为2，从1开始的等差数组(不包括终值)\nx2 = np.linspace(1,9,5) #将1-9分成5块，结果如上\n```\n\n\n```python\nprint(x1)\nprint(x2)\n```\n\n    [1 3 5 7 9]\n    [1. 3. 5. 7. 9.]\n\n\n## 数组间的算数运算\n\n\n```python\nprint(np.add(x1,x2))\nprint(np.subtract(x1,x2))\nprint(np.multiply(x1,x2))\nprint(np.divide(x1,x2))\n```\n\n    [ 2.  6. 10. 14. 18.]\n    [0. 0. 0. 0. 0.]\n    [ 1.  9. 25. 49. 81.]\n    [1. 1. 1. 1. 1.]\n\n\n## 统计函数\n\n### 数组中的最值 np.amin()  amax()\n\n\n```python\na = np.array([[1,3,7],[2,5,8],[6,4,9]])\nprint(np.amin(a))\nprint(np.amin(a,0)) #每一列的最小值\nprint(np.amin(a,1)) #每行的最小值\n```\n\n    1\n    [1 3 7]\n    [1 2 4]\n\n\n### 统计最大值与最小值之差 ptp()\n\n\n```python\nprint(np.ptp(a))\nprint(np.ptp(a,0)) #每列最大值与最小值的差\nprint(np.ptp(a,1)) #每行最大值与最小值的差\n```\n\n    8\n    [5 2 2]\n    [6 6 5]\n\n\n### 统计数组的百分位数 percentile(a, p, axis)  a:数组名 p 代表百分比 axis代表是行还是列\n\n\n```python\nprint(np.percentile(a,50))\nprint(np.percentile(a,50,0))\nprint(np.percentile(a,50,1))\n```\n\n    5.0\n    [2. 4. 8.]\n    [3. 5. 6.]\n\n\n### 统计数组中的中位数以及平均数 median() mean()\n\n\n```python\nprint(np.median(a))\nprint(np.median(a,0))\nprint(np.median(a,1))\n```\n\n    5.0\n    [2. 4. 8.]\n    [3. 5. 6.]\n\n\n### 数组中的加权平均值 average(a,weights)\n\n\n```python\nb = np.array([1,2,3,4])\nwts = np.array([1,2,3,4])\nprint(np.average(b))\nprint(np.average(b,weights=wts))\n```\n\n    2.5\n    3.0\n\n\n### 统计数组中的标准差（std（））与方差（var（））\n\n\n```python\nprint(np.std(b))\nprint(np.var(b))\n```\n\n    1.118033988749895\n    1.25\n\n\n## Numpy排序\n\n\n```python\nprint(a)\nprint(np.sort(a))\nprint(np.sort(a,0))\n```\n\n    [[1 3 7]\n     [2 5 8]\n     [6 4 9]]\n    [[1 3 7]\n     [2 5 8]\n     [4 6 9]]\n    [[1 3 7]\n     [2 4 8]\n     [6 5 9]]\n\n\n# 作业题\n\n\n```python\nst_type = np.dtype({\n    'names':['name','chinese','english','math'],\n    'formats':['S25','i','i','i']\n})\ngrades = np.array([('zhangfei',66,65,30),('guanyu',95,85,98),('zhaoyun',93,92,96),('huangzhong',90,88,77),\n                  ('dianwei',80,90,90)],dtype=st_type)\n```\n\n\n```python\nprint(grades)\n```\n\n    [(b'zhangfei', 66, 65, 30) (b'guanyu', 95, 85, 98)\n     (b'zhaoyun', 93, 92, 96) (b'huangzhong', 90, 88, 77)\n     (b'dianwei', 80, 90, 90)]\n\n\n\n```python\nchinese = grades[:]['chinese'] \nenglish = grades[:]['english']\nmath = grades[:]['math']\ntotal = np.add(chinese,english,math)\n```\n\n\n```python\nprint(total)\n```\n\n    [131 180 185 178 170]\n\n\n\n```python\nc_a,e_a,m_a = np.average(chinese),np.average(english),np.average(math)\n```\n\n\n```python\nprint(c_a)\n```\n\n    84.8\n\n\n\n```python\n\n```\n","source":"_posts/数据分析-numpy.md","raw":"---\ntitle: '数据分析----numpy '\ndate: 2018-12-23 07:21:29\ntags: 数据分析\n---\n# 数据分析---numpy\n\n```python\nimport pandas as pd\nimport numpy as np\n```\n\n##  创建普通数组\n\n\n```python\na = np.array([1,2,3])\nb = np.array([[1,2,3],[4,5,6],[7,8,9]])\n```\n\n\n```python\nb[1,1] = 10\n```\n\n\n```python\nprint(a.shape)\nprint(b.shape)\nprint(a.dtype)\nprint(b)\n```\n\n    (3,)\n    (3, 3)\n    int64\n    [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n\n\n## 创建结构数组\n\n\n```python\npersonalType = np.dtype({\n    'names':['name','age','chinese','math','english'],\n    'formats':['S25','i','i','i','f']\n})\nstudents = np.array([(\"huzai\",22,99,99,99.5),(\"huzai\",22,99,99,99.5)],dtype=personalType)\nage = students[:]['age']\nprint(np.mean(age))\n```\n\n    22.0\n\n\n\n```python\nprint(students)\n```\n\n    [(b'huzai', 22, 99, 99, 99.5) (b'huzai', 22, 99, 99, 99.5)]\n\n\n## 创建连续数组\n\n\n```python\nx1 = np.arange(1,11,2) #步长为2，从1开始的等差数组(不包括终值)\nx2 = np.linspace(1,9,5) #将1-9分成5块，结果如上\n```\n\n\n```python\nprint(x1)\nprint(x2)\n```\n\n    [1 3 5 7 9]\n    [1. 3. 5. 7. 9.]\n\n\n## 数组间的算数运算\n\n\n```python\nprint(np.add(x1,x2))\nprint(np.subtract(x1,x2))\nprint(np.multiply(x1,x2))\nprint(np.divide(x1,x2))\n```\n\n    [ 2.  6. 10. 14. 18.]\n    [0. 0. 0. 0. 0.]\n    [ 1.  9. 25. 49. 81.]\n    [1. 1. 1. 1. 1.]\n\n\n## 统计函数\n\n### 数组中的最值 np.amin()  amax()\n\n\n```python\na = np.array([[1,3,7],[2,5,8],[6,4,9]])\nprint(np.amin(a))\nprint(np.amin(a,0)) #每一列的最小值\nprint(np.amin(a,1)) #每行的最小值\n```\n\n    1\n    [1 3 7]\n    [1 2 4]\n\n\n### 统计最大值与最小值之差 ptp()\n\n\n```python\nprint(np.ptp(a))\nprint(np.ptp(a,0)) #每列最大值与最小值的差\nprint(np.ptp(a,1)) #每行最大值与最小值的差\n```\n\n    8\n    [5 2 2]\n    [6 6 5]\n\n\n### 统计数组的百分位数 percentile(a, p, axis)  a:数组名 p 代表百分比 axis代表是行还是列\n\n\n```python\nprint(np.percentile(a,50))\nprint(np.percentile(a,50,0))\nprint(np.percentile(a,50,1))\n```\n\n    5.0\n    [2. 4. 8.]\n    [3. 5. 6.]\n\n\n### 统计数组中的中位数以及平均数 median() mean()\n\n\n```python\nprint(np.median(a))\nprint(np.median(a,0))\nprint(np.median(a,1))\n```\n\n    5.0\n    [2. 4. 8.]\n    [3. 5. 6.]\n\n\n### 数组中的加权平均值 average(a,weights)\n\n\n```python\nb = np.array([1,2,3,4])\nwts = np.array([1,2,3,4])\nprint(np.average(b))\nprint(np.average(b,weights=wts))\n```\n\n    2.5\n    3.0\n\n\n### 统计数组中的标准差（std（））与方差（var（））\n\n\n```python\nprint(np.std(b))\nprint(np.var(b))\n```\n\n    1.118033988749895\n    1.25\n\n\n## Numpy排序\n\n\n```python\nprint(a)\nprint(np.sort(a))\nprint(np.sort(a,0))\n```\n\n    [[1 3 7]\n     [2 5 8]\n     [6 4 9]]\n    [[1 3 7]\n     [2 5 8]\n     [4 6 9]]\n    [[1 3 7]\n     [2 4 8]\n     [6 5 9]]\n\n\n# 作业题\n\n\n```python\nst_type = np.dtype({\n    'names':['name','chinese','english','math'],\n    'formats':['S25','i','i','i']\n})\ngrades = np.array([('zhangfei',66,65,30),('guanyu',95,85,98),('zhaoyun',93,92,96),('huangzhong',90,88,77),\n                  ('dianwei',80,90,90)],dtype=st_type)\n```\n\n\n```python\nprint(grades)\n```\n\n    [(b'zhangfei', 66, 65, 30) (b'guanyu', 95, 85, 98)\n     (b'zhaoyun', 93, 92, 96) (b'huangzhong', 90, 88, 77)\n     (b'dianwei', 80, 90, 90)]\n\n\n\n```python\nchinese = grades[:]['chinese'] \nenglish = grades[:]['english']\nmath = grades[:]['math']\ntotal = np.add(chinese,english,math)\n```\n\n\n```python\nprint(total)\n```\n\n    [131 180 185 178 170]\n\n\n\n```python\nc_a,e_a,m_a = np.average(chinese),np.average(english),np.average(math)\n```\n\n\n```python\nprint(c_a)\n```\n\n    84.8\n\n\n\n```python\n\n```\n","slug":"数据分析-numpy","published":1,"updated":"2020-06-30T12:29:17.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj5000kkztz3i776xaf","content":"<h1 id=\"数据分析—numpy\"><a href=\"#数据分析—numpy\" class=\"headerlink\" title=\"数据分析—numpy\"></a>数据分析—numpy</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建普通数组\"><a href=\"#创建普通数组\" class=\"headerlink\" title=\"创建普通数组\"></a>创建普通数组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[<span class=\"number\">1</span>,<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a.shape)</span><br><span class=\"line\">print(b.shape)</span><br><span class=\"line\">print(a.dtype)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure>\n<pre><code>(3,)\n(3, 3)\nint64\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n</code></pre><h2 id=\"创建结构数组\"><a href=\"#创建结构数组\" class=\"headerlink\" title=\"创建结构数组\"></a>创建结构数组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">personalType = np.dtype(&#123;</span><br><span class=\"line\">    <span class=\"string\">'names'</span>:[<span class=\"string\">'name'</span>,<span class=\"string\">'age'</span>,<span class=\"string\">'chinese'</span>,<span class=\"string\">'math'</span>,<span class=\"string\">'english'</span>],</span><br><span class=\"line\">    <span class=\"string\">'formats'</span>:[<span class=\"string\">'S25'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'f'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">students = np.array([(<span class=\"string\">\"huzai\"</span>,<span class=\"number\">22</span>,<span class=\"number\">99</span>,<span class=\"number\">99</span>,<span class=\"number\">99.5</span>),(<span class=\"string\">\"huzai\"</span>,<span class=\"number\">22</span>,<span class=\"number\">99</span>,<span class=\"number\">99</span>,<span class=\"number\">99.5</span>)],dtype=personalType)</span><br><span class=\"line\">age = students[:][<span class=\"string\">'age'</span>]</span><br><span class=\"line\">print(np.mean(age))</span><br></pre></td></tr></table></figure>\n<pre><code>22.0\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(students)</span><br></pre></td></tr></table></figure>\n<pre><code>[(b&apos;huzai&apos;, 22, 99, 99, 99.5) (b&apos;huzai&apos;, 22, 99, 99, 99.5)]\n</code></pre><h2 id=\"创建连续数组\"><a href=\"#创建连续数组\" class=\"headerlink\" title=\"创建连续数组\"></a>创建连续数组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>) <span class=\"comment\">#步长为2，从1开始的等差数组(不包括终值)</span></span><br><span class=\"line\">x2 = np.linspace(<span class=\"number\">1</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>) <span class=\"comment\">#将1-9分成5块，结果如上</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(x1)</span><br><span class=\"line\">print(x2)</span><br></pre></td></tr></table></figure>\n<pre><code>[1 3 5 7 9]\n[1. 3. 5. 7. 9.]\n</code></pre><h2 id=\"数组间的算数运算\"><a href=\"#数组间的算数运算\" class=\"headerlink\" title=\"数组间的算数运算\"></a>数组间的算数运算</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.add(x1,x2))</span><br><span class=\"line\">print(np.subtract(x1,x2))</span><br><span class=\"line\">print(np.multiply(x1,x2))</span><br><span class=\"line\">print(np.divide(x1,x2))</span><br></pre></td></tr></table></figure>\n<pre><code>[ 2.  6. 10. 14. 18.]\n[0. 0. 0. 0. 0.]\n[ 1.  9. 25. 49. 81.]\n[1. 1. 1. 1. 1.]\n</code></pre><h2 id=\"统计函数\"><a href=\"#统计函数\" class=\"headerlink\" title=\"统计函数\"></a>统计函数</h2><h3 id=\"数组中的最值-np-amin-amax\"><a href=\"#数组中的最值-np-amin-amax\" class=\"headerlink\" title=\"数组中的最值 np.amin()  amax()\"></a>数组中的最值 np.amin()  amax()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>],[<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>],[<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>]])</span><br><span class=\"line\">print(np.amin(a))</span><br><span class=\"line\">print(np.amin(a,<span class=\"number\">0</span>)) <span class=\"comment\">#每一列的最小值</span></span><br><span class=\"line\">print(np.amin(a,<span class=\"number\">1</span>)) <span class=\"comment\">#每行的最小值</span></span><br></pre></td></tr></table></figure>\n<pre><code>1\n[1 3 7]\n[1 2 4]\n</code></pre><h3 id=\"统计最大值与最小值之差-ptp\"><a href=\"#统计最大值与最小值之差-ptp\" class=\"headerlink\" title=\"统计最大值与最小值之差 ptp()\"></a>统计最大值与最小值之差 ptp()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.ptp(a))</span><br><span class=\"line\">print(np.ptp(a,<span class=\"number\">0</span>)) <span class=\"comment\">#每列最大值与最小值的差</span></span><br><span class=\"line\">print(np.ptp(a,<span class=\"number\">1</span>)) <span class=\"comment\">#每行最大值与最小值的差</span></span><br></pre></td></tr></table></figure>\n<pre><code>8\n[5 2 2]\n[6 6 5]\n</code></pre><h3 id=\"统计数组的百分位数-percentile-a-p-axis-a-数组名-p-代表百分比-axis代表是行还是列\"><a href=\"#统计数组的百分位数-percentile-a-p-axis-a-数组名-p-代表百分比-axis代表是行还是列\" class=\"headerlink\" title=\"统计数组的百分位数 percentile(a, p, axis)  a:数组名 p 代表百分比 axis代表是行还是列\"></a>统计数组的百分位数 percentile(a, p, axis)  a:数组名 p 代表百分比 axis代表是行还是列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.percentile(a,<span class=\"number\">50</span>))</span><br><span class=\"line\">print(np.percentile(a,<span class=\"number\">50</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">print(np.percentile(a,<span class=\"number\">50</span>,<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>5.0\n[2. 4. 8.]\n[3. 5. 6.]\n</code></pre><h3 id=\"统计数组中的中位数以及平均数-median-mean\"><a href=\"#统计数组中的中位数以及平均数-median-mean\" class=\"headerlink\" title=\"统计数组中的中位数以及平均数 median() mean()\"></a>统计数组中的中位数以及平均数 median() mean()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.median(a))</span><br><span class=\"line\">print(np.median(a,<span class=\"number\">0</span>))</span><br><span class=\"line\">print(np.median(a,<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>5.0\n[2. 4. 8.]\n[3. 5. 6.]\n</code></pre><h3 id=\"数组中的加权平均值-average-a-weights\"><a href=\"#数组中的加权平均值-average-a-weights\" class=\"headerlink\" title=\"数组中的加权平均值 average(a,weights)\"></a>数组中的加权平均值 average(a,weights)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">wts = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">print(np.average(b))</span><br><span class=\"line\">print(np.average(b,weights=wts))</span><br></pre></td></tr></table></figure>\n<pre><code>2.5\n3.0\n</code></pre><h3 id=\"统计数组中的标准差（std（））与方差（var（））\"><a href=\"#统计数组中的标准差（std（））与方差（var（））\" class=\"headerlink\" title=\"统计数组中的标准差（std（））与方差（var（））\"></a>统计数组中的标准差（std（））与方差（var（））</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.std(b))</span><br><span class=\"line\">print(np.var(b))</span><br></pre></td></tr></table></figure>\n<pre><code>1.118033988749895\n1.25\n</code></pre><h2 id=\"Numpy排序\"><a href=\"#Numpy排序\" class=\"headerlink\" title=\"Numpy排序\"></a>Numpy排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a)</span><br><span class=\"line\">print(np.sort(a))</span><br><span class=\"line\">print(np.sort(a,<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>[[1 3 7]\n [2 5 8]\n [6 4 9]]\n[[1 3 7]\n [2 5 8]\n [4 6 9]]\n[[1 3 7]\n [2 4 8]\n [6 5 9]]\n</code></pre><h1 id=\"作业题\"><a href=\"#作业题\" class=\"headerlink\" title=\"作业题\"></a>作业题</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st_type = np.dtype(&#123;</span><br><span class=\"line\">    <span class=\"string\">'names'</span>:[<span class=\"string\">'name'</span>,<span class=\"string\">'chinese'</span>,<span class=\"string\">'english'</span>,<span class=\"string\">'math'</span>],</span><br><span class=\"line\">    <span class=\"string\">'formats'</span>:[<span class=\"string\">'S25'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">grades = np.array([(<span class=\"string\">'zhangfei'</span>,<span class=\"number\">66</span>,<span class=\"number\">65</span>,<span class=\"number\">30</span>),(<span class=\"string\">'guanyu'</span>,<span class=\"number\">95</span>,<span class=\"number\">85</span>,<span class=\"number\">98</span>),(<span class=\"string\">'zhaoyun'</span>,<span class=\"number\">93</span>,<span class=\"number\">92</span>,<span class=\"number\">96</span>),(<span class=\"string\">'huangzhong'</span>,<span class=\"number\">90</span>,<span class=\"number\">88</span>,<span class=\"number\">77</span>),</span><br><span class=\"line\">                  (<span class=\"string\">'dianwei'</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">90</span>)],dtype=st_type)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(grades)</span><br></pre></td></tr></table></figure>\n<pre><code>[(b&apos;zhangfei&apos;, 66, 65, 30) (b&apos;guanyu&apos;, 95, 85, 98)\n (b&apos;zhaoyun&apos;, 93, 92, 96) (b&apos;huangzhong&apos;, 90, 88, 77)\n (b&apos;dianwei&apos;, 80, 90, 90)]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chinese = grades[:][<span class=\"string\">'chinese'</span>] </span><br><span class=\"line\">english = grades[:][<span class=\"string\">'english'</span>]</span><br><span class=\"line\">math = grades[:][<span class=\"string\">'math'</span>]</span><br><span class=\"line\">total = np.add(chinese,english,math)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(total)</span><br></pre></td></tr></table></figure>\n<pre><code>[131 180 185 178 170]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c_a,e_a,m_a = np.average(chinese),np.average(english),np.average(math)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(c_a)</span><br></pre></td></tr></table></figure>\n<pre><code>84.8\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据分析—numpy\"><a href=\"#数据分析—numpy\" class=\"headerlink\" title=\"数据分析—numpy\"></a>数据分析—numpy</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建普通数组\"><a href=\"#创建普通数组\" class=\"headerlink\" title=\"创建普通数组\"></a>创建普通数组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">b = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[<span class=\"number\">1</span>,<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a.shape)</span><br><span class=\"line\">print(b.shape)</span><br><span class=\"line\">print(a.dtype)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure>\n<pre><code>(3,)\n(3, 3)\nint64\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n</code></pre><h2 id=\"创建结构数组\"><a href=\"#创建结构数组\" class=\"headerlink\" title=\"创建结构数组\"></a>创建结构数组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">personalType = np.dtype(&#123;</span><br><span class=\"line\">    <span class=\"string\">'names'</span>:[<span class=\"string\">'name'</span>,<span class=\"string\">'age'</span>,<span class=\"string\">'chinese'</span>,<span class=\"string\">'math'</span>,<span class=\"string\">'english'</span>],</span><br><span class=\"line\">    <span class=\"string\">'formats'</span>:[<span class=\"string\">'S25'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'f'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">students = np.array([(<span class=\"string\">\"huzai\"</span>,<span class=\"number\">22</span>,<span class=\"number\">99</span>,<span class=\"number\">99</span>,<span class=\"number\">99.5</span>),(<span class=\"string\">\"huzai\"</span>,<span class=\"number\">22</span>,<span class=\"number\">99</span>,<span class=\"number\">99</span>,<span class=\"number\">99.5</span>)],dtype=personalType)</span><br><span class=\"line\">age = students[:][<span class=\"string\">'age'</span>]</span><br><span class=\"line\">print(np.mean(age))</span><br></pre></td></tr></table></figure>\n<pre><code>22.0\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(students)</span><br></pre></td></tr></table></figure>\n<pre><code>[(b&apos;huzai&apos;, 22, 99, 99, 99.5) (b&apos;huzai&apos;, 22, 99, 99, 99.5)]\n</code></pre><h2 id=\"创建连续数组\"><a href=\"#创建连续数组\" class=\"headerlink\" title=\"创建连续数组\"></a>创建连续数组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>) <span class=\"comment\">#步长为2，从1开始的等差数组(不包括终值)</span></span><br><span class=\"line\">x2 = np.linspace(<span class=\"number\">1</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>) <span class=\"comment\">#将1-9分成5块，结果如上</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(x1)</span><br><span class=\"line\">print(x2)</span><br></pre></td></tr></table></figure>\n<pre><code>[1 3 5 7 9]\n[1. 3. 5. 7. 9.]\n</code></pre><h2 id=\"数组间的算数运算\"><a href=\"#数组间的算数运算\" class=\"headerlink\" title=\"数组间的算数运算\"></a>数组间的算数运算</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.add(x1,x2))</span><br><span class=\"line\">print(np.subtract(x1,x2))</span><br><span class=\"line\">print(np.multiply(x1,x2))</span><br><span class=\"line\">print(np.divide(x1,x2))</span><br></pre></td></tr></table></figure>\n<pre><code>[ 2.  6. 10. 14. 18.]\n[0. 0. 0. 0. 0.]\n[ 1.  9. 25. 49. 81.]\n[1. 1. 1. 1. 1.]\n</code></pre><h2 id=\"统计函数\"><a href=\"#统计函数\" class=\"headerlink\" title=\"统计函数\"></a>统计函数</h2><h3 id=\"数组中的最值-np-amin-amax\"><a href=\"#数组中的最值-np-amin-amax\" class=\"headerlink\" title=\"数组中的最值 np.amin()  amax()\"></a>数组中的最值 np.amin()  amax()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>],[<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>],[<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>]])</span><br><span class=\"line\">print(np.amin(a))</span><br><span class=\"line\">print(np.amin(a,<span class=\"number\">0</span>)) <span class=\"comment\">#每一列的最小值</span></span><br><span class=\"line\">print(np.amin(a,<span class=\"number\">1</span>)) <span class=\"comment\">#每行的最小值</span></span><br></pre></td></tr></table></figure>\n<pre><code>1\n[1 3 7]\n[1 2 4]\n</code></pre><h3 id=\"统计最大值与最小值之差-ptp\"><a href=\"#统计最大值与最小值之差-ptp\" class=\"headerlink\" title=\"统计最大值与最小值之差 ptp()\"></a>统计最大值与最小值之差 ptp()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.ptp(a))</span><br><span class=\"line\">print(np.ptp(a,<span class=\"number\">0</span>)) <span class=\"comment\">#每列最大值与最小值的差</span></span><br><span class=\"line\">print(np.ptp(a,<span class=\"number\">1</span>)) <span class=\"comment\">#每行最大值与最小值的差</span></span><br></pre></td></tr></table></figure>\n<pre><code>8\n[5 2 2]\n[6 6 5]\n</code></pre><h3 id=\"统计数组的百分位数-percentile-a-p-axis-a-数组名-p-代表百分比-axis代表是行还是列\"><a href=\"#统计数组的百分位数-percentile-a-p-axis-a-数组名-p-代表百分比-axis代表是行还是列\" class=\"headerlink\" title=\"统计数组的百分位数 percentile(a, p, axis)  a:数组名 p 代表百分比 axis代表是行还是列\"></a>统计数组的百分位数 percentile(a, p, axis)  a:数组名 p 代表百分比 axis代表是行还是列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.percentile(a,<span class=\"number\">50</span>))</span><br><span class=\"line\">print(np.percentile(a,<span class=\"number\">50</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">print(np.percentile(a,<span class=\"number\">50</span>,<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>5.0\n[2. 4. 8.]\n[3. 5. 6.]\n</code></pre><h3 id=\"统计数组中的中位数以及平均数-median-mean\"><a href=\"#统计数组中的中位数以及平均数-median-mean\" class=\"headerlink\" title=\"统计数组中的中位数以及平均数 median() mean()\"></a>统计数组中的中位数以及平均数 median() mean()</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.median(a))</span><br><span class=\"line\">print(np.median(a,<span class=\"number\">0</span>))</span><br><span class=\"line\">print(np.median(a,<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>5.0\n[2. 4. 8.]\n[3. 5. 6.]\n</code></pre><h3 id=\"数组中的加权平均值-average-a-weights\"><a href=\"#数组中的加权平均值-average-a-weights\" class=\"headerlink\" title=\"数组中的加权平均值 average(a,weights)\"></a>数组中的加权平均值 average(a,weights)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">wts = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">print(np.average(b))</span><br><span class=\"line\">print(np.average(b,weights=wts))</span><br></pre></td></tr></table></figure>\n<pre><code>2.5\n3.0\n</code></pre><h3 id=\"统计数组中的标准差（std（））与方差（var（））\"><a href=\"#统计数组中的标准差（std（））与方差（var（））\" class=\"headerlink\" title=\"统计数组中的标准差（std（））与方差（var（））\"></a>统计数组中的标准差（std（））与方差（var（））</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(np.std(b))</span><br><span class=\"line\">print(np.var(b))</span><br></pre></td></tr></table></figure>\n<pre><code>1.118033988749895\n1.25\n</code></pre><h2 id=\"Numpy排序\"><a href=\"#Numpy排序\" class=\"headerlink\" title=\"Numpy排序\"></a>Numpy排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a)</span><br><span class=\"line\">print(np.sort(a))</span><br><span class=\"line\">print(np.sort(a,<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>[[1 3 7]\n [2 5 8]\n [6 4 9]]\n[[1 3 7]\n [2 5 8]\n [4 6 9]]\n[[1 3 7]\n [2 4 8]\n [6 5 9]]\n</code></pre><h1 id=\"作业题\"><a href=\"#作业题\" class=\"headerlink\" title=\"作业题\"></a>作业题</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st_type = np.dtype(&#123;</span><br><span class=\"line\">    <span class=\"string\">'names'</span>:[<span class=\"string\">'name'</span>,<span class=\"string\">'chinese'</span>,<span class=\"string\">'english'</span>,<span class=\"string\">'math'</span>],</span><br><span class=\"line\">    <span class=\"string\">'formats'</span>:[<span class=\"string\">'S25'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'i'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">grades = np.array([(<span class=\"string\">'zhangfei'</span>,<span class=\"number\">66</span>,<span class=\"number\">65</span>,<span class=\"number\">30</span>),(<span class=\"string\">'guanyu'</span>,<span class=\"number\">95</span>,<span class=\"number\">85</span>,<span class=\"number\">98</span>),(<span class=\"string\">'zhaoyun'</span>,<span class=\"number\">93</span>,<span class=\"number\">92</span>,<span class=\"number\">96</span>),(<span class=\"string\">'huangzhong'</span>,<span class=\"number\">90</span>,<span class=\"number\">88</span>,<span class=\"number\">77</span>),</span><br><span class=\"line\">                  (<span class=\"string\">'dianwei'</span>,<span class=\"number\">80</span>,<span class=\"number\">90</span>,<span class=\"number\">90</span>)],dtype=st_type)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(grades)</span><br></pre></td></tr></table></figure>\n<pre><code>[(b&apos;zhangfei&apos;, 66, 65, 30) (b&apos;guanyu&apos;, 95, 85, 98)\n (b&apos;zhaoyun&apos;, 93, 92, 96) (b&apos;huangzhong&apos;, 90, 88, 77)\n (b&apos;dianwei&apos;, 80, 90, 90)]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chinese = grades[:][<span class=\"string\">'chinese'</span>] </span><br><span class=\"line\">english = grades[:][<span class=\"string\">'english'</span>]</span><br><span class=\"line\">math = grades[:][<span class=\"string\">'math'</span>]</span><br><span class=\"line\">total = np.add(chinese,english,math)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(total)</span><br></pre></td></tr></table></figure>\n<pre><code>[131 180 185 178 170]\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c_a,e_a,m_a = np.average(chinese),np.average(english),np.average(math)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(c_a)</span><br></pre></td></tr></table></figure>\n<pre><code>84.8\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"数据分析----数据清洗","date":"2019-01-20T00:03:42.000Z","_content":"\n# 数据分析----数据清洗\n\n## 一、导入数据\n\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series,DataFrame\nimport xlrd\n```\n\n\n```python\ndf = DataFrame(pd.read_excel('datas/grades.xlsx')) \nprint(df)\n```\n\n       Unnamed: 0  Unnamed: 1  Unnamed: 2  Unnamed: 3\n    0         蒋广佳        43.0        69.0        61.0\n    1          廖菲        80.0        64.0        62.0\n    2         沈秀玲        68.0        74.0        98.0\n    3          韦丹        48.0        53.0        64.0\n    4         张梦雅        72.0        73.0        96.0\n    5         赵雅欣        60.0         NaN        70.0\n    6         曹海广        74.0        60.0        20.0\n    7         陈泽灿        38.0        21.0        92.0\n    8         NaN        88.0        67.0        84.0\n    9         高海亮        86.0        74.0        96.0\n    10        顾晓冬        84.0        60.0        90.0\n    11        侯星宇        64.0       111.0         NaN\n    12        江宜哲        60.0        33.0        70.0\n    13        NaN         NaN         NaN         NaN\n    14        梁杨杨        68.0        54.0        94.0\n    15         刘辉         NaN        63.0        98.0\n    16        罗嘉豪        39.0        44.0        56.0\n    17        施亚君        90.0        63.0        90.0\n    18         孙添        64.0        63.0        78.0\n    19         王杰        74.0         NaN        76.0\n    20         王泽        52.0        48.0        94.0\n    21        NaN        60.0        69.0        74.0\n    22        杨福程        70.0        49.0        76.0\n    23        尤澳晨        91.0        67.0        86.0\n    24         翟佳        78.0        73.0        88.0\n    25         张旭       100.0        60.0        98.0\n    26        支星哲        80.0        63.0       100.0\n    27        邹湘涛        54.0        40.0        90.0\n\n\n- 我们可以看见上面的数据是缺少标注的，列名缺少标注；并且有很多是空值，因此我们要对数据进行清洗，提高数据的质量。在这里数据清洗有四个要点简称“完全合一”\n   - **完**整性：单条数据是否完整，统计的字段是否完善。\n   - **全**面性：观察某一列的全部数值，选中一列，我们可以看到最大值，最小值，平均值。我们可以通过常识判断数据是否合理，比如：数据定义、单位标识、数值本身。\n   - **合**法性：数据的类型、内容、大小的合法性。比如数据中存在非ASCII字符，性别存在未知，总分超过100等。\n   - 唯**一**性：数据是否存在重复记录，由于数据来源于不同的渠道，重复的情况是非常常见的。行数据、列数据都需要是唯一的。\n- 事实上数据清洗的标准有差不多七八条，有兴趣的可以了解一下，这里归纳为“完全合一”四条，按照这四条基本上可以解决数据清洗中的大部分问题，使得数据**标准、干净、连续**。\n\n## 二、开始数据清洗\n\n\n### 1、完整性\n\n### problem 1:空行\n\n- solution: 删除\n\n\n```python\ndf.dropna(how=\"all\",inplace=True)\n```\n\n### problem 2:缺失值\n\n- solution：\n   - 删除：删除数据缺失的记录\n   - 均值：使用当前列的均值\n   - 高频：使用当前列出现平率最高的数据\n- 首先我们先把列的标注补上\n\n\n```python\ndf = df.rename(columns={'Unnamed: 0':'index','Unnamed: 1':'math','Unnamed: 2':'english','Unnamed: 3':'c++'})\n```\n\n\n```python\ndf = df.drop(columns='index')\n```\n\n\n```python\nprint(df)\n```\n\n         math  english    c++\n    0    43.0     69.0   61.0\n    1    80.0     64.0   62.0\n    2    68.0     74.0   98.0\n    3    48.0     53.0   64.0\n    4    72.0     73.0   96.0\n    5    60.0      NaN   70.0\n    6    74.0     60.0   20.0\n    7    38.0     21.0   92.0\n    8    88.0     67.0   84.0\n    9    86.0     74.0   96.0\n    10   84.0     60.0   90.0\n    11   64.0    111.0    NaN\n    12   60.0     33.0   70.0\n    14   68.0     54.0   94.0\n    15    NaN     63.0   98.0\n    16   39.0     44.0   56.0\n    17   90.0     63.0   90.0\n    18   64.0     63.0   78.0\n    19   74.0      NaN   76.0\n    20   52.0     48.0   94.0\n    21   60.0     69.0   74.0\n    22   70.0     49.0   76.0\n    23   91.0     67.0   86.0\n    24   78.0     73.0   88.0\n    25  100.0     60.0   98.0\n    26   80.0     63.0  100.0\n    27   54.0     40.0   90.0\n\n\n- 现在我们想对df['math']中缺失的值用平均值代替\n\n\n```python\ndf['math'].fillna(df['math'].mean(),inplace=True)\n```\n\n\n```python\nprint(df)\n```\n\n              math  english    c++\n    0    43.000000     69.0   61.0\n    1    80.000000     64.0   62.0\n    2    68.000000     74.0   98.0\n    3    48.000000     53.0   64.0\n    4    72.000000     73.0   96.0\n    5    60.000000      NaN   70.0\n    6    74.000000     60.0   20.0\n    7    38.000000     21.0   92.0\n    8    88.000000     67.0   84.0\n    9    86.000000     74.0   96.0\n    10   84.000000     60.0   90.0\n    11   64.000000    111.0    NaN\n    12   60.000000     33.0   70.0\n    13   68.653846      NaN    NaN\n    14   68.000000     54.0   94.0\n    15   68.653846     63.0   98.0\n    16   39.000000     44.0   56.0\n    17   90.000000     63.0   90.0\n    18   64.000000     63.0   78.0\n    19   74.000000      NaN   76.0\n    20   52.000000     48.0   94.0\n    21   60.000000     69.0   74.0\n    22   70.000000     49.0   76.0\n    23   91.000000     67.0   86.0\n    24   78.000000     73.0   88.0\n    25  100.000000     60.0   98.0\n    26   80.000000     63.0  100.0\n    27   54.000000     40.0   90.0\n\n\n- 如果想用最高频率的数据对english进行填充，可以通过value_counts获取math字段最高频次english_maxf,然后对其进行填充\n\n\n```python\nenglish_maxf = df['english'].value_counts().index[0]\n```\n\n\n```python\ndf['english'].fillna(english_maxf,inplace=True)\n```\n\n\n```python\nprint(df)\n```\n\n              math  english    c++\n    0    43.000000     69.0   61.0\n    1    80.000000     64.0   62.0\n    2    68.000000     74.0   98.0\n    3    48.000000     53.0   64.0\n    4    72.000000     73.0   96.0\n    5    60.000000     63.0   70.0\n    6    74.000000     60.0   20.0\n    7    38.000000     21.0   92.0\n    8    88.000000     67.0   84.0\n    9    86.000000     74.0   96.0\n    10   84.000000     60.0   90.0\n    11   64.000000    111.0    NaN\n    12   60.000000     33.0   70.0\n    13   68.653846     63.0    NaN\n    14   68.000000     54.0   94.0\n    15   68.653846     63.0   98.0\n    16   39.000000     44.0   56.0\n    17   90.000000     63.0   90.0\n    18   64.000000     63.0   78.0\n    19   74.000000     63.0   76.0\n    20   52.000000     48.0   94.0\n    21   60.000000     69.0   74.0\n    22   70.000000     49.0   76.0\n    23   91.000000     67.0   86.0\n    24   78.000000     73.0   88.0\n    25  100.000000     60.0   98.0\n    26   80.000000     63.0  100.0\n    27   54.000000     40.0   90.0\n\n\n### 2、全面性\n\n### problem：列数据单位不统一\n\nsolution：将不同的单位的找出来，将其进行迭代替换，比如说将榜（lbs）转化为千克（kgs）\n\n\n```python\n# 获取 weight 数据列中单位为 lbs 的数据\nrows_with_lbs = df['weight'].str.contains('lbs').fillna(False)\nprint df[rows_with_lbs]\n# 将 lbs 转换为 kgs, 2.2lbs=1kgs\nfor i,lbs_row in df[rows_with_lbs].iterrows():\n    # 截取从头开始到倒数第三个字符之前，即去掉 lbs。\n    weight = int(float(lbs_row['weight'][:-3])/2.2)\n    df.at[i,'weight'] = '{}kgs'.format(weight) \n```\n\n### 3、合理性\n\n### problem:非ASCII字符\n\nsolution:对于非ASCII字符，我们可以采用删除或者替换的方式，我们直接选择删除\n\n\n```python\ndf['name'].replace({r'[^\\x00-\\x7f]+':''},regex=True,inplace=True)\n```\n\n\n\n\n\n### 4、唯一性\n\n### problem1：一列有多个参数\n\nsolution：比如英文名字，是有两部分组成的，包含两个参数Firstname、Lastnamr，我们需要将name一列拆分为Firstname和Lastname两个字段，我们可以采用split方法，对其进行切分\n\n\n```python\ndf['First_namr','Last_name'] = df['name'].str.split(expand=True)\ndf.drop('name',axis=1,inplace=True)\n```\n\n### problem2:重读数据\n\nsolution：我们校验数据是否存在重复数据，如果有重复数据，如果就用pandas提供的drop_duplicates()来删除重复数据。\n\n\n```python\ndf.drop_duplicates(['First_name','Last_name'],inplace=True)\n```\n","source":"_posts/数据分析-数据清洗.md","raw":"---\ntitle: 数据分析----数据清洗\ndate: 2019-01-20 08:03:42\ntags: 数据分析\n---\n\n# 数据分析----数据清洗\n\n## 一、导入数据\n\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series,DataFrame\nimport xlrd\n```\n\n\n```python\ndf = DataFrame(pd.read_excel('datas/grades.xlsx')) \nprint(df)\n```\n\n       Unnamed: 0  Unnamed: 1  Unnamed: 2  Unnamed: 3\n    0         蒋广佳        43.0        69.0        61.0\n    1          廖菲        80.0        64.0        62.0\n    2         沈秀玲        68.0        74.0        98.0\n    3          韦丹        48.0        53.0        64.0\n    4         张梦雅        72.0        73.0        96.0\n    5         赵雅欣        60.0         NaN        70.0\n    6         曹海广        74.0        60.0        20.0\n    7         陈泽灿        38.0        21.0        92.0\n    8         NaN        88.0        67.0        84.0\n    9         高海亮        86.0        74.0        96.0\n    10        顾晓冬        84.0        60.0        90.0\n    11        侯星宇        64.0       111.0         NaN\n    12        江宜哲        60.0        33.0        70.0\n    13        NaN         NaN         NaN         NaN\n    14        梁杨杨        68.0        54.0        94.0\n    15         刘辉         NaN        63.0        98.0\n    16        罗嘉豪        39.0        44.0        56.0\n    17        施亚君        90.0        63.0        90.0\n    18         孙添        64.0        63.0        78.0\n    19         王杰        74.0         NaN        76.0\n    20         王泽        52.0        48.0        94.0\n    21        NaN        60.0        69.0        74.0\n    22        杨福程        70.0        49.0        76.0\n    23        尤澳晨        91.0        67.0        86.0\n    24         翟佳        78.0        73.0        88.0\n    25         张旭       100.0        60.0        98.0\n    26        支星哲        80.0        63.0       100.0\n    27        邹湘涛        54.0        40.0        90.0\n\n\n- 我们可以看见上面的数据是缺少标注的，列名缺少标注；并且有很多是空值，因此我们要对数据进行清洗，提高数据的质量。在这里数据清洗有四个要点简称“完全合一”\n   - **完**整性：单条数据是否完整，统计的字段是否完善。\n   - **全**面性：观察某一列的全部数值，选中一列，我们可以看到最大值，最小值，平均值。我们可以通过常识判断数据是否合理，比如：数据定义、单位标识、数值本身。\n   - **合**法性：数据的类型、内容、大小的合法性。比如数据中存在非ASCII字符，性别存在未知，总分超过100等。\n   - 唯**一**性：数据是否存在重复记录，由于数据来源于不同的渠道，重复的情况是非常常见的。行数据、列数据都需要是唯一的。\n- 事实上数据清洗的标准有差不多七八条，有兴趣的可以了解一下，这里归纳为“完全合一”四条，按照这四条基本上可以解决数据清洗中的大部分问题，使得数据**标准、干净、连续**。\n\n## 二、开始数据清洗\n\n\n### 1、完整性\n\n### problem 1:空行\n\n- solution: 删除\n\n\n```python\ndf.dropna(how=\"all\",inplace=True)\n```\n\n### problem 2:缺失值\n\n- solution：\n   - 删除：删除数据缺失的记录\n   - 均值：使用当前列的均值\n   - 高频：使用当前列出现平率最高的数据\n- 首先我们先把列的标注补上\n\n\n```python\ndf = df.rename(columns={'Unnamed: 0':'index','Unnamed: 1':'math','Unnamed: 2':'english','Unnamed: 3':'c++'})\n```\n\n\n```python\ndf = df.drop(columns='index')\n```\n\n\n```python\nprint(df)\n```\n\n         math  english    c++\n    0    43.0     69.0   61.0\n    1    80.0     64.0   62.0\n    2    68.0     74.0   98.0\n    3    48.0     53.0   64.0\n    4    72.0     73.0   96.0\n    5    60.0      NaN   70.0\n    6    74.0     60.0   20.0\n    7    38.0     21.0   92.0\n    8    88.0     67.0   84.0\n    9    86.0     74.0   96.0\n    10   84.0     60.0   90.0\n    11   64.0    111.0    NaN\n    12   60.0     33.0   70.0\n    14   68.0     54.0   94.0\n    15    NaN     63.0   98.0\n    16   39.0     44.0   56.0\n    17   90.0     63.0   90.0\n    18   64.0     63.0   78.0\n    19   74.0      NaN   76.0\n    20   52.0     48.0   94.0\n    21   60.0     69.0   74.0\n    22   70.0     49.0   76.0\n    23   91.0     67.0   86.0\n    24   78.0     73.0   88.0\n    25  100.0     60.0   98.0\n    26   80.0     63.0  100.0\n    27   54.0     40.0   90.0\n\n\n- 现在我们想对df['math']中缺失的值用平均值代替\n\n\n```python\ndf['math'].fillna(df['math'].mean(),inplace=True)\n```\n\n\n```python\nprint(df)\n```\n\n              math  english    c++\n    0    43.000000     69.0   61.0\n    1    80.000000     64.0   62.0\n    2    68.000000     74.0   98.0\n    3    48.000000     53.0   64.0\n    4    72.000000     73.0   96.0\n    5    60.000000      NaN   70.0\n    6    74.000000     60.0   20.0\n    7    38.000000     21.0   92.0\n    8    88.000000     67.0   84.0\n    9    86.000000     74.0   96.0\n    10   84.000000     60.0   90.0\n    11   64.000000    111.0    NaN\n    12   60.000000     33.0   70.0\n    13   68.653846      NaN    NaN\n    14   68.000000     54.0   94.0\n    15   68.653846     63.0   98.0\n    16   39.000000     44.0   56.0\n    17   90.000000     63.0   90.0\n    18   64.000000     63.0   78.0\n    19   74.000000      NaN   76.0\n    20   52.000000     48.0   94.0\n    21   60.000000     69.0   74.0\n    22   70.000000     49.0   76.0\n    23   91.000000     67.0   86.0\n    24   78.000000     73.0   88.0\n    25  100.000000     60.0   98.0\n    26   80.000000     63.0  100.0\n    27   54.000000     40.0   90.0\n\n\n- 如果想用最高频率的数据对english进行填充，可以通过value_counts获取math字段最高频次english_maxf,然后对其进行填充\n\n\n```python\nenglish_maxf = df['english'].value_counts().index[0]\n```\n\n\n```python\ndf['english'].fillna(english_maxf,inplace=True)\n```\n\n\n```python\nprint(df)\n```\n\n              math  english    c++\n    0    43.000000     69.0   61.0\n    1    80.000000     64.0   62.0\n    2    68.000000     74.0   98.0\n    3    48.000000     53.0   64.0\n    4    72.000000     73.0   96.0\n    5    60.000000     63.0   70.0\n    6    74.000000     60.0   20.0\n    7    38.000000     21.0   92.0\n    8    88.000000     67.0   84.0\n    9    86.000000     74.0   96.0\n    10   84.000000     60.0   90.0\n    11   64.000000    111.0    NaN\n    12   60.000000     33.0   70.0\n    13   68.653846     63.0    NaN\n    14   68.000000     54.0   94.0\n    15   68.653846     63.0   98.0\n    16   39.000000     44.0   56.0\n    17   90.000000     63.0   90.0\n    18   64.000000     63.0   78.0\n    19   74.000000     63.0   76.0\n    20   52.000000     48.0   94.0\n    21   60.000000     69.0   74.0\n    22   70.000000     49.0   76.0\n    23   91.000000     67.0   86.0\n    24   78.000000     73.0   88.0\n    25  100.000000     60.0   98.0\n    26   80.000000     63.0  100.0\n    27   54.000000     40.0   90.0\n\n\n### 2、全面性\n\n### problem：列数据单位不统一\n\nsolution：将不同的单位的找出来，将其进行迭代替换，比如说将榜（lbs）转化为千克（kgs）\n\n\n```python\n# 获取 weight 数据列中单位为 lbs 的数据\nrows_with_lbs = df['weight'].str.contains('lbs').fillna(False)\nprint df[rows_with_lbs]\n# 将 lbs 转换为 kgs, 2.2lbs=1kgs\nfor i,lbs_row in df[rows_with_lbs].iterrows():\n    # 截取从头开始到倒数第三个字符之前，即去掉 lbs。\n    weight = int(float(lbs_row['weight'][:-3])/2.2)\n    df.at[i,'weight'] = '{}kgs'.format(weight) \n```\n\n### 3、合理性\n\n### problem:非ASCII字符\n\nsolution:对于非ASCII字符，我们可以采用删除或者替换的方式，我们直接选择删除\n\n\n```python\ndf['name'].replace({r'[^\\x00-\\x7f]+':''},regex=True,inplace=True)\n```\n\n\n\n\n\n### 4、唯一性\n\n### problem1：一列有多个参数\n\nsolution：比如英文名字，是有两部分组成的，包含两个参数Firstname、Lastnamr，我们需要将name一列拆分为Firstname和Lastname两个字段，我们可以采用split方法，对其进行切分\n\n\n```python\ndf['First_namr','Last_name'] = df['name'].str.split(expand=True)\ndf.drop('name',axis=1,inplace=True)\n```\n\n### problem2:重读数据\n\nsolution：我们校验数据是否存在重复数据，如果有重复数据，如果就用pandas提供的drop_duplicates()来删除重复数据。\n\n\n```python\ndf.drop_duplicates(['First_name','Last_name'],inplace=True)\n```\n","slug":"数据分析-数据清洗","published":1,"updated":"2020-06-30T12:29:17.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj6000mkztz537g99o1","content":"<h1 id=\"数据分析—-数据清洗\"><a href=\"#数据分析—-数据清洗\" class=\"headerlink\" title=\"数据分析—-数据清洗\"></a>数据分析—-数据清洗</h1><h2 id=\"一、导入数据\"><a href=\"#一、导入数据\" class=\"headerlink\" title=\"一、导入数据\"></a>一、导入数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> Series,DataFrame</span><br><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = DataFrame(pd.read_excel(<span class=\"string\">'datas/grades.xlsx'</span>)) </span><br><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>   Unnamed: 0  Unnamed: 1  Unnamed: 2  Unnamed: 3\n0         蒋广佳        43.0        69.0        61.0\n1          廖菲        80.0        64.0        62.0\n2         沈秀玲        68.0        74.0        98.0\n3          韦丹        48.0        53.0        64.0\n4         张梦雅        72.0        73.0        96.0\n5         赵雅欣        60.0         NaN        70.0\n6         曹海广        74.0        60.0        20.0\n7         陈泽灿        38.0        21.0        92.0\n8         NaN        88.0        67.0        84.0\n9         高海亮        86.0        74.0        96.0\n10        顾晓冬        84.0        60.0        90.0\n11        侯星宇        64.0       111.0         NaN\n12        江宜哲        60.0        33.0        70.0\n13        NaN         NaN         NaN         NaN\n14        梁杨杨        68.0        54.0        94.0\n15         刘辉         NaN        63.0        98.0\n16        罗嘉豪        39.0        44.0        56.0\n17        施亚君        90.0        63.0        90.0\n18         孙添        64.0        63.0        78.0\n19         王杰        74.0         NaN        76.0\n20         王泽        52.0        48.0        94.0\n21        NaN        60.0        69.0        74.0\n22        杨福程        70.0        49.0        76.0\n23        尤澳晨        91.0        67.0        86.0\n24         翟佳        78.0        73.0        88.0\n25         张旭       100.0        60.0        98.0\n26        支星哲        80.0        63.0       100.0\n27        邹湘涛        54.0        40.0        90.0\n</code></pre><ul>\n<li>我们可以看见上面的数据是缺少标注的，列名缺少标注；并且有很多是空值，因此我们要对数据进行清洗，提高数据的质量。在这里数据清洗有四个要点简称“完全合一”<ul>\n<li><strong>完</strong>整性：单条数据是否完整，统计的字段是否完善。</li>\n<li><strong>全</strong>面性：观察某一列的全部数值，选中一列，我们可以看到最大值，最小值，平均值。我们可以通过常识判断数据是否合理，比如：数据定义、单位标识、数值本身。</li>\n<li><strong>合</strong>法性：数据的类型、内容、大小的合法性。比如数据中存在非ASCII字符，性别存在未知，总分超过100等。</li>\n<li>唯<strong>一</strong>性：数据是否存在重复记录，由于数据来源于不同的渠道，重复的情况是非常常见的。行数据、列数据都需要是唯一的。</li>\n</ul>\n</li>\n<li>事实上数据清洗的标准有差不多七八条，有兴趣的可以了解一下，这里归纳为“完全合一”四条，按照这四条基本上可以解决数据清洗中的大部分问题，使得数据<strong>标准、干净、连续</strong>。</li>\n</ul>\n<h2 id=\"二、开始数据清洗\"><a href=\"#二、开始数据清洗\" class=\"headerlink\" title=\"二、开始数据清洗\"></a>二、开始数据清洗</h2><h3 id=\"1、完整性\"><a href=\"#1、完整性\" class=\"headerlink\" title=\"1、完整性\"></a>1、完整性</h3><h3 id=\"problem-1-空行\"><a href=\"#problem-1-空行\" class=\"headerlink\" title=\"problem 1:空行\"></a>problem 1:空行</h3><ul>\n<li>solution: 删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.dropna(how=<span class=\"string\">\"all\"</span>,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"problem-2-缺失值\"><a href=\"#problem-2-缺失值\" class=\"headerlink\" title=\"problem 2:缺失值\"></a>problem 2:缺失值</h3><ul>\n<li>solution：<ul>\n<li>删除：删除数据缺失的记录</li>\n<li>均值：使用当前列的均值</li>\n<li>高频：使用当前列出现平率最高的数据</li>\n</ul>\n</li>\n<li>首先我们先把列的标注补上</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = df.rename(columns=&#123;<span class=\"string\">'Unnamed: 0'</span>:<span class=\"string\">'index'</span>,<span class=\"string\">'Unnamed: 1'</span>:<span class=\"string\">'math'</span>,<span class=\"string\">'Unnamed: 2'</span>:<span class=\"string\">'english'</span>,<span class=\"string\">'Unnamed: 3'</span>:<span class=\"string\">'c++'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = df.drop(columns=<span class=\"string\">'index'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>     math  english    c++\n0    43.0     69.0   61.0\n1    80.0     64.0   62.0\n2    68.0     74.0   98.0\n3    48.0     53.0   64.0\n4    72.0     73.0   96.0\n5    60.0      NaN   70.0\n6    74.0     60.0   20.0\n7    38.0     21.0   92.0\n8    88.0     67.0   84.0\n9    86.0     74.0   96.0\n10   84.0     60.0   90.0\n11   64.0    111.0    NaN\n12   60.0     33.0   70.0\n14   68.0     54.0   94.0\n15    NaN     63.0   98.0\n16   39.0     44.0   56.0\n17   90.0     63.0   90.0\n18   64.0     63.0   78.0\n19   74.0      NaN   76.0\n20   52.0     48.0   94.0\n21   60.0     69.0   74.0\n22   70.0     49.0   76.0\n23   91.0     67.0   86.0\n24   78.0     73.0   88.0\n25  100.0     60.0   98.0\n26   80.0     63.0  100.0\n27   54.0     40.0   90.0\n</code></pre><ul>\n<li>现在我们想对df[‘math’]中缺失的值用平均值代替</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'math'</span>].fillna(df[<span class=\"string\">'math'</span>].mean(),inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>          math  english    c++\n0    43.000000     69.0   61.0\n1    80.000000     64.0   62.0\n2    68.000000     74.0   98.0\n3    48.000000     53.0   64.0\n4    72.000000     73.0   96.0\n5    60.000000      NaN   70.0\n6    74.000000     60.0   20.0\n7    38.000000     21.0   92.0\n8    88.000000     67.0   84.0\n9    86.000000     74.0   96.0\n10   84.000000     60.0   90.0\n11   64.000000    111.0    NaN\n12   60.000000     33.0   70.0\n13   68.653846      NaN    NaN\n14   68.000000     54.0   94.0\n15   68.653846     63.0   98.0\n16   39.000000     44.0   56.0\n17   90.000000     63.0   90.0\n18   64.000000     63.0   78.0\n19   74.000000      NaN   76.0\n20   52.000000     48.0   94.0\n21   60.000000     69.0   74.0\n22   70.000000     49.0   76.0\n23   91.000000     67.0   86.0\n24   78.000000     73.0   88.0\n25  100.000000     60.0   98.0\n26   80.000000     63.0  100.0\n27   54.000000     40.0   90.0\n</code></pre><ul>\n<li>如果想用最高频率的数据对english进行填充，可以通过value_counts获取math字段最高频次english_maxf,然后对其进行填充</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">english_maxf = df[<span class=\"string\">'english'</span>].value_counts().index[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'english'</span>].fillna(english_maxf,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>          math  english    c++\n0    43.000000     69.0   61.0\n1    80.000000     64.0   62.0\n2    68.000000     74.0   98.0\n3    48.000000     53.0   64.0\n4    72.000000     73.0   96.0\n5    60.000000     63.0   70.0\n6    74.000000     60.0   20.0\n7    38.000000     21.0   92.0\n8    88.000000     67.0   84.0\n9    86.000000     74.0   96.0\n10   84.000000     60.0   90.0\n11   64.000000    111.0    NaN\n12   60.000000     33.0   70.0\n13   68.653846     63.0    NaN\n14   68.000000     54.0   94.0\n15   68.653846     63.0   98.0\n16   39.000000     44.0   56.0\n17   90.000000     63.0   90.0\n18   64.000000     63.0   78.0\n19   74.000000     63.0   76.0\n20   52.000000     48.0   94.0\n21   60.000000     69.0   74.0\n22   70.000000     49.0   76.0\n23   91.000000     67.0   86.0\n24   78.000000     73.0   88.0\n25  100.000000     60.0   98.0\n26   80.000000     63.0  100.0\n27   54.000000     40.0   90.0\n</code></pre><h3 id=\"2、全面性\"><a href=\"#2、全面性\" class=\"headerlink\" title=\"2、全面性\"></a>2、全面性</h3><h3 id=\"problem：列数据单位不统一\"><a href=\"#problem：列数据单位不统一\" class=\"headerlink\" title=\"problem：列数据单位不统一\"></a>problem：列数据单位不统一</h3><p>solution：将不同的单位的找出来，将其进行迭代替换，比如说将榜（lbs）转化为千克（kgs）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取 weight 数据列中单位为 lbs 的数据</span></span><br><span class=\"line\">rows_with_lbs = df[<span class=\"string\">'weight'</span>].str.contains(<span class=\"string\">'lbs'</span>).fillna(<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> df[rows_with_lbs]</span><br><span class=\"line\"><span class=\"comment\"># 将 lbs 转换为 kgs, 2.2lbs=1kgs</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,lbs_row <span class=\"keyword\">in</span> df[rows_with_lbs].iterrows():</span><br><span class=\"line\">    <span class=\"comment\"># 截取从头开始到倒数第三个字符之前，即去掉 lbs。</span></span><br><span class=\"line\">    weight = int(float(lbs_row[<span class=\"string\">'weight'</span>][:<span class=\"number\">-3</span>])/<span class=\"number\">2.2</span>)</span><br><span class=\"line\">    df.at[i,<span class=\"string\">'weight'</span>] = <span class=\"string\">'&#123;&#125;kgs'</span>.format(weight)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、合理性\"><a href=\"#3、合理性\" class=\"headerlink\" title=\"3、合理性\"></a>3、合理性</h3><h3 id=\"problem-非ASCII字符\"><a href=\"#problem-非ASCII字符\" class=\"headerlink\" title=\"problem:非ASCII字符\"></a>problem:非ASCII字符</h3><p>solution:对于非ASCII字符，我们可以采用删除或者替换的方式，我们直接选择删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'name'</span>].replace(&#123;<span class=\"string\">r'[^\\x00-\\x7f]+'</span>:<span class=\"string\">''</span>&#125;,regex=<span class=\"keyword\">True</span>,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、唯一性\"><a href=\"#4、唯一性\" class=\"headerlink\" title=\"4、唯一性\"></a>4、唯一性</h3><h3 id=\"problem1：一列有多个参数\"><a href=\"#problem1：一列有多个参数\" class=\"headerlink\" title=\"problem1：一列有多个参数\"></a>problem1：一列有多个参数</h3><p>solution：比如英文名字，是有两部分组成的，包含两个参数Firstname、Lastnamr，我们需要将name一列拆分为Firstname和Lastname两个字段，我们可以采用split方法，对其进行切分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'First_namr'</span>,<span class=\"string\">'Last_name'</span>] = df[<span class=\"string\">'name'</span>].str.split(expand=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">df.drop(<span class=\"string\">'name'</span>,axis=<span class=\"number\">1</span>,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"problem2-重读数据\"><a href=\"#problem2-重读数据\" class=\"headerlink\" title=\"problem2:重读数据\"></a>problem2:重读数据</h3><p>solution：我们校验数据是否存在重复数据，如果有重复数据，如果就用pandas提供的drop_duplicates()来删除重复数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop_duplicates([<span class=\"string\">'First_name'</span>,<span class=\"string\">'Last_name'</span>],inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据分析—-数据清洗\"><a href=\"#数据分析—-数据清洗\" class=\"headerlink\" title=\"数据分析—-数据清洗\"></a>数据分析—-数据清洗</h1><h2 id=\"一、导入数据\"><a href=\"#一、导入数据\" class=\"headerlink\" title=\"一、导入数据\"></a>一、导入数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> Series,DataFrame</span><br><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = DataFrame(pd.read_excel(<span class=\"string\">'datas/grades.xlsx'</span>)) </span><br><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>   Unnamed: 0  Unnamed: 1  Unnamed: 2  Unnamed: 3\n0         蒋广佳        43.0        69.0        61.0\n1          廖菲        80.0        64.0        62.0\n2         沈秀玲        68.0        74.0        98.0\n3          韦丹        48.0        53.0        64.0\n4         张梦雅        72.0        73.0        96.0\n5         赵雅欣        60.0         NaN        70.0\n6         曹海广        74.0        60.0        20.0\n7         陈泽灿        38.0        21.0        92.0\n8         NaN        88.0        67.0        84.0\n9         高海亮        86.0        74.0        96.0\n10        顾晓冬        84.0        60.0        90.0\n11        侯星宇        64.0       111.0         NaN\n12        江宜哲        60.0        33.0        70.0\n13        NaN         NaN         NaN         NaN\n14        梁杨杨        68.0        54.0        94.0\n15         刘辉         NaN        63.0        98.0\n16        罗嘉豪        39.0        44.0        56.0\n17        施亚君        90.0        63.0        90.0\n18         孙添        64.0        63.0        78.0\n19         王杰        74.0         NaN        76.0\n20         王泽        52.0        48.0        94.0\n21        NaN        60.0        69.0        74.0\n22        杨福程        70.0        49.0        76.0\n23        尤澳晨        91.0        67.0        86.0\n24         翟佳        78.0        73.0        88.0\n25         张旭       100.0        60.0        98.0\n26        支星哲        80.0        63.0       100.0\n27        邹湘涛        54.0        40.0        90.0\n</code></pre><ul>\n<li>我们可以看见上面的数据是缺少标注的，列名缺少标注；并且有很多是空值，因此我们要对数据进行清洗，提高数据的质量。在这里数据清洗有四个要点简称“完全合一”<ul>\n<li><strong>完</strong>整性：单条数据是否完整，统计的字段是否完善。</li>\n<li><strong>全</strong>面性：观察某一列的全部数值，选中一列，我们可以看到最大值，最小值，平均值。我们可以通过常识判断数据是否合理，比如：数据定义、单位标识、数值本身。</li>\n<li><strong>合</strong>法性：数据的类型、内容、大小的合法性。比如数据中存在非ASCII字符，性别存在未知，总分超过100等。</li>\n<li>唯<strong>一</strong>性：数据是否存在重复记录，由于数据来源于不同的渠道，重复的情况是非常常见的。行数据、列数据都需要是唯一的。</li>\n</ul>\n</li>\n<li>事实上数据清洗的标准有差不多七八条，有兴趣的可以了解一下，这里归纳为“完全合一”四条，按照这四条基本上可以解决数据清洗中的大部分问题，使得数据<strong>标准、干净、连续</strong>。</li>\n</ul>\n<h2 id=\"二、开始数据清洗\"><a href=\"#二、开始数据清洗\" class=\"headerlink\" title=\"二、开始数据清洗\"></a>二、开始数据清洗</h2><h3 id=\"1、完整性\"><a href=\"#1、完整性\" class=\"headerlink\" title=\"1、完整性\"></a>1、完整性</h3><h3 id=\"problem-1-空行\"><a href=\"#problem-1-空行\" class=\"headerlink\" title=\"problem 1:空行\"></a>problem 1:空行</h3><ul>\n<li>solution: 删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.dropna(how=<span class=\"string\">\"all\"</span>,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"problem-2-缺失值\"><a href=\"#problem-2-缺失值\" class=\"headerlink\" title=\"problem 2:缺失值\"></a>problem 2:缺失值</h3><ul>\n<li>solution：<ul>\n<li>删除：删除数据缺失的记录</li>\n<li>均值：使用当前列的均值</li>\n<li>高频：使用当前列出现平率最高的数据</li>\n</ul>\n</li>\n<li>首先我们先把列的标注补上</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = df.rename(columns=&#123;<span class=\"string\">'Unnamed: 0'</span>:<span class=\"string\">'index'</span>,<span class=\"string\">'Unnamed: 1'</span>:<span class=\"string\">'math'</span>,<span class=\"string\">'Unnamed: 2'</span>:<span class=\"string\">'english'</span>,<span class=\"string\">'Unnamed: 3'</span>:<span class=\"string\">'c++'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = df.drop(columns=<span class=\"string\">'index'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>     math  english    c++\n0    43.0     69.0   61.0\n1    80.0     64.0   62.0\n2    68.0     74.0   98.0\n3    48.0     53.0   64.0\n4    72.0     73.0   96.0\n5    60.0      NaN   70.0\n6    74.0     60.0   20.0\n7    38.0     21.0   92.0\n8    88.0     67.0   84.0\n9    86.0     74.0   96.0\n10   84.0     60.0   90.0\n11   64.0    111.0    NaN\n12   60.0     33.0   70.0\n14   68.0     54.0   94.0\n15    NaN     63.0   98.0\n16   39.0     44.0   56.0\n17   90.0     63.0   90.0\n18   64.0     63.0   78.0\n19   74.0      NaN   76.0\n20   52.0     48.0   94.0\n21   60.0     69.0   74.0\n22   70.0     49.0   76.0\n23   91.0     67.0   86.0\n24   78.0     73.0   88.0\n25  100.0     60.0   98.0\n26   80.0     63.0  100.0\n27   54.0     40.0   90.0\n</code></pre><ul>\n<li>现在我们想对df[‘math’]中缺失的值用平均值代替</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'math'</span>].fillna(df[<span class=\"string\">'math'</span>].mean(),inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>          math  english    c++\n0    43.000000     69.0   61.0\n1    80.000000     64.0   62.0\n2    68.000000     74.0   98.0\n3    48.000000     53.0   64.0\n4    72.000000     73.0   96.0\n5    60.000000      NaN   70.0\n6    74.000000     60.0   20.0\n7    38.000000     21.0   92.0\n8    88.000000     67.0   84.0\n9    86.000000     74.0   96.0\n10   84.000000     60.0   90.0\n11   64.000000    111.0    NaN\n12   60.000000     33.0   70.0\n13   68.653846      NaN    NaN\n14   68.000000     54.0   94.0\n15   68.653846     63.0   98.0\n16   39.000000     44.0   56.0\n17   90.000000     63.0   90.0\n18   64.000000     63.0   78.0\n19   74.000000      NaN   76.0\n20   52.000000     48.0   94.0\n21   60.000000     69.0   74.0\n22   70.000000     49.0   76.0\n23   91.000000     67.0   86.0\n24   78.000000     73.0   88.0\n25  100.000000     60.0   98.0\n26   80.000000     63.0  100.0\n27   54.000000     40.0   90.0\n</code></pre><ul>\n<li>如果想用最高频率的数据对english进行填充，可以通过value_counts获取math字段最高频次english_maxf,然后对其进行填充</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">english_maxf = df[<span class=\"string\">'english'</span>].value_counts().index[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'english'</span>].fillna(english_maxf,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>          math  english    c++\n0    43.000000     69.0   61.0\n1    80.000000     64.0   62.0\n2    68.000000     74.0   98.0\n3    48.000000     53.0   64.0\n4    72.000000     73.0   96.0\n5    60.000000     63.0   70.0\n6    74.000000     60.0   20.0\n7    38.000000     21.0   92.0\n8    88.000000     67.0   84.0\n9    86.000000     74.0   96.0\n10   84.000000     60.0   90.0\n11   64.000000    111.0    NaN\n12   60.000000     33.0   70.0\n13   68.653846     63.0    NaN\n14   68.000000     54.0   94.0\n15   68.653846     63.0   98.0\n16   39.000000     44.0   56.0\n17   90.000000     63.0   90.0\n18   64.000000     63.0   78.0\n19   74.000000     63.0   76.0\n20   52.000000     48.0   94.0\n21   60.000000     69.0   74.0\n22   70.000000     49.0   76.0\n23   91.000000     67.0   86.0\n24   78.000000     73.0   88.0\n25  100.000000     60.0   98.0\n26   80.000000     63.0  100.0\n27   54.000000     40.0   90.0\n</code></pre><h3 id=\"2、全面性\"><a href=\"#2、全面性\" class=\"headerlink\" title=\"2、全面性\"></a>2、全面性</h3><h3 id=\"problem：列数据单位不统一\"><a href=\"#problem：列数据单位不统一\" class=\"headerlink\" title=\"problem：列数据单位不统一\"></a>problem：列数据单位不统一</h3><p>solution：将不同的单位的找出来，将其进行迭代替换，比如说将榜（lbs）转化为千克（kgs）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取 weight 数据列中单位为 lbs 的数据</span></span><br><span class=\"line\">rows_with_lbs = df[<span class=\"string\">'weight'</span>].str.contains(<span class=\"string\">'lbs'</span>).fillna(<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> df[rows_with_lbs]</span><br><span class=\"line\"><span class=\"comment\"># 将 lbs 转换为 kgs, 2.2lbs=1kgs</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,lbs_row <span class=\"keyword\">in</span> df[rows_with_lbs].iterrows():</span><br><span class=\"line\">    <span class=\"comment\"># 截取从头开始到倒数第三个字符之前，即去掉 lbs。</span></span><br><span class=\"line\">    weight = int(float(lbs_row[<span class=\"string\">'weight'</span>][:<span class=\"number\">-3</span>])/<span class=\"number\">2.2</span>)</span><br><span class=\"line\">    df.at[i,<span class=\"string\">'weight'</span>] = <span class=\"string\">'&#123;&#125;kgs'</span>.format(weight)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、合理性\"><a href=\"#3、合理性\" class=\"headerlink\" title=\"3、合理性\"></a>3、合理性</h3><h3 id=\"problem-非ASCII字符\"><a href=\"#problem-非ASCII字符\" class=\"headerlink\" title=\"problem:非ASCII字符\"></a>problem:非ASCII字符</h3><p>solution:对于非ASCII字符，我们可以采用删除或者替换的方式，我们直接选择删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'name'</span>].replace(&#123;<span class=\"string\">r'[^\\x00-\\x7f]+'</span>:<span class=\"string\">''</span>&#125;,regex=<span class=\"keyword\">True</span>,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、唯一性\"><a href=\"#4、唯一性\" class=\"headerlink\" title=\"4、唯一性\"></a>4、唯一性</h3><h3 id=\"problem1：一列有多个参数\"><a href=\"#problem1：一列有多个参数\" class=\"headerlink\" title=\"problem1：一列有多个参数\"></a>problem1：一列有多个参数</h3><p>solution：比如英文名字，是有两部分组成的，包含两个参数Firstname、Lastnamr，我们需要将name一列拆分为Firstname和Lastname两个字段，我们可以采用split方法，对其进行切分</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">'First_namr'</span>,<span class=\"string\">'Last_name'</span>] = df[<span class=\"string\">'name'</span>].str.split(expand=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">df.drop(<span class=\"string\">'name'</span>,axis=<span class=\"number\">1</span>,inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"problem2-重读数据\"><a href=\"#problem2-重读数据\" class=\"headerlink\" title=\"problem2:重读数据\"></a>problem2:重读数据</h3><p>solution：我们校验数据是否存在重复数据，如果有重复数据，如果就用pandas提供的drop_duplicates()来删除重复数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.drop_duplicates([<span class=\"string\">'First_name'</span>,<span class=\"string\">'Last_name'</span>],inplace=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"数据分析-pandas","date":"2018-12-25T00:21:06.000Z","_content":"\n# 数据分析----pandas\n\n## 核心数据结构 Series & DataFrame\n\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series, DataFrame\n```\n\n### **Series是一个定长的字典序列**，它有两个基本属性**index 、 value** index 默认是 0 ,1,2,3 递增的，也可以自己指定索引 index=['a', 'b', 'c']\n\n###  创建Series的三种方式\n\n\n```python\nx1 = Series([1,2,3,4])\nx2 = Series(data=[1,2,3,4],index=['a','b','c','d'])\ndic = {'a':1,'b':2,'c':3,'d':4}\nx3 = Series(dic)\nprint(x1)\nprint(x2)\nprint(x3)\n```\n\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n    a    1\n    b    2\n    c    3\n    d    4\n    dtype: int64\n    a    1\n    b    2\n    c    3\n    d    4\n    dtype: int64\n\n\n### DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\n\n### 创建DataFra几种方式\n\n\n```python\ndata = {\"chinese\":[90,80,70,60,50],'math':[70,80,70,90,60],'english':[30,50,70,80,60]}\ndf1 = DataFrame(data=data,index=['zhangfei','guanyu','zhaoyun','huangzhong','machao'])\nprint(df)\n```\n\n                chinese  english  math\n    zhangfei         90       30    70\n    guanyu           80       50    80\n    zhaoyun          70       70    70\n    huangzhong       60       80    90\n    machao           50       60    60\n\n\n\n```python\nimport xlrd\ndf2 = DataFrame(pd.read_excel('datas/grades.xlsx'))\ndf2 = df2.drop_duplicates()\n```\n\n\n```python\nprint(df2)\n```\n\n         姓名   高数  英语  C++\n    0   蒋广佳   43  69   61\n    1    廖菲   80  64   62\n    2   沈秀玲   68  74   98\n    3    韦丹   48  53   64\n    4   张梦雅   72  73   96\n    5   赵雅欣   60  63   70\n    6   曹海广   74  60   20\n    7   陈泽灿   38  21   92\n    8    邓杰   88  67   84\n    9   高海亮   86  74   96\n    10  顾晓冬   84  60   90\n    11  侯星宇   64  69   96\n    12  江宜哲   60  33   70\n    13  李洪汀   76  56   84\n    14  梁杨杨   68  54   94\n    15   刘辉   68  63   98\n    16  罗嘉豪   39  44   56\n    17  施亚君   90  63   90\n    18   孙添   64  63   78\n    19   王杰   74  60   76\n    20   王泽   52  48   94\n    21  徐孟圆   60  69   74\n    22  杨福程   70  49   76\n    23  尤澳晨   91  67   86\n    24   翟佳   78  73   88\n    25   张旭  100  60   98\n    26  支星哲   80  63  100\n    27  邹湘涛   54  40   90\n\n\n## 数据清洗\n\n### 删除不必要的行或列\n\n\n```python\n#删除行\ndf2 = df2.drop(columns=['姓名'])\nprint(df2)\n```\n\n         高数  英语  C++\n    0    43  69   61\n    1    80  64   62\n    2    68  74   98\n    3    48  53   64\n    4    72  73   96\n    5    60  63   70\n    6    74  60   20\n    7    38  21   92\n    8    88  67   84\n    9    86  74   96\n    10   84  60   90\n    11   64  69   96\n    12   60  33   70\n    13   76  56   84\n    14   68  54   94\n    15   68  63   98\n    16   39  44   56\n    17   90  63   90\n    18   64  63   78\n    19   74  60   76\n    20   52  48   94\n    21   60  69   74\n    22   70  49   76\n    23   91  67   86\n    24   78  73   88\n    25  100  60   98\n    26   80  63  100\n    27   54  40   90\n\n\n\n```python\n#删除列\ndf2 = df2.drop(index = [27])\nprint(df2)\n```\n\n         高数  英语  C++\n    0    43  69   61\n    1    80  64   62\n    2    68  74   98\n    3    48  53   64\n    4    72  73   96\n    5    60  63   70\n    6    74  60   20\n    7    38  21   92\n    8    88  67   84\n    9    86  74   96\n    10   84  60   90\n    11   64  69   96\n    12   60  33   70\n    13   76  56   84\n    14   68  54   94\n    15   68  63   98\n    16   39  44   56\n    17   90  63   90\n    18   64  63   78\n    19   74  60   76\n    20   52  48   94\n    21   60  69   74\n    22   70  49   76\n    23   91  67   86\n    24   78  73   88\n    25  100  60   98\n    26   80  63  100\n\n\n### 重命名列名\n\n\n```python\ndf2 = df2.rename(columns={'高数':'math','英语':'english'})\n```\n\n### 去除重复的值\n\n\n```python\ndf2 = df2.drop_duplicates()\n```\n\n### 更改数据格式\n\n\n```python\ndf2['math'] = df2['math'].astype('str')\n#df2['math'].astype(np.int64)\n```\n\n### 清除数据间的空格\n\n\n```python\ndf2['math'] = df2['math'].map(str.strip) #删除左右两边的空格\ndf2['math'] = df2['math'].map(str.lstrip) #删除左边的空格（str.rstrip 右边的空格）\n```\n\n### 删除指定字符\n\n\n```python\ndf2['math'] = df2['math'].str.strip('$')\n```\n\n### 大小写转换\n\n\n```python\ndf2.columns = df2.columns.str.upper() #全部大写（lower（）全部小写 title（）首字母大写）\n```\n\n\n```python\ndf2\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MATH</th>\n      <th>ENGLISH</th>\n      <th>C++</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43</td>\n      <td>69</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>64</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>68</td>\n      <td>74</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>48</td>\n      <td>53</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>73</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>74</td>\n      <td>60</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>38</td>\n      <td>21</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>88</td>\n      <td>67</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>86</td>\n      <td>74</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>84</td>\n      <td>60</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>64</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>33</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>76</td>\n      <td>56</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>68</td>\n      <td>54</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>68</td>\n      <td>63</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>39</td>\n      <td>44</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>90</td>\n      <td>63</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>64</td>\n      <td>63</td>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>74</td>\n      <td>60</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>52</td>\n      <td>48</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>69</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>70</td>\n      <td>49</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>91</td>\n      <td>67</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>78</td>\n      <td>73</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>100</td>\n      <td>60</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>80</td>\n      <td>63</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 使用apply函数对数据进行清洗\n\n\n```python\n#df2['MATH'] = df2['MATH'].apply(str.lower)\ndf2['MATH'] = df2['MATH'].astype(np.int64)\ndf2\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MATH</th>\n      <th>ENGLISH</th>\n      <th>C++</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43</td>\n      <td>69</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>64</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>68</td>\n      <td>74</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>48</td>\n      <td>53</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>73</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>74</td>\n      <td>60</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>38</td>\n      <td>21</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>88</td>\n      <td>67</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>86</td>\n      <td>74</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>84</td>\n      <td>60</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>64</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>33</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>76</td>\n      <td>56</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>68</td>\n      <td>54</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>68</td>\n      <td>63</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>39</td>\n      <td>44</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>90</td>\n      <td>63</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>64</td>\n      <td>63</td>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>74</td>\n      <td>60</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>52</td>\n      <td>48</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>69</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>70</td>\n      <td>49</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>91</td>\n      <td>67</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>78</td>\n      <td>73</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>100</td>\n      <td>60</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>80</td>\n      <td>63</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndef plus(df):\n    df['Total'] = df['MATH']+df['ENGLISH']+df['C++']\n    return df\ndf2 = df2.apply(plus,axis=1)\n```\n\n\n```python\nprint(df2)\n```\n\n        MATH  ENGLISH  C++  Total\n    0     43       69   61    173\n    1     80       64   62    206\n    2     68       74   98    240\n    3     48       53   64    165\n    4     72       73   96    241\n    5     60       63   70    193\n    6     74       60   20    154\n    7     38       21   92    151\n    8     88       67   84    239\n    9     86       74   96    256\n    10    84       60   90    234\n    11    64       69   96    229\n    12    60       33   70    163\n    13    76       56   84    216\n    14    68       54   94    216\n    15    68       63   98    229\n    16    39       44   56    139\n    17    90       63   90    243\n    18    64       63   78    205\n    19    74       60   76    210\n    20    52       48   94    194\n    21    60       69   74    203\n    22    70       49   76    195\n    23    91       67   86    244\n    24    78       73   88    239\n    25   100       60   98    258\n    26    80       63  100    243\n\n\n## pandas中常用的统计函数\n\n![1.jpg](1.jpg)\n\n```python\nprint(df2.describe())\n```\n\n                 MATH    ENGLISH         C++       Total\n    count   27.000000  27.000000   27.000000   27.000000\n    mean    69.444444  59.703704   81.148148  210.296296\n    std     16.113380  12.406000   17.933003   34.410212\n    min     38.000000  21.000000   20.000000  139.000000\n    25%     60.000000  55.000000   72.000000  193.500000\n    50%     70.000000  63.000000   86.000000  216.000000\n    75%     80.000000  68.000000   95.000000  239.500000\n    max    100.000000  74.000000  100.000000  258.000000\n\n\n\n```python\n\n```\n","source":"_posts/数据分析-pandas.md","raw":"---\ntitle: 数据分析-pandas\ndate: 2018-12-25 08:21:06\ntags: 数据分析\n---\n\n# 数据分析----pandas\n\n## 核心数据结构 Series & DataFrame\n\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series, DataFrame\n```\n\n### **Series是一个定长的字典序列**，它有两个基本属性**index 、 value** index 默认是 0 ,1,2,3 递增的，也可以自己指定索引 index=['a', 'b', 'c']\n\n###  创建Series的三种方式\n\n\n```python\nx1 = Series([1,2,3,4])\nx2 = Series(data=[1,2,3,4],index=['a','b','c','d'])\ndic = {'a':1,'b':2,'c':3,'d':4}\nx3 = Series(dic)\nprint(x1)\nprint(x2)\nprint(x3)\n```\n\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n    a    1\n    b    2\n    c    3\n    d    4\n    dtype: int64\n    a    1\n    b    2\n    c    3\n    d    4\n    dtype: int64\n\n\n### DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\n\n### 创建DataFra几种方式\n\n\n```python\ndata = {\"chinese\":[90,80,70,60,50],'math':[70,80,70,90,60],'english':[30,50,70,80,60]}\ndf1 = DataFrame(data=data,index=['zhangfei','guanyu','zhaoyun','huangzhong','machao'])\nprint(df)\n```\n\n                chinese  english  math\n    zhangfei         90       30    70\n    guanyu           80       50    80\n    zhaoyun          70       70    70\n    huangzhong       60       80    90\n    machao           50       60    60\n\n\n\n```python\nimport xlrd\ndf2 = DataFrame(pd.read_excel('datas/grades.xlsx'))\ndf2 = df2.drop_duplicates()\n```\n\n\n```python\nprint(df2)\n```\n\n         姓名   高数  英语  C++\n    0   蒋广佳   43  69   61\n    1    廖菲   80  64   62\n    2   沈秀玲   68  74   98\n    3    韦丹   48  53   64\n    4   张梦雅   72  73   96\n    5   赵雅欣   60  63   70\n    6   曹海广   74  60   20\n    7   陈泽灿   38  21   92\n    8    邓杰   88  67   84\n    9   高海亮   86  74   96\n    10  顾晓冬   84  60   90\n    11  侯星宇   64  69   96\n    12  江宜哲   60  33   70\n    13  李洪汀   76  56   84\n    14  梁杨杨   68  54   94\n    15   刘辉   68  63   98\n    16  罗嘉豪   39  44   56\n    17  施亚君   90  63   90\n    18   孙添   64  63   78\n    19   王杰   74  60   76\n    20   王泽   52  48   94\n    21  徐孟圆   60  69   74\n    22  杨福程   70  49   76\n    23  尤澳晨   91  67   86\n    24   翟佳   78  73   88\n    25   张旭  100  60   98\n    26  支星哲   80  63  100\n    27  邹湘涛   54  40   90\n\n\n## 数据清洗\n\n### 删除不必要的行或列\n\n\n```python\n#删除行\ndf2 = df2.drop(columns=['姓名'])\nprint(df2)\n```\n\n         高数  英语  C++\n    0    43  69   61\n    1    80  64   62\n    2    68  74   98\n    3    48  53   64\n    4    72  73   96\n    5    60  63   70\n    6    74  60   20\n    7    38  21   92\n    8    88  67   84\n    9    86  74   96\n    10   84  60   90\n    11   64  69   96\n    12   60  33   70\n    13   76  56   84\n    14   68  54   94\n    15   68  63   98\n    16   39  44   56\n    17   90  63   90\n    18   64  63   78\n    19   74  60   76\n    20   52  48   94\n    21   60  69   74\n    22   70  49   76\n    23   91  67   86\n    24   78  73   88\n    25  100  60   98\n    26   80  63  100\n    27   54  40   90\n\n\n\n```python\n#删除列\ndf2 = df2.drop(index = [27])\nprint(df2)\n```\n\n         高数  英语  C++\n    0    43  69   61\n    1    80  64   62\n    2    68  74   98\n    3    48  53   64\n    4    72  73   96\n    5    60  63   70\n    6    74  60   20\n    7    38  21   92\n    8    88  67   84\n    9    86  74   96\n    10   84  60   90\n    11   64  69   96\n    12   60  33   70\n    13   76  56   84\n    14   68  54   94\n    15   68  63   98\n    16   39  44   56\n    17   90  63   90\n    18   64  63   78\n    19   74  60   76\n    20   52  48   94\n    21   60  69   74\n    22   70  49   76\n    23   91  67   86\n    24   78  73   88\n    25  100  60   98\n    26   80  63  100\n\n\n### 重命名列名\n\n\n```python\ndf2 = df2.rename(columns={'高数':'math','英语':'english'})\n```\n\n### 去除重复的值\n\n\n```python\ndf2 = df2.drop_duplicates()\n```\n\n### 更改数据格式\n\n\n```python\ndf2['math'] = df2['math'].astype('str')\n#df2['math'].astype(np.int64)\n```\n\n### 清除数据间的空格\n\n\n```python\ndf2['math'] = df2['math'].map(str.strip) #删除左右两边的空格\ndf2['math'] = df2['math'].map(str.lstrip) #删除左边的空格（str.rstrip 右边的空格）\n```\n\n### 删除指定字符\n\n\n```python\ndf2['math'] = df2['math'].str.strip('$')\n```\n\n### 大小写转换\n\n\n```python\ndf2.columns = df2.columns.str.upper() #全部大写（lower（）全部小写 title（）首字母大写）\n```\n\n\n```python\ndf2\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MATH</th>\n      <th>ENGLISH</th>\n      <th>C++</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43</td>\n      <td>69</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>64</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>68</td>\n      <td>74</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>48</td>\n      <td>53</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>73</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>74</td>\n      <td>60</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>38</td>\n      <td>21</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>88</td>\n      <td>67</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>86</td>\n      <td>74</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>84</td>\n      <td>60</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>64</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>33</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>76</td>\n      <td>56</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>68</td>\n      <td>54</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>68</td>\n      <td>63</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>39</td>\n      <td>44</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>90</td>\n      <td>63</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>64</td>\n      <td>63</td>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>74</td>\n      <td>60</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>52</td>\n      <td>48</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>69</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>70</td>\n      <td>49</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>91</td>\n      <td>67</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>78</td>\n      <td>73</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>100</td>\n      <td>60</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>80</td>\n      <td>63</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### 使用apply函数对数据进行清洗\n\n\n```python\n#df2['MATH'] = df2['MATH'].apply(str.lower)\ndf2['MATH'] = df2['MATH'].astype(np.int64)\ndf2\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MATH</th>\n      <th>ENGLISH</th>\n      <th>C++</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43</td>\n      <td>69</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>64</td>\n      <td>62</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>68</td>\n      <td>74</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>48</td>\n      <td>53</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>73</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>74</td>\n      <td>60</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>38</td>\n      <td>21</td>\n      <td>92</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>88</td>\n      <td>67</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>86</td>\n      <td>74</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>84</td>\n      <td>60</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>64</td>\n      <td>69</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>60</td>\n      <td>33</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>76</td>\n      <td>56</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>68</td>\n      <td>54</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>68</td>\n      <td>63</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>39</td>\n      <td>44</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>90</td>\n      <td>63</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>64</td>\n      <td>63</td>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>74</td>\n      <td>60</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>52</td>\n      <td>48</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>60</td>\n      <td>69</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>70</td>\n      <td>49</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>91</td>\n      <td>67</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>78</td>\n      <td>73</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>100</td>\n      <td>60</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>80</td>\n      <td>63</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndef plus(df):\n    df['Total'] = df['MATH']+df['ENGLISH']+df['C++']\n    return df\ndf2 = df2.apply(plus,axis=1)\n```\n\n\n```python\nprint(df2)\n```\n\n        MATH  ENGLISH  C++  Total\n    0     43       69   61    173\n    1     80       64   62    206\n    2     68       74   98    240\n    3     48       53   64    165\n    4     72       73   96    241\n    5     60       63   70    193\n    6     74       60   20    154\n    7     38       21   92    151\n    8     88       67   84    239\n    9     86       74   96    256\n    10    84       60   90    234\n    11    64       69   96    229\n    12    60       33   70    163\n    13    76       56   84    216\n    14    68       54   94    216\n    15    68       63   98    229\n    16    39       44   56    139\n    17    90       63   90    243\n    18    64       63   78    205\n    19    74       60   76    210\n    20    52       48   94    194\n    21    60       69   74    203\n    22    70       49   76    195\n    23    91       67   86    244\n    24    78       73   88    239\n    25   100       60   98    258\n    26    80       63  100    243\n\n\n## pandas中常用的统计函数\n\n![1.jpg](1.jpg)\n\n```python\nprint(df2.describe())\n```\n\n                 MATH    ENGLISH         C++       Total\n    count   27.000000  27.000000   27.000000   27.000000\n    mean    69.444444  59.703704   81.148148  210.296296\n    std     16.113380  12.406000   17.933003   34.410212\n    min     38.000000  21.000000   20.000000  139.000000\n    25%     60.000000  55.000000   72.000000  193.500000\n    50%     70.000000  63.000000   86.000000  216.000000\n    75%     80.000000  68.000000   95.000000  239.500000\n    max    100.000000  74.000000  100.000000  258.000000\n\n\n\n```python\n\n```\n","slug":"数据分析-pandas","published":1,"updated":"2020-06-30T12:29:17.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj6000nkztzocvjeqof","content":"<h1 id=\"数据分析—-pandas\"><a href=\"#数据分析—-pandas\" class=\"headerlink\" title=\"数据分析—-pandas\"></a>数据分析—-pandas</h1><h2 id=\"核心数据结构-Series-amp-DataFrame\"><a href=\"#核心数据结构-Series-amp-DataFrame\" class=\"headerlink\" title=\"核心数据结构 Series &amp; DataFrame\"></a>核心数据结构 Series &amp; DataFrame</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure>\n<h3 id=\"Series是一个定长的字典序列，它有两个基本属性index-、-value-index-默认是-0-1-2-3-递增的，也可以自己指定索引-index-‘a’-‘b’-‘c’\"><a href=\"#Series是一个定长的字典序列，它有两个基本属性index-、-value-index-默认是-0-1-2-3-递增的，也可以自己指定索引-index-‘a’-‘b’-‘c’\" class=\"headerlink\" title=\"Series是一个定长的字典序列，它有两个基本属性index 、 value index 默认是 0 ,1,2,3 递增的，也可以自己指定索引 index=[‘a’, ‘b’, ‘c’]\"></a><strong>Series是一个定长的字典序列</strong>，它有两个基本属性<strong>index 、 value</strong> index 默认是 0 ,1,2,3 递增的，也可以自己指定索引 index=[‘a’, ‘b’, ‘c’]</h3><h3 id=\"创建Series的三种方式\"><a href=\"#创建Series的三种方式\" class=\"headerlink\" title=\"创建Series的三种方式\"></a>创建Series的三种方式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">x2 = Series(data=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],index=[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>])</span><br><span class=\"line\">dic = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">x3 = Series(dic)</span><br><span class=\"line\">print(x1)</span><br><span class=\"line\">print(x2)</span><br><span class=\"line\">print(x3)</span><br></pre></td></tr></table></figure>\n<pre><code>0    1\n1    2\n2    3\n3    4\ndtype: int64\na    1\nb    2\nc    3\nd    4\ndtype: int64\na    1\nb    2\nc    3\nd    4\ndtype: int64\n</code></pre><h3 id=\"DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\"><a href=\"#DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\" class=\"headerlink\" title=\"DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\"></a>DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成</h3><h3 id=\"创建DataFra几种方式\"><a href=\"#创建DataFra几种方式\" class=\"headerlink\" title=\"创建DataFra几种方式\"></a>创建DataFra几种方式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;<span class=\"string\">\"chinese\"</span>:[<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>],<span class=\"string\">'math'</span>:[<span class=\"number\">70</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">90</span>,<span class=\"number\">60</span>],<span class=\"string\">'english'</span>:[<span class=\"number\">30</span>,<span class=\"number\">50</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>,<span class=\"number\">60</span>]&#125;</span><br><span class=\"line\">df1 = DataFrame(data=data,index=[<span class=\"string\">'zhangfei'</span>,<span class=\"string\">'guanyu'</span>,<span class=\"string\">'zhaoyun'</span>,<span class=\"string\">'huangzhong'</span>,<span class=\"string\">'machao'</span>])</span><br><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>            chinese  english  math\nzhangfei         90       30    70\nguanyu           80       50    80\nzhaoyun          70       70    70\nhuangzhong       60       80    90\nmachao           50       60    60\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\">df2 = DataFrame(pd.read_excel(<span class=\"string\">'datas/grades.xlsx'</span>))</span><br><span class=\"line\">df2 = df2.drop_duplicates()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>     姓名   高数  英语  C++\n0   蒋广佳   43  69   61\n1    廖菲   80  64   62\n2   沈秀玲   68  74   98\n3    韦丹   48  53   64\n4   张梦雅   72  73   96\n5   赵雅欣   60  63   70\n6   曹海广   74  60   20\n7   陈泽灿   38  21   92\n8    邓杰   88  67   84\n9   高海亮   86  74   96\n10  顾晓冬   84  60   90\n11  侯星宇   64  69   96\n12  江宜哲   60  33   70\n13  李洪汀   76  56   84\n14  梁杨杨   68  54   94\n15   刘辉   68  63   98\n16  罗嘉豪   39  44   56\n17  施亚君   90  63   90\n18   孙添   64  63   78\n19   王杰   74  60   76\n20   王泽   52  48   94\n21  徐孟圆   60  69   74\n22  杨福程   70  49   76\n23  尤澳晨   91  67   86\n24   翟佳   78  73   88\n25   张旭  100  60   98\n26  支星哲   80  63  100\n27  邹湘涛   54  40   90\n</code></pre><h2 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h2><h3 id=\"删除不必要的行或列\"><a href=\"#删除不必要的行或列\" class=\"headerlink\" title=\"删除不必要的行或列\"></a>删除不必要的行或列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除行</span></span><br><span class=\"line\">df2 = df2.drop(columns=[<span class=\"string\">'姓名'</span>])</span><br><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>     高数  英语  C++\n0    43  69   61\n1    80  64   62\n2    68  74   98\n3    48  53   64\n4    72  73   96\n5    60  63   70\n6    74  60   20\n7    38  21   92\n8    88  67   84\n9    86  74   96\n10   84  60   90\n11   64  69   96\n12   60  33   70\n13   76  56   84\n14   68  54   94\n15   68  63   98\n16   39  44   56\n17   90  63   90\n18   64  63   78\n19   74  60   76\n20   52  48   94\n21   60  69   74\n22   70  49   76\n23   91  67   86\n24   78  73   88\n25  100  60   98\n26   80  63  100\n27   54  40   90\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除列</span></span><br><span class=\"line\">df2 = df2.drop(index = [<span class=\"number\">27</span>])</span><br><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>     高数  英语  C++\n0    43  69   61\n1    80  64   62\n2    68  74   98\n3    48  53   64\n4    72  73   96\n5    60  63   70\n6    74  60   20\n7    38  21   92\n8    88  67   84\n9    86  74   96\n10   84  60   90\n11   64  69   96\n12   60  33   70\n13   76  56   84\n14   68  54   94\n15   68  63   98\n16   39  44   56\n17   90  63   90\n18   64  63   78\n19   74  60   76\n20   52  48   94\n21   60  69   74\n22   70  49   76\n23   91  67   86\n24   78  73   88\n25  100  60   98\n26   80  63  100\n</code></pre><h3 id=\"重命名列名\"><a href=\"#重命名列名\" class=\"headerlink\" title=\"重命名列名\"></a>重命名列名</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2 = df2.rename(columns=&#123;<span class=\"string\">'高数'</span>:<span class=\"string\">'math'</span>,<span class=\"string\">'英语'</span>:<span class=\"string\">'english'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"去除重复的值\"><a href=\"#去除重复的值\" class=\"headerlink\" title=\"去除重复的值\"></a>去除重复的值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2 = df2.drop_duplicates()</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改数据格式\"><a href=\"#更改数据格式\" class=\"headerlink\" title=\"更改数据格式\"></a>更改数据格式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].astype(<span class=\"string\">'str'</span>)</span><br><span class=\"line\"><span class=\"comment\">#df2['math'].astype(np.int64)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"清除数据间的空格\"><a href=\"#清除数据间的空格\" class=\"headerlink\" title=\"清除数据间的空格\"></a>清除数据间的空格</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].map(str.strip) <span class=\"comment\">#删除左右两边的空格</span></span><br><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].map(str.lstrip) <span class=\"comment\">#删除左边的空格（str.rstrip 右边的空格）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除指定字符\"><a href=\"#删除指定字符\" class=\"headerlink\" title=\"删除指定字符\"></a>删除指定字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].str.strip(<span class=\"string\">'$'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2.columns = df2.columns.str.upper() <span class=\"comment\">#全部大写（lower（）全部小写 title（）首字母大写）</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2</span><br></pre></td></tr></table></figure>\n<div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>MATH</th><br>      <th>ENGLISH</th><br>      <th>C++</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>43</td><br>      <td>69</td><br>      <td>61</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>80</td><br>      <td>64</td><br>      <td>62</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>68</td><br>      <td>74</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>48</td><br>      <td>53</td><br>      <td>64</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>72</td><br>      <td>73</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>60</td><br>      <td>63</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>74</td><br>      <td>60</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>38</td><br>      <td>21</td><br>      <td>92</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>88</td><br>      <td>67</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>86</td><br>      <td>74</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>84</td><br>      <td>60</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>64</td><br>      <td>69</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>60</td><br>      <td>33</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>76</td><br>      <td>56</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>68</td><br>      <td>54</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>68</td><br>      <td>63</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>39</td><br>      <td>44</td><br>      <td>56</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>90</td><br>      <td>63</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>64</td><br>      <td>63</td><br>      <td>78</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>74</td><br>      <td>60</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>52</td><br>      <td>48</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>60</td><br>      <td>69</td><br>      <td>74</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>70</td><br>      <td>49</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>91</td><br>      <td>67</td><br>      <td>86</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>78</td><br>      <td>73</td><br>      <td>88</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>100</td><br>      <td>60</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>80</td><br>      <td>63</td><br>      <td>100</td><br>    </tr><br>  </tbody><br></table><br></div>\n\n\n\n<h3 id=\"使用apply函数对数据进行清洗\"><a href=\"#使用apply函数对数据进行清洗\" class=\"headerlink\" title=\"使用apply函数对数据进行清洗\"></a>使用apply函数对数据进行清洗</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#df2['MATH'] = df2['MATH'].apply(str.lower)</span></span><br><span class=\"line\">df2[<span class=\"string\">'MATH'</span>] = df2[<span class=\"string\">'MATH'</span>].astype(np.int64)</span><br><span class=\"line\">df2</span><br></pre></td></tr></table></figure>\n<div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>MATH</th><br>      <th>ENGLISH</th><br>      <th>C++</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>43</td><br>      <td>69</td><br>      <td>61</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>80</td><br>      <td>64</td><br>      <td>62</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>68</td><br>      <td>74</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>48</td><br>      <td>53</td><br>      <td>64</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>72</td><br>      <td>73</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>60</td><br>      <td>63</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>74</td><br>      <td>60</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>38</td><br>      <td>21</td><br>      <td>92</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>88</td><br>      <td>67</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>86</td><br>      <td>74</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>84</td><br>      <td>60</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>64</td><br>      <td>69</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>60</td><br>      <td>33</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>76</td><br>      <td>56</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>68</td><br>      <td>54</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>68</td><br>      <td>63</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>39</td><br>      <td>44</td><br>      <td>56</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>90</td><br>      <td>63</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>64</td><br>      <td>63</td><br>      <td>78</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>74</td><br>      <td>60</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>52</td><br>      <td>48</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>60</td><br>      <td>69</td><br>      <td>74</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>70</td><br>      <td>49</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>91</td><br>      <td>67</td><br>      <td>86</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>78</td><br>      <td>73</td><br>      <td>88</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>100</td><br>      <td>60</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>80</td><br>      <td>63</td><br>      <td>100</td><br>    </tr><br>  </tbody><br></table><br></div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df[<span class=\"string\">'Total'</span>] = df[<span class=\"string\">'MATH'</span>]+df[<span class=\"string\">'ENGLISH'</span>]+df[<span class=\"string\">'C++'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br><span class=\"line\">df2 = df2.apply(plus,axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>    MATH  ENGLISH  C++  Total\n0     43       69   61    173\n1     80       64   62    206\n2     68       74   98    240\n3     48       53   64    165\n4     72       73   96    241\n5     60       63   70    193\n6     74       60   20    154\n7     38       21   92    151\n8     88       67   84    239\n9     86       74   96    256\n10    84       60   90    234\n11    64       69   96    229\n12    60       33   70    163\n13    76       56   84    216\n14    68       54   94    216\n15    68       63   98    229\n16    39       44   56    139\n17    90       63   90    243\n18    64       63   78    205\n19    74       60   76    210\n20    52       48   94    194\n21    60       69   74    203\n22    70       49   76    195\n23    91       67   86    244\n24    78       73   88    239\n25   100       60   98    258\n26    80       63  100    243\n</code></pre><h2 id=\"pandas中常用的统计函数\"><a href=\"#pandas中常用的统计函数\" class=\"headerlink\" title=\"pandas中常用的统计函数\"></a>pandas中常用的统计函数</h2><p><img src=\"/2018/12/25/数据分析-pandas/1.jpg\" alt=\"1.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df2.describe())</span><br></pre></td></tr></table></figure>\n<pre><code>             MATH    ENGLISH         C++       Total\ncount   27.000000  27.000000   27.000000   27.000000\nmean    69.444444  59.703704   81.148148  210.296296\nstd     16.113380  12.406000   17.933003   34.410212\nmin     38.000000  21.000000   20.000000  139.000000\n25%     60.000000  55.000000   72.000000  193.500000\n50%     70.000000  63.000000   86.000000  216.000000\n75%     80.000000  68.000000   95.000000  239.500000\nmax    100.000000  74.000000  100.000000  258.000000\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据分析—-pandas\"><a href=\"#数据分析—-pandas\" class=\"headerlink\" title=\"数据分析—-pandas\"></a>数据分析—-pandas</h1><h2 id=\"核心数据结构-Series-amp-DataFrame\"><a href=\"#核心数据结构-Series-amp-DataFrame\" class=\"headerlink\" title=\"核心数据结构 Series &amp; DataFrame\"></a>核心数据结构 Series &amp; DataFrame</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure>\n<h3 id=\"Series是一个定长的字典序列，它有两个基本属性index-、-value-index-默认是-0-1-2-3-递增的，也可以自己指定索引-index-‘a’-‘b’-‘c’\"><a href=\"#Series是一个定长的字典序列，它有两个基本属性index-、-value-index-默认是-0-1-2-3-递增的，也可以自己指定索引-index-‘a’-‘b’-‘c’\" class=\"headerlink\" title=\"Series是一个定长的字典序列，它有两个基本属性index 、 value index 默认是 0 ,1,2,3 递增的，也可以自己指定索引 index=[‘a’, ‘b’, ‘c’]\"></a><strong>Series是一个定长的字典序列</strong>，它有两个基本属性<strong>index 、 value</strong> index 默认是 0 ,1,2,3 递增的，也可以自己指定索引 index=[‘a’, ‘b’, ‘c’]</h3><h3 id=\"创建Series的三种方式\"><a href=\"#创建Series的三种方式\" class=\"headerlink\" title=\"创建Series的三种方式\"></a>创建Series的三种方式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\">x2 = Series(data=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],index=[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>])</span><br><span class=\"line\">dic = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">x3 = Series(dic)</span><br><span class=\"line\">print(x1)</span><br><span class=\"line\">print(x2)</span><br><span class=\"line\">print(x3)</span><br></pre></td></tr></table></figure>\n<pre><code>0    1\n1    2\n2    3\n3    4\ndtype: int64\na    1\nb    2\nc    3\nd    4\ndtype: int64\na    1\nb    2\nc    3\nd    4\ndtype: int64\n</code></pre><h3 id=\"DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\"><a href=\"#DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\" class=\"headerlink\" title=\"DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成\"></a>DataFrame类似数据库中的表，可以将其看成是由有相同的索引的Series组成</h3><h3 id=\"创建DataFra几种方式\"><a href=\"#创建DataFra几种方式\" class=\"headerlink\" title=\"创建DataFra几种方式\"></a>创建DataFra几种方式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;<span class=\"string\">\"chinese\"</span>:[<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>],<span class=\"string\">'math'</span>:[<span class=\"number\">70</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">90</span>,<span class=\"number\">60</span>],<span class=\"string\">'english'</span>:[<span class=\"number\">30</span>,<span class=\"number\">50</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>,<span class=\"number\">60</span>]&#125;</span><br><span class=\"line\">df1 = DataFrame(data=data,index=[<span class=\"string\">'zhangfei'</span>,<span class=\"string\">'guanyu'</span>,<span class=\"string\">'zhaoyun'</span>,<span class=\"string\">'huangzhong'</span>,<span class=\"string\">'machao'</span>])</span><br><span class=\"line\">print(df)</span><br></pre></td></tr></table></figure>\n<pre><code>            chinese  english  math\nzhangfei         90       30    70\nguanyu           80       50    80\nzhaoyun          70       70    70\nhuangzhong       60       80    90\nmachao           50       60    60\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\">df2 = DataFrame(pd.read_excel(<span class=\"string\">'datas/grades.xlsx'</span>))</span><br><span class=\"line\">df2 = df2.drop_duplicates()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>     姓名   高数  英语  C++\n0   蒋广佳   43  69   61\n1    廖菲   80  64   62\n2   沈秀玲   68  74   98\n3    韦丹   48  53   64\n4   张梦雅   72  73   96\n5   赵雅欣   60  63   70\n6   曹海广   74  60   20\n7   陈泽灿   38  21   92\n8    邓杰   88  67   84\n9   高海亮   86  74   96\n10  顾晓冬   84  60   90\n11  侯星宇   64  69   96\n12  江宜哲   60  33   70\n13  李洪汀   76  56   84\n14  梁杨杨   68  54   94\n15   刘辉   68  63   98\n16  罗嘉豪   39  44   56\n17  施亚君   90  63   90\n18   孙添   64  63   78\n19   王杰   74  60   76\n20   王泽   52  48   94\n21  徐孟圆   60  69   74\n22  杨福程   70  49   76\n23  尤澳晨   91  67   86\n24   翟佳   78  73   88\n25   张旭  100  60   98\n26  支星哲   80  63  100\n27  邹湘涛   54  40   90\n</code></pre><h2 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h2><h3 id=\"删除不必要的行或列\"><a href=\"#删除不必要的行或列\" class=\"headerlink\" title=\"删除不必要的行或列\"></a>删除不必要的行或列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除行</span></span><br><span class=\"line\">df2 = df2.drop(columns=[<span class=\"string\">'姓名'</span>])</span><br><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>     高数  英语  C++\n0    43  69   61\n1    80  64   62\n2    68  74   98\n3    48  53   64\n4    72  73   96\n5    60  63   70\n6    74  60   20\n7    38  21   92\n8    88  67   84\n9    86  74   96\n10   84  60   90\n11   64  69   96\n12   60  33   70\n13   76  56   84\n14   68  54   94\n15   68  63   98\n16   39  44   56\n17   90  63   90\n18   64  63   78\n19   74  60   76\n20   52  48   94\n21   60  69   74\n22   70  49   76\n23   91  67   86\n24   78  73   88\n25  100  60   98\n26   80  63  100\n27   54  40   90\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除列</span></span><br><span class=\"line\">df2 = df2.drop(index = [<span class=\"number\">27</span>])</span><br><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>     高数  英语  C++\n0    43  69   61\n1    80  64   62\n2    68  74   98\n3    48  53   64\n4    72  73   96\n5    60  63   70\n6    74  60   20\n7    38  21   92\n8    88  67   84\n9    86  74   96\n10   84  60   90\n11   64  69   96\n12   60  33   70\n13   76  56   84\n14   68  54   94\n15   68  63   98\n16   39  44   56\n17   90  63   90\n18   64  63   78\n19   74  60   76\n20   52  48   94\n21   60  69   74\n22   70  49   76\n23   91  67   86\n24   78  73   88\n25  100  60   98\n26   80  63  100\n</code></pre><h3 id=\"重命名列名\"><a href=\"#重命名列名\" class=\"headerlink\" title=\"重命名列名\"></a>重命名列名</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2 = df2.rename(columns=&#123;<span class=\"string\">'高数'</span>:<span class=\"string\">'math'</span>,<span class=\"string\">'英语'</span>:<span class=\"string\">'english'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"去除重复的值\"><a href=\"#去除重复的值\" class=\"headerlink\" title=\"去除重复的值\"></a>去除重复的值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2 = df2.drop_duplicates()</span><br></pre></td></tr></table></figure>\n<h3 id=\"更改数据格式\"><a href=\"#更改数据格式\" class=\"headerlink\" title=\"更改数据格式\"></a>更改数据格式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].astype(<span class=\"string\">'str'</span>)</span><br><span class=\"line\"><span class=\"comment\">#df2['math'].astype(np.int64)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"清除数据间的空格\"><a href=\"#清除数据间的空格\" class=\"headerlink\" title=\"清除数据间的空格\"></a>清除数据间的空格</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].map(str.strip) <span class=\"comment\">#删除左右两边的空格</span></span><br><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].map(str.lstrip) <span class=\"comment\">#删除左边的空格（str.rstrip 右边的空格）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除指定字符\"><a href=\"#删除指定字符\" class=\"headerlink\" title=\"删除指定字符\"></a>删除指定字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2[<span class=\"string\">'math'</span>] = df2[<span class=\"string\">'math'</span>].str.strip(<span class=\"string\">'$'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2.columns = df2.columns.str.upper() <span class=\"comment\">#全部大写（lower（）全部小写 title（）首字母大写）</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df2</span><br></pre></td></tr></table></figure>\n<div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>MATH</th><br>      <th>ENGLISH</th><br>      <th>C++</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>43</td><br>      <td>69</td><br>      <td>61</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>80</td><br>      <td>64</td><br>      <td>62</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>68</td><br>      <td>74</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>48</td><br>      <td>53</td><br>      <td>64</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>72</td><br>      <td>73</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>60</td><br>      <td>63</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>74</td><br>      <td>60</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>38</td><br>      <td>21</td><br>      <td>92</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>88</td><br>      <td>67</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>86</td><br>      <td>74</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>84</td><br>      <td>60</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>64</td><br>      <td>69</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>60</td><br>      <td>33</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>76</td><br>      <td>56</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>68</td><br>      <td>54</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>68</td><br>      <td>63</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>39</td><br>      <td>44</td><br>      <td>56</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>90</td><br>      <td>63</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>64</td><br>      <td>63</td><br>      <td>78</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>74</td><br>      <td>60</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>52</td><br>      <td>48</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>60</td><br>      <td>69</td><br>      <td>74</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>70</td><br>      <td>49</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>91</td><br>      <td>67</td><br>      <td>86</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>78</td><br>      <td>73</td><br>      <td>88</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>100</td><br>      <td>60</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>80</td><br>      <td>63</td><br>      <td>100</td><br>    </tr><br>  </tbody><br></table><br></div>\n\n\n\n<h3 id=\"使用apply函数对数据进行清洗\"><a href=\"#使用apply函数对数据进行清洗\" class=\"headerlink\" title=\"使用apply函数对数据进行清洗\"></a>使用apply函数对数据进行清洗</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#df2['MATH'] = df2['MATH'].apply(str.lower)</span></span><br><span class=\"line\">df2[<span class=\"string\">'MATH'</span>] = df2[<span class=\"string\">'MATH'</span>].astype(np.int64)</span><br><span class=\"line\">df2</span><br></pre></td></tr></table></figure>\n<div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>MATH</th><br>      <th>ENGLISH</th><br>      <th>C++</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>43</td><br>      <td>69</td><br>      <td>61</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>80</td><br>      <td>64</td><br>      <td>62</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>68</td><br>      <td>74</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>48</td><br>      <td>53</td><br>      <td>64</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>72</td><br>      <td>73</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>60</td><br>      <td>63</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>74</td><br>      <td>60</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>38</td><br>      <td>21</td><br>      <td>92</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>88</td><br>      <td>67</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>86</td><br>      <td>74</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>84</td><br>      <td>60</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>64</td><br>      <td>69</td><br>      <td>96</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>60</td><br>      <td>33</td><br>      <td>70</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>76</td><br>      <td>56</td><br>      <td>84</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>68</td><br>      <td>54</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>68</td><br>      <td>63</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>39</td><br>      <td>44</td><br>      <td>56</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>90</td><br>      <td>63</td><br>      <td>90</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>64</td><br>      <td>63</td><br>      <td>78</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>74</td><br>      <td>60</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>52</td><br>      <td>48</td><br>      <td>94</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>60</td><br>      <td>69</td><br>      <td>74</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>70</td><br>      <td>49</td><br>      <td>76</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>91</td><br>      <td>67</td><br>      <td>86</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>78</td><br>      <td>73</td><br>      <td>88</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>100</td><br>      <td>60</td><br>      <td>98</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>80</td><br>      <td>63</td><br>      <td>100</td><br>    </tr><br>  </tbody><br></table><br></div>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    df[<span class=\"string\">'Total'</span>] = df[<span class=\"string\">'MATH'</span>]+df[<span class=\"string\">'ENGLISH'</span>]+df[<span class=\"string\">'C++'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df</span><br><span class=\"line\">df2 = df2.apply(plus,axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df2)</span><br></pre></td></tr></table></figure>\n<pre><code>    MATH  ENGLISH  C++  Total\n0     43       69   61    173\n1     80       64   62    206\n2     68       74   98    240\n3     48       53   64    165\n4     72       73   96    241\n5     60       63   70    193\n6     74       60   20    154\n7     38       21   92    151\n8     88       67   84    239\n9     86       74   96    256\n10    84       60   90    234\n11    64       69   96    229\n12    60       33   70    163\n13    76       56   84    216\n14    68       54   94    216\n15    68       63   98    229\n16    39       44   56    139\n17    90       63   90    243\n18    64       63   78    205\n19    74       60   76    210\n20    52       48   94    194\n21    60       69   74    203\n22    70       49   76    195\n23    91       67   86    244\n24    78       73   88    239\n25   100       60   98    258\n26    80       63  100    243\n</code></pre><h2 id=\"pandas中常用的统计函数\"><a href=\"#pandas中常用的统计函数\" class=\"headerlink\" title=\"pandas中常用的统计函数\"></a>pandas中常用的统计函数</h2><p><img src=\"/2018/12/25/数据分析-pandas/1.jpg\" alt=\"1.jpg\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(df2.describe())</span><br></pre></td></tr></table></figure>\n<pre><code>             MATH    ENGLISH         C++       Total\ncount   27.000000  27.000000   27.000000   27.000000\nmean    69.444444  59.703704   81.148148  210.296296\nstd     16.113380  12.406000   17.933003   34.410212\nmin     38.000000  21.000000   20.000000  139.000000\n25%     60.000000  55.000000   72.000000  193.500000\n50%     70.000000  63.000000   86.000000  216.000000\n75%     80.000000  68.000000   95.000000  239.500000\nmax    100.000000  74.000000  100.000000  258.000000\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"爬取网易云热评并生成词云","date":"2019-01-12T02:06:39.000Z","_content":"## 分析热评的请求URL\n - 首先我们先对请求抓包，发现所有的评论都包含在 **https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=\"**里面，然后再去分析这个请求，发现这是一个**POST**请求，请求参数由两个**params**以及**encSecKey**。好了到此我们需要的东西都有了，接下来我们分析如何去得到这两个参数。\n ### 找到请求\n ![1.png](1.png)\n ### 分析请求参数\n ![2.png](2.png)\n\n ## 分析js加密\n - 找到全局js文件，找到两个参数所在的位置\n ![3.png](3.png)\n - 发现这两个参数是由**window.asrsea**获得的，接着去定位到这个函数找到对应的原函数**d**\n ![4.ong](4.png)\n - 对js进行调试，发现d的四个参数，有三个是定值，这个函数还用到了a、b、c三个函数\n ![5](5.png)\n - 其中a是产生一个16位的随机数（这里我直接让它等于**FwtEYduOXlNEHbLP**）为什么要等与这个呢 hhh 因为我发现这个随机数，他在生成encText的时候用了一次，生成encSecKey的时候，又用了一次，而且encSecKey就只跟这个随机数相关，所以让这个随机数为定值的话，就可以直接得到encSecKey的值，不用再去搞一个rsa加密，为了让你们看清楚，我还是把贴出来把\n ![6](6.png)\n - **b**函数就是我们主要要解决的**AES**加密，经过调试，我们可以知道它的两个参数a、b分别是加密字符转、密钥。以及AES的偏移量为**0102030405060708**、加密模式为**CBC**\n ![7](7.png)\n - 接下来看c函数，c函数其实是**RSA**加密，获取encSecKey的值的他的三个参数，只有a是变量，是我们随机生成的16为随机数，这里我们就默认为定值，b、c应该是和rsa加密有关的参数，应为本身并没有学过加密，这里我就不多说了，但是经过调试，我们可以知道b、c是定值 **b =010001** c是一大串字符串。见下图。\n ![8](8.png)\n - 最后我们具体分析一下d函数，经过N次调试，我发现这其实和我的想法差不多，h是一个字典，包含了我们需要的两个参数。encText是由两次AES加密产生的及两次b，加密字符串是一样的，然后密钥第一次是个定值**0CoJUm6Qyw8W8jud**，第二次是16位随机数，也相当于定值。所以encText就出来了，params是由一次RSA加密产生的，并且只与16位的随机数有关，这里就清楚为什么我让随机数直接等于**FwtEYduOXlNEHbLP**，哈哈。因为我调试的时候，刚好出现了这么个随机数，于是我就直接拿过来用了，这个随机数对应的encSecKey = **81e7a41af9830200d5606be1a632e57eb0006b3cdae579127115c6323d4c4802f3af9efcee21d9f4126dde266773cbd795f19ae44028f9f8d038cd62d2816952fa99bb61ecb5fba87d5b178ff4b982ee34c7491808f7cb774554a0235a210caf2e5e867a0e2ebdf6f994be1b198ab43b14ce1f7cfa6f80b9070dea5fc5d6c712**\n ![](9.png)\n\n ## 用python重写js加密\n\n - 经过js加密码的分析，我用python实现了一下AES加密，具体代码如下，包含两个参数，一个是需要加密的字符串，一个是密钥具体如下\n ```python\n def AES_encrypt(text, key):\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    encryptor = AES.new(key, AES.MODE_CBC, \"0102030405060708\")\n    encrypt_text = encryptor.encrypt(text)\n    encrypt_text = base64.b64encode(encrypt_text)\n    return encrypt_text\n ```\n - 两次调用这个函数。得到结果与调试的结果对比，一模一样。哈哈，上代码、上图\n ```python\nf_key = \"0CoJUm6Qyw8W8jud\"\ntext = \"{\\\"rid\\\":\\\"R_SO_4_32785700\\\",\\\"offset\\\":\\\"20\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\"\nrs = AES_encrypt(text, f_key)\nparams = AES_encrypt(str(rs)[2:-1], \"FwtEYduOXlNEHbLP\")\n ```\n 这里解释一下，text是我进过N次调试得出的，因为在请求评论之前，text有好几个值来验证其他的东西，这里我大概理解了一下text的含义，这里我们只要知道offset是偏移量，limit是每次请求多少条，比如你请求前二十条则offset=0，limit = 20，我上面的是请求20-40条。\n ![](10.png)\n ![](11.png)\n\n - 然后直接获取的encSecKey直接赋值就好啦，结合这两个参数，我们的请求参数就构造好了，直接POST吧，就能得到评论啦，哈哈，上代码，上图\n ```python\n data = {\n    'params': params,\n    'encSecKey': encSecKey\n}\nheaders = {\n    'Accept-Language':\"zh-CN,zh;q=0.9,en;q=0.8\",\n    'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36',\n\n    'Cookie': 'appver=1.5.0.75771',\n    'Referer': 'http://music.163.com/'\n}\nurl = \"https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=\"\nraw = requests.post(url,headers=headers, data=data)\nprint(raw.json())\n ```\n ![](12.png)\n\n## 解析json，获取评论\n\n\n","source":"_posts/爬取网易云热评并生成词云.md","raw":"---\ntitle: 爬取网易云热评并生成词云\ndate: 2019-01-12 10:06:39\ntags:\n---\n## 分析热评的请求URL\n - 首先我们先对请求抓包，发现所有的评论都包含在 **https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=\"**里面，然后再去分析这个请求，发现这是一个**POST**请求，请求参数由两个**params**以及**encSecKey**。好了到此我们需要的东西都有了，接下来我们分析如何去得到这两个参数。\n ### 找到请求\n ![1.png](1.png)\n ### 分析请求参数\n ![2.png](2.png)\n\n ## 分析js加密\n - 找到全局js文件，找到两个参数所在的位置\n ![3.png](3.png)\n - 发现这两个参数是由**window.asrsea**获得的，接着去定位到这个函数找到对应的原函数**d**\n ![4.ong](4.png)\n - 对js进行调试，发现d的四个参数，有三个是定值，这个函数还用到了a、b、c三个函数\n ![5](5.png)\n - 其中a是产生一个16位的随机数（这里我直接让它等于**FwtEYduOXlNEHbLP**）为什么要等与这个呢 hhh 因为我发现这个随机数，他在生成encText的时候用了一次，生成encSecKey的时候，又用了一次，而且encSecKey就只跟这个随机数相关，所以让这个随机数为定值的话，就可以直接得到encSecKey的值，不用再去搞一个rsa加密，为了让你们看清楚，我还是把贴出来把\n ![6](6.png)\n - **b**函数就是我们主要要解决的**AES**加密，经过调试，我们可以知道它的两个参数a、b分别是加密字符转、密钥。以及AES的偏移量为**0102030405060708**、加密模式为**CBC**\n ![7](7.png)\n - 接下来看c函数，c函数其实是**RSA**加密，获取encSecKey的值的他的三个参数，只有a是变量，是我们随机生成的16为随机数，这里我们就默认为定值，b、c应该是和rsa加密有关的参数，应为本身并没有学过加密，这里我就不多说了，但是经过调试，我们可以知道b、c是定值 **b =010001** c是一大串字符串。见下图。\n ![8](8.png)\n - 最后我们具体分析一下d函数，经过N次调试，我发现这其实和我的想法差不多，h是一个字典，包含了我们需要的两个参数。encText是由两次AES加密产生的及两次b，加密字符串是一样的，然后密钥第一次是个定值**0CoJUm6Qyw8W8jud**，第二次是16位随机数，也相当于定值。所以encText就出来了，params是由一次RSA加密产生的，并且只与16位的随机数有关，这里就清楚为什么我让随机数直接等于**FwtEYduOXlNEHbLP**，哈哈。因为我调试的时候，刚好出现了这么个随机数，于是我就直接拿过来用了，这个随机数对应的encSecKey = **81e7a41af9830200d5606be1a632e57eb0006b3cdae579127115c6323d4c4802f3af9efcee21d9f4126dde266773cbd795f19ae44028f9f8d038cd62d2816952fa99bb61ecb5fba87d5b178ff4b982ee34c7491808f7cb774554a0235a210caf2e5e867a0e2ebdf6f994be1b198ab43b14ce1f7cfa6f80b9070dea5fc5d6c712**\n ![](9.png)\n\n ## 用python重写js加密\n\n - 经过js加密码的分析，我用python实现了一下AES加密，具体代码如下，包含两个参数，一个是需要加密的字符串，一个是密钥具体如下\n ```python\n def AES_encrypt(text, key):\n    pad = 16 - len(text) % 16\n    text = text + pad * chr(pad)\n    encryptor = AES.new(key, AES.MODE_CBC, \"0102030405060708\")\n    encrypt_text = encryptor.encrypt(text)\n    encrypt_text = base64.b64encode(encrypt_text)\n    return encrypt_text\n ```\n - 两次调用这个函数。得到结果与调试的结果对比，一模一样。哈哈，上代码、上图\n ```python\nf_key = \"0CoJUm6Qyw8W8jud\"\ntext = \"{\\\"rid\\\":\\\"R_SO_4_32785700\\\",\\\"offset\\\":\\\"20\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"}\"\nrs = AES_encrypt(text, f_key)\nparams = AES_encrypt(str(rs)[2:-1], \"FwtEYduOXlNEHbLP\")\n ```\n 这里解释一下，text是我进过N次调试得出的，因为在请求评论之前，text有好几个值来验证其他的东西，这里我大概理解了一下text的含义，这里我们只要知道offset是偏移量，limit是每次请求多少条，比如你请求前二十条则offset=0，limit = 20，我上面的是请求20-40条。\n ![](10.png)\n ![](11.png)\n\n - 然后直接获取的encSecKey直接赋值就好啦，结合这两个参数，我们的请求参数就构造好了，直接POST吧，就能得到评论啦，哈哈，上代码，上图\n ```python\n data = {\n    'params': params,\n    'encSecKey': encSecKey\n}\nheaders = {\n    'Accept-Language':\"zh-CN,zh;q=0.9,en;q=0.8\",\n    'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36',\n\n    'Cookie': 'appver=1.5.0.75771',\n    'Referer': 'http://music.163.com/'\n}\nurl = \"https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=\"\nraw = requests.post(url,headers=headers, data=data)\nprint(raw.json())\n ```\n ![](12.png)\n\n## 解析json，获取评论\n\n\n","slug":"爬取网易云热评并生成词云","published":1,"updated":"2020-06-30T12:29:17.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcebpcj7000qkztzu6aawrxz","content":"<h2 id=\"分析热评的请求URL\"><a href=\"#分析热评的请求URL\" class=\"headerlink\" title=\"分析热评的请求URL\"></a>分析热评的请求URL</h2><ul>\n<li><p>首先我们先对请求抓包，发现所有的评论都包含在 <strong><a href=\"https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=&quot;\" target=\"_blank\" rel=\"noopener\">https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=&quot;</a></strong>里面，然后再去分析这个请求，发现这是一个<strong>POST</strong>请求，请求参数由两个<strong>params</strong>以及<strong>encSecKey</strong>。好了到此我们需要的东西都有了，接下来我们分析如何去得到这两个参数。</p>\n<h3 id=\"找到请求\"><a href=\"#找到请求\" class=\"headerlink\" title=\"找到请求\"></a>找到请求</h3><p><img src=\"/2019/01/12/爬取网易云热评并生成词云/1.png\" alt=\"1.png\"></p>\n<h3 id=\"分析请求参数\"><a href=\"#分析请求参数\" class=\"headerlink\" title=\"分析请求参数\"></a>分析请求参数</h3><p><img src=\"/2019/01/12/爬取网易云热评并生成词云/2.png\" alt=\"2.png\"></p>\n<h2 id=\"分析js加密\"><a href=\"#分析js加密\" class=\"headerlink\" title=\"分析js加密\"></a>分析js加密</h2></li>\n<li>找到全局js文件，找到两个参数所在的位置<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/3.png\" alt=\"3.png\"></li>\n<li>发现这两个参数是由<strong>window.asrsea</strong>获得的，接着去定位到这个函数找到对应的原函数<strong>d</strong><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/4.png\" alt=\"4.ong\"></li>\n<li>对js进行调试，发现d的四个参数，有三个是定值，这个函数还用到了a、b、c三个函数<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/5.png\" alt=\"5\"></li>\n<li>其中a是产生一个16位的随机数（这里我直接让它等于<strong>FwtEYduOXlNEHbLP</strong>）为什么要等与这个呢 hhh 因为我发现这个随机数，他在生成encText的时候用了一次，生成encSecKey的时候，又用了一次，而且encSecKey就只跟这个随机数相关，所以让这个随机数为定值的话，就可以直接得到encSecKey的值，不用再去搞一个rsa加密，为了让你们看清楚，我还是把贴出来把<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/6.png\" alt=\"6\"></li>\n<li><strong>b</strong>函数就是我们主要要解决的<strong>AES</strong>加密，经过调试，我们可以知道它的两个参数a、b分别是加密字符转、密钥。以及AES的偏移量为<strong>0102030405060708</strong>、加密模式为<strong>CBC</strong><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/7.png\" alt=\"7\"></li>\n<li>接下来看c函数，c函数其实是<strong>RSA</strong>加密，获取encSecKey的值的他的三个参数，只有a是变量，是我们随机生成的16为随机数，这里我们就默认为定值，b、c应该是和rsa加密有关的参数，应为本身并没有学过加密，这里我就不多说了，但是经过调试，我们可以知道b、c是定值 <strong>b =010001</strong> c是一大串字符串。见下图。<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/8.png\" alt=\"8\"></li>\n<li><p>最后我们具体分析一下d函数，经过N次调试，我发现这其实和我的想法差不多，h是一个字典，包含了我们需要的两个参数。encText是由两次AES加密产生的及两次b，加密字符串是一样的，然后密钥第一次是个定值<strong>0CoJUm6Qyw8W8jud</strong>，第二次是16位随机数，也相当于定值。所以encText就出来了，params是由一次RSA加密产生的，并且只与16位的随机数有关，这里就清楚为什么我让随机数直接等于<strong>FwtEYduOXlNEHbLP</strong>，哈哈。因为我调试的时候，刚好出现了这么个随机数，于是我就直接拿过来用了，这个随机数对应的encSecKey = <strong>81e7a41af9830200d5606be1a632e57eb0006b3cdae579127115c6323d4c4802f3af9efcee21d9f4126dde266773cbd795f19ae44028f9f8d038cd62d2816952fa99bb61ecb5fba87d5b178ff4b982ee34c7491808f7cb774554a0235a210caf2e5e867a0e2ebdf6f994be1b198ab43b14ce1f7cfa6f80b9070dea5fc5d6c712</strong><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/9.png\" alt=\"\"></p>\n<h2 id=\"用python重写js加密\"><a href=\"#用python重写js加密\" class=\"headerlink\" title=\"用python重写js加密\"></a>用python重写js加密</h2></li>\n<li><p>经过js加密码的分析，我用python实现了一下AES加密，具体代码如下，包含两个参数，一个是需要加密的字符串，一个是密钥具体如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AES_encrypt</span><span class=\"params\">(text, key)</span>:</span></span><br><span class=\"line\">   pad = <span class=\"number\">16</span> - len(text) % <span class=\"number\">16</span></span><br><span class=\"line\">   text = text + pad * chr(pad)</span><br><span class=\"line\">   encryptor = AES.new(key, AES.MODE_CBC, <span class=\"string\">\"0102030405060708\"</span>)</span><br><span class=\"line\">   encrypt_text = encryptor.encrypt(text)</span><br><span class=\"line\">   encrypt_text = base64.b64encode(encrypt_text)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> encrypt_text</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两次调用这个函数。得到结果与调试的结果对比，一模一样。哈哈，上代码、上图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_key = <span class=\"string\">\"0CoJUm6Qyw8W8jud\"</span></span><br><span class=\"line\">text = <span class=\"string\">\"&#123;\\\"rid\\\":\\\"R_SO_4_32785700\\\",\\\"offset\\\":\\\"20\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"&#125;\"</span></span><br><span class=\"line\">rs = AES_encrypt(text, f_key)</span><br><span class=\"line\">params = AES_encrypt(str(rs)[<span class=\"number\">2</span>:<span class=\"number\">-1</span>], <span class=\"string\">\"FwtEYduOXlNEHbLP\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这里解释一下，text是我进过N次调试得出的，因为在请求评论之前，text有好几个值来验证其他的东西，这里我大概理解了一下text的含义，这里我们只要知道offset是偏移量，limit是每次请求多少条，比如你请求前二十条则offset=0，limit = 20，我上面的是请求20-40条。<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/10.png\" alt=\"\"><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/11.png\" alt=\"\"></p>\n</li>\n<li><p>然后直接获取的encSecKey直接赋值就好啦，结合这两个参数，我们的请求参数就构造好了，直接POST吧，就能得到评论啦，哈哈，上代码，上图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> data = &#123;</span><br><span class=\"line\">    <span class=\"string\">'params'</span>: params,</span><br><span class=\"line\">    <span class=\"string\">'encSecKey'</span>: encSecKey</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>:<span class=\"string\">\"zh-CN,zh;q=0.9,en;q=0.8\"</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Cookie'</span>: <span class=\"string\">'appver=1.5.0.75771'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Referer'</span>: <span class=\"string\">'http://music.163.com/'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">\"https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=\"</span></span><br><span class=\"line\">raw = requests.post(url,headers=headers, data=data)</span><br><span class=\"line\">print(raw.json())</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/01/12/爬取网易云热评并生成词云/12.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"解析json，获取评论\"><a href=\"#解析json，获取评论\" class=\"headerlink\" title=\"解析json，获取评论\"></a>解析json，获取评论</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分析热评的请求URL\"><a href=\"#分析热评的请求URL\" class=\"headerlink\" title=\"分析热评的请求URL\"></a>分析热评的请求URL</h2><ul>\n<li><p>首先我们先对请求抓包，发现所有的评论都包含在 <strong><a href=\"https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=&quot;\" target=\"_blank\" rel=\"noopener\">https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=&quot;</a></strong>里面，然后再去分析这个请求，发现这是一个<strong>POST</strong>请求，请求参数由两个<strong>params</strong>以及<strong>encSecKey</strong>。好了到此我们需要的东西都有了，接下来我们分析如何去得到这两个参数。</p>\n<h3 id=\"找到请求\"><a href=\"#找到请求\" class=\"headerlink\" title=\"找到请求\"></a>找到请求</h3><p><img src=\"/2019/01/12/爬取网易云热评并生成词云/1.png\" alt=\"1.png\"></p>\n<h3 id=\"分析请求参数\"><a href=\"#分析请求参数\" class=\"headerlink\" title=\"分析请求参数\"></a>分析请求参数</h3><p><img src=\"/2019/01/12/爬取网易云热评并生成词云/2.png\" alt=\"2.png\"></p>\n<h2 id=\"分析js加密\"><a href=\"#分析js加密\" class=\"headerlink\" title=\"分析js加密\"></a>分析js加密</h2></li>\n<li>找到全局js文件，找到两个参数所在的位置<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/3.png\" alt=\"3.png\"></li>\n<li>发现这两个参数是由<strong>window.asrsea</strong>获得的，接着去定位到这个函数找到对应的原函数<strong>d</strong><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/4.png\" alt=\"4.ong\"></li>\n<li>对js进行调试，发现d的四个参数，有三个是定值，这个函数还用到了a、b、c三个函数<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/5.png\" alt=\"5\"></li>\n<li>其中a是产生一个16位的随机数（这里我直接让它等于<strong>FwtEYduOXlNEHbLP</strong>）为什么要等与这个呢 hhh 因为我发现这个随机数，他在生成encText的时候用了一次，生成encSecKey的时候，又用了一次，而且encSecKey就只跟这个随机数相关，所以让这个随机数为定值的话，就可以直接得到encSecKey的值，不用再去搞一个rsa加密，为了让你们看清楚，我还是把贴出来把<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/6.png\" alt=\"6\"></li>\n<li><strong>b</strong>函数就是我们主要要解决的<strong>AES</strong>加密，经过调试，我们可以知道它的两个参数a、b分别是加密字符转、密钥。以及AES的偏移量为<strong>0102030405060708</strong>、加密模式为<strong>CBC</strong><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/7.png\" alt=\"7\"></li>\n<li>接下来看c函数，c函数其实是<strong>RSA</strong>加密，获取encSecKey的值的他的三个参数，只有a是变量，是我们随机生成的16为随机数，这里我们就默认为定值，b、c应该是和rsa加密有关的参数，应为本身并没有学过加密，这里我就不多说了，但是经过调试，我们可以知道b、c是定值 <strong>b =010001</strong> c是一大串字符串。见下图。<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/8.png\" alt=\"8\"></li>\n<li><p>最后我们具体分析一下d函数，经过N次调试，我发现这其实和我的想法差不多，h是一个字典，包含了我们需要的两个参数。encText是由两次AES加密产生的及两次b，加密字符串是一样的，然后密钥第一次是个定值<strong>0CoJUm6Qyw8W8jud</strong>，第二次是16位随机数，也相当于定值。所以encText就出来了，params是由一次RSA加密产生的，并且只与16位的随机数有关，这里就清楚为什么我让随机数直接等于<strong>FwtEYduOXlNEHbLP</strong>，哈哈。因为我调试的时候，刚好出现了这么个随机数，于是我就直接拿过来用了，这个随机数对应的encSecKey = <strong>81e7a41af9830200d5606be1a632e57eb0006b3cdae579127115c6323d4c4802f3af9efcee21d9f4126dde266773cbd795f19ae44028f9f8d038cd62d2816952fa99bb61ecb5fba87d5b178ff4b982ee34c7491808f7cb774554a0235a210caf2e5e867a0e2ebdf6f994be1b198ab43b14ce1f7cfa6f80b9070dea5fc5d6c712</strong><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/9.png\" alt=\"\"></p>\n<h2 id=\"用python重写js加密\"><a href=\"#用python重写js加密\" class=\"headerlink\" title=\"用python重写js加密\"></a>用python重写js加密</h2></li>\n<li><p>经过js加密码的分析，我用python实现了一下AES加密，具体代码如下，包含两个参数，一个是需要加密的字符串，一个是密钥具体如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AES_encrypt</span><span class=\"params\">(text, key)</span>:</span></span><br><span class=\"line\">   pad = <span class=\"number\">16</span> - len(text) % <span class=\"number\">16</span></span><br><span class=\"line\">   text = text + pad * chr(pad)</span><br><span class=\"line\">   encryptor = AES.new(key, AES.MODE_CBC, <span class=\"string\">\"0102030405060708\"</span>)</span><br><span class=\"line\">   encrypt_text = encryptor.encrypt(text)</span><br><span class=\"line\">   encrypt_text = base64.b64encode(encrypt_text)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> encrypt_text</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两次调用这个函数。得到结果与调试的结果对比，一模一样。哈哈，上代码、上图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f_key = <span class=\"string\">\"0CoJUm6Qyw8W8jud\"</span></span><br><span class=\"line\">text = <span class=\"string\">\"&#123;\\\"rid\\\":\\\"R_SO_4_32785700\\\",\\\"offset\\\":\\\"20\\\",\\\"total\\\":\\\"true\\\",\\\"limit\\\":\\\"20\\\",\\\"csrf_token\\\":\\\"\\\"&#125;\"</span></span><br><span class=\"line\">rs = AES_encrypt(text, f_key)</span><br><span class=\"line\">params = AES_encrypt(str(rs)[<span class=\"number\">2</span>:<span class=\"number\">-1</span>], <span class=\"string\">\"FwtEYduOXlNEHbLP\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这里解释一下，text是我进过N次调试得出的，因为在请求评论之前，text有好几个值来验证其他的东西，这里我大概理解了一下text的含义，这里我们只要知道offset是偏移量，limit是每次请求多少条，比如你请求前二十条则offset=0，limit = 20，我上面的是请求20-40条。<br><img src=\"/2019/01/12/爬取网易云热评并生成词云/10.png\" alt=\"\"><br><img src=\"/2019/01/12/爬取网易云热评并生成词云/11.png\" alt=\"\"></p>\n</li>\n<li><p>然后直接获取的encSecKey直接赋值就好啦，结合这两个参数，我们的请求参数就构造好了，直接POST吧，就能得到评论啦，哈哈，上代码，上图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> data = &#123;</span><br><span class=\"line\">    <span class=\"string\">'params'</span>: params,</span><br><span class=\"line\">    <span class=\"string\">'encSecKey'</span>: encSecKey</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>:<span class=\"string\">\"zh-CN,zh;q=0.9,en;q=0.8\"</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.89 Safari/537.36'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Cookie'</span>: <span class=\"string\">'appver=1.5.0.75771'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Referer'</span>: <span class=\"string\">'http://music.163.com/'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">\"https://music.163.com/weapi/v1/resource/comments/R_SO_4_32785700?csrf_token=\"</span></span><br><span class=\"line\">raw = requests.post(url,headers=headers, data=data)</span><br><span class=\"line\">print(raw.json())</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/01/12/爬取网易云热评并生成词云/12.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"解析json，获取评论\"><a href=\"#解析json，获取评论\" class=\"headerlink\" title=\"解析json，获取评论\"></a>解析json，获取评论</h2>"}],"PostAsset":[{"_id":"source/_posts/docker常用命令/6.jpg","slug":"6.jpg","post":"ckcebpcil0000kztzn0rpdwmd","modified":1,"renderable":0},{"_id":"source/_posts/docker常用命令/8.jpg","slug":"8.jpg","post":"ckcebpcil0000kztzn0rpdwmd","modified":1,"renderable":0},{"_id":"source/_posts/小说更新后发送邮箱的问题解决/1.png","slug":"1.png","post":"ckcebpcj4000gkztzjtugi513","modified":1,"renderable":0},{"_id":"source/_posts/小说更新后发送邮箱的问题解决/2.png","slug":"2.png","post":"ckcebpcj4000gkztzjtugi513","modified":1,"renderable":0},{"_id":"source/_posts/git简单指令/Git.png","post":"ckcebpcis0004kztzrjhhfp9o","slug":"Git.png","modified":1,"renderable":1},{"_id":"source/_posts/数据分析-pandas/1.jpg","slug":"1.jpg","post":"ckcebpcj6000nkztzocvjeqof","modified":1,"renderable":0},{"_id":"source/_posts/小说更新后发送邮箱的问题解决/3.png","post":"ckcebpcj4000gkztzjtugi513","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/c-指针问题/1.png","post":"ckcebpcip0002kztz832e2fg2","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/c-指针问题/2.png","post":"ckcebpcip0002kztz832e2fg2","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/c-指针问题/3.png","post":"ckcebpcip0002kztz832e2fg2","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/c-指针问题/4.png","post":"ckcebpcip0002kztz832e2fg2","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/c-指针问题/5.png","post":"ckcebpcip0002kztz832e2fg2","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/docker常用命令/1.jpg","post":"ckcebpcil0000kztzn0rpdwmd","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/docker常用命令/2.jpg","post":"ckcebpcil0000kztzn0rpdwmd","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/docker常用命令/3.jpg","post":"ckcebpcil0000kztzn0rpdwmd","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/docker常用命令/4.jpg","post":"ckcebpcil0000kztzn0rpdwmd","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/docker常用命令/5.jpg","slug":"5.jpg","post":"ckcebpcil0000kztzn0rpdwmd","modified":1,"renderable":0},{"_id":"source/_posts/docker常用命令/7.jpg","post":"ckcebpcil0000kztzn0rpdwmd","slug":"7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/docker常用命令/9.jpg","post":"ckcebpcil0000kztzn0rpdwmd","slug":"9.jpg","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/1.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/10.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/11.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/12.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/2.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/3.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/4.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/5.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/6.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/7.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/8.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/爬取网易云热评并生成词云/9.png","post":"ckcebpcj7000qkztzu6aawrxz","slug":"9.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckcebpcil0000kztzn0rpdwmd","tag_id":"ckcebpciq0003kztzm7il3eld","_id":"ckcebpciz0008kztzse0qvq2a"},{"post_id":"ckcebpcip0002kztz832e2fg2","tag_id":"ckcebpciy0007kztzsuemvmyd","_id":"ckcebpcj2000dkztz1l7fln0a"},{"post_id":"ckcebpcis0004kztzrjhhfp9o","tag_id":"ckcebpcj1000bkztzo3yhw0dc","_id":"ckcebpcj4000hkztzhozetjig"},{"post_id":"ckcebpciu0005kztzc14dftvo","tag_id":"ckcebpcj3000fkztznzjy60ve","_id":"ckcebpcj6000lkztzssrd05lh"},{"post_id":"ckcebpcix0006kztznawhibqk","tag_id":"ckcebpcj5000jkztz075w11pw","_id":"ckcebpcj7000pkztzud1bnmba"},{"post_id":"ckcebpciz0009kztzdq2ck2sr","tag_id":"ckcebpcj7000okztz1pozj9ue","_id":"ckcebpcj8000skztzvt0v2utp"},{"post_id":"ckcebpcj0000akztz1cy8q5un","tag_id":"ckcebpcj8000rkztzepblndlm","_id":"ckcebpcj9000ukztzso0guu37"},{"post_id":"ckcebpcj3000ekztz579u1cot","tag_id":"ckcebpcj8000tkztzg7ei6q8g","_id":"ckcebpcja000wkztztjrshjhu"},{"post_id":"ckcebpcj4000gkztzjtugi513","tag_id":"ckcebpcj8000tkztzg7ei6q8g","_id":"ckcebpcja000ykztzz1uo39xq"},{"post_id":"ckcebpcj5000kkztz3i776xaf","tag_id":"ckcebpcja000xkztzwpwnxq8f","_id":"ckcebpcjb0010kztzci0mmw8t"},{"post_id":"ckcebpcj6000mkztz537g99o1","tag_id":"ckcebpcja000xkztzwpwnxq8f","_id":"ckcebpcjb0012kztzvtgfzglq"},{"post_id":"ckcebpcj6000nkztzocvjeqof","tag_id":"ckcebpcja000xkztzwpwnxq8f","_id":"ckcebpcjb0013kztzu1ilp6g4"}],"Tag":[{"name":"docker","_id":"ckcebpciq0003kztzm7il3eld"},{"name":"c++","_id":"ckcebpciy0007kztzsuemvmyd"},{"name":"git","_id":"ckcebpcj1000bkztzo3yhw0dc"},{"name":"网络编程 python","_id":"ckcebpcj3000fkztznzjy60ve"},{"name":"ubuntu","_id":"ckcebpcj5000jkztz075w11pw"},{"name":"python scrapy 爬虫","_id":"ckcebpcj7000okztz1pozj9ue"},{"name":"github","_id":"ckcebpcj8000rkztzepblndlm"},{"name":"python","_id":"ckcebpcj8000tkztzg7ei6q8g"},{"name":"数据分析","_id":"ckcebpcja000xkztzwpwnxq8f"}]}}